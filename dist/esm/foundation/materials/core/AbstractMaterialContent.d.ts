import { RnObject } from '../../core/RnObject';
import { ShaderSemanticsEnum, ShaderSemanticsName } from '../../definitions/ShaderSemantics';
import { CompositionTypeEnum } from '../../definitions/CompositionType';
import { ComponentTypeEnum } from '../../definitions/ComponentType';
import { GLSLShader } from '../../../webgl/shaders/GLSLShader';
import { Matrix44 } from '../../math/Matrix44';
import { WebGLResourceRepository } from '../../../webgl/WebGLResourceRepository';
import { Texture } from '../../textures/Texture';
import { CubeTexture } from '../../textures/CubeTexture';
import { SkeletalComponent } from '../../components/Skeletal/SkeletalComponent';
import { Material } from './Material';
import { MutableVector2 } from '../../math/MutableVector2';
import { MutableVector4 } from '../../math/MutableVector4';
import { MeshComponent } from '../../components/Mesh/MeshComponent';
import { Primitive } from '../../geometry/Primitive';
import { VertexAttributeEnum } from '../../definitions/VertexAttribute';
import { BlendShapeComponent } from '../../components/BlendShape/BlendShapeComponent';
import { ShaderityObject } from 'shaderity';
import { ShaderTypeEnum } from '../../definitions/ShaderType';
import { LightComponent } from '../../components/Light/LightComponent';
import { IMatrix33 } from '../../math/IMatrix';
import { RenderingArg } from '../../../webgl/types/CommonTypes';
import { CameraComponent } from '../../components/Camera/CameraComponent';
import { ShaderSemanticsInfo } from '../../definitions/ShaderSemanticsInfo';
export declare type ShaderAttributeOrSemanticsOrString = string | VertexAttributeEnum | ShaderSemanticsEnum;
export declare type ShaderSocket = {
    compositionType: CompositionTypeEnum;
    componentType: ComponentTypeEnum;
    name: ShaderAttributeOrSemanticsOrString;
    isClosed?: boolean;
};
declare type MaterialNodeTypeName = string;
declare type MaterialNodeUID = number;
declare type InputConnectionType = {
    materialNodeUid: number;
    outputNameOfPrev: string;
    inputNameOfThis: string;
};
export declare abstract class AbstractMaterialContent extends RnObject {
    protected __semantics: ShaderSemanticsInfo[];
    protected static __semanticsMap: Map<MaterialNodeTypeName, Map<ShaderSemanticsName, ShaderSemanticsInfo>>;
    protected __vertexInputs: ShaderSocket[];
    protected __pixelInputs: ShaderSocket[];
    protected __vertexOutputs: ShaderSocket[];
    protected __pixelOutputs: ShaderSocket[];
    protected __defaultInputValues: Map<string, any>;
    private static readonly __invalidMaterialNodeUid;
    private static __invalidMaterialNodeCount;
    protected __materialNodeUid: MaterialNodeUID;
    protected __vertexInputConnections: InputConnectionType[];
    protected __pixelInputConnections: InputConnectionType[];
    static materialNodes: AbstractMaterialContent[];
    protected __shaderFunctionName: string;
    isSingleOperation: boolean;
    protected __definitions: string;
    protected __webglResourceRepository: WebGLResourceRepository;
    protected static __gl?: WebGLRenderingContext;
    static __dummyWhiteTexture: Texture;
    static __dummyBlueTexture: Texture;
    static __dummyBlackTexture: Texture;
    static __dummyPbrKelemenSzirmayKalosBrdfLutTexture: Texture;
    static __dummySRGBGrayTexture: Texture;
    static __dummyBlackCubeTexture: CubeTexture;
    static __sheenLutTextureUid: MaterialNodeUID;
    protected static __tmp_vector4: MutableVector4;
    protected static __tmp_vector2: MutableVector2;
    private __isMorphing;
    private __isSkinning;
    private __isLighting;
    private static __lightPositions;
    private static __lightDirections;
    private static __lightIntensities;
    private static __lightProperties;
    protected __vertexShaderityObject?: ShaderityObject;
    protected __pixelShaderityObject?: ShaderityObject;
    shaderType: ShaderTypeEnum;
    constructor(shader: GLSLShader | null, shaderFunctionName: string, { isMorphing, isSkinning, isLighting }?: {
        isMorphing?: boolean | undefined;
        isSkinning?: boolean | undefined;
        isLighting?: boolean | undefined;
    }, vertexShaderityObject?: ShaderityObject, pixelShaderityObject?: ShaderityObject);
    get shaderFunctionName(): string;
    get vertexShaderityObject(): import("shaderity/dist/esm/types/type").ShaderityObject | undefined;
    get pixelShaderityObject(): import("shaderity/dist/esm/types/type").ShaderityObject | undefined;
    get definitions(): string;
    static getMaterialNode(materialNodeUid: MaterialNodeUID): AbstractMaterialContent;
    get materialNodeUid(): number;
    get _semanticsInfoArray(): ShaderSemanticsInfo[];
    get isSkinning(): boolean;
    get isMorphing(): boolean;
    get isLighting(): boolean;
    setShaderSemanticsInfoArray(shaderSemanticsInfoArray: ShaderSemanticsInfo[]): void;
    getShaderSemanticInfoFromName(name: string): ShaderSemanticsInfo | undefined;
    addVertexInputConnection(inputMaterialNode: AbstractMaterialContent, outputNameOfPrev: string, inputNameOfThis: string): void;
    addPixelInputConnection(inputMaterialNode: AbstractMaterialContent, outputNameOfPrev: string, inputNameOfThis: string): void;
    get vertexInputConnections(): InputConnectionType[];
    get pixelInputConnections(): InputConnectionType[];
    getVertexInput(name: string): ShaderSocket | undefined;
    getVertexInputs(): ShaderSocket[];
    getVertexOutput(name: string): ShaderSocket | undefined;
    getVertexOutputs(): ShaderSocket[];
    getPixelInput(name: string): ShaderSocket | undefined;
    getPixelInputs(): ShaderSocket[];
    getPixelOutput(name: string): ShaderSocket | undefined;
    getPixelOutputs(): ShaderSocket[];
    static initDefaultTextures(): Promise<void>;
    static get dummyWhiteTexture(): Texture;
    static get dummyBlackTexture(): Texture;
    static get dummyBlueTexture(): Texture;
    static get dummyBlackCubeTexture(): Texture;
    static get dummyPbrKelemenSzirmayKalosBrdfLutTexture(): Texture;
    protected setupBasicInfo(args: RenderingArg, shaderProgram: WebGLProgram, firstTime: boolean, material: Material, CameraComponentClass: typeof CameraComponent): void;
    protected setWorldMatrix(shaderProgram: WebGLProgram, worldMatrix: Matrix44): void;
    protected setNormalMatrix(shaderProgram: WebGLProgram, normalMatrix: IMatrix33): void;
    protected setIsBillboard(shaderProgram: WebGLProgram, isBillboard: boolean): void;
    protected setViewInfo(shaderProgram: WebGLProgram, cameraComponent: CameraComponent, isVr: boolean, displayIdx: number): void;
    protected setProjection(shaderProgram: WebGLProgram, cameraComponent: CameraComponent, isVr: boolean, displayIdx: number): void;
    protected setSkinning(shaderProgram: WebGLProgram, setUniform: boolean, skeletalComponent?: SkeletalComponent): void;
    protected setLightsInfo(shaderProgram: WebGLProgram, lightComponents: LightComponent[], material: Material, setUniform: boolean): void;
    setMorphInfo(shaderProgram: WebGLProgram, meshComponent: MeshComponent, primitive: Primitive, blendShapeComponent?: BlendShapeComponent): void;
    setCustomSettingParametersToGpu({ material, shaderProgram, firstTime, args, }: {
        material: Material;
        shaderProgram: WebGLProgram;
        firstTime: boolean;
        args: RenderingArg;
    }): void;
    setDefaultInputValue(inputName: string, value: any): void;
}
export {};
