import { Material } from '../foundation/materials/core/Material';
import { RenderPass } from '../foundation/renderer/RenderPass';
import { Index, IndexOf16Bytes } from '../types/CommonTypes';
import { Scalar } from '../foundation/math/Scalar';
import { Vector3 } from '../foundation/math/Vector3';
import { Primitive } from '../foundation/geometry/Primitive';
import { WebGLStrategy } from './WebGLStrategy';
import { WebXRSystem } from '../xr/WebXRSystem';
declare function setWebGLParameters(material: Material, gl: WebGLRenderingContext): void;
declare function setVRViewport(renderPass: RenderPass, displayIdx: Index): void;
declare function getDisplayCount(isVRMainPass: boolean, webxrSystem: WebXRSystem): 1 | 2;
declare function isVrMainPass(renderPass: RenderPass): boolean;
declare function getPointSpriteShaderSemanticsInfoArray(): ({
    semantic: import("../foundation/definitions/ShaderSemantics").ShaderSemanticsEnum;
    compositionType: {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: IndexOf16Bytes;
        readonly __dummyStr: "SCALAR";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): import("../types/CommonTypes").Count;
        getGlslStr(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): IndexOf16Bytes;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    };
    componentType: {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    };
    stage: import("..").EnumIO;
    initialValue: Scalar;
    min: number;
    max: number;
    isInternalSetting: boolean;
} | {
    semantic: import("../foundation/definitions/ShaderSemantics").ShaderSemanticsEnum;
    compositionType: {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: IndexOf16Bytes;
        readonly __dummyStr: "VEC3";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): import("../types/CommonTypes").Count;
        getGlslStr(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../foundation/definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): IndexOf16Bytes;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    };
    componentType: {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    };
    stage: import("..").EnumIO;
    initialValue: Vector3;
    min: number;
    max: number;
    isInternalSetting: boolean;
})[];
export declare function setupShaderProgram(material: Material, primitive: Primitive, webglStrategy: WebGLStrategy): void;
declare const _default: Readonly<{
    setWebGLParameters: typeof setWebGLParameters;
    setVRViewport: typeof setVRViewport;
    getDisplayCount: typeof getDisplayCount;
    isVrMainPass: typeof isVrMainPass;
    getPointSpriteShaderSemanticsInfoArray: typeof getPointSpriteShaderSemanticsInfoArray;
}>;
export default _default;
