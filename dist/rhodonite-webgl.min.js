(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{47:function(e,t,r){"use strict";r.r(t);var i=r(25),a=r(33),n=r(34),o=r(23),s=r(28),l=r(4),u=r(1),c=r(3);class _ extends c.a{constructor({index:e,str:t}){super({index:e,str:t})}}const h=new _({index:1,str:"OES_vertex_array_object"}),d=new _({index:2,str:"OES_texture_float"}),g=new _({index:3,str:"OES_texture_half_float"}),b=new _({index:4,str:"OES_texture_float_linear"}),x=new _({index:5,str:"OES_texture_half_float_linear"}),f=new _({index:6,str:"ANGLE_instanced_arrays"}),m=new _({index:7,str:"EXT_texture_filter_anisotropic"}),p=new _({index:8,str:"OES_element_index_uint"}),R=new _({index:9,str:"EXT_shader_texture_lod"});const w=Object.freeze({VertexArrayObject:h,TextureFloat:d,TextureHalfFloat:g,TextureFloatLinear:b,TextureHalfFloatLinear:x,InstancedArrays:f,TextureFilterAnisotropic:m,ElementIndexUint:p,ShaderTextureLod:R});class v{constructor(e,t,r){this.__webglVersion=1,this.width=0,this.height=0,this.__extensions=new Map,this.__gl=e,this.width=t,this.height=r,"WebGL2RenderingContext"===this.__gl.constructor.name?this.__webglVersion=2:(this.webgl1ExtVAO=this.__getExtension(w.VertexArrayObject),this.webgl1ExtIA=this.__getExtension(w.InstancedArrays),this.webgl1ExtTF=this.__getExtension(w.TextureFloat),this.webgl1ExtTHF=this.__getExtension(w.TextureHalfFloat),this.webgl1ExtTFL=this.__getExtension(w.TextureFloatLinear),this.webgl1ExtTHFL=this.__getExtension(w.TextureHalfFloatLinear),this.webgl1ExtTFA=this.__getExtension(w.TextureFilterAnisotropic),this.webgl1ExtEIUI=this.__getExtension(w.ElementIndexUint),this.webgl1ExtSTL=this.__getExtension(w.ShaderTextureLod))}getRawContext(){return this.__gl}isSupportWebGL1Extension(e){return!!this.__getExtension(e)}get isWebGL2(){return 2===this.__webglVersion}createVertexArray(){return this.isWebGL2?this.__gl.createVertexArray():null!=this.webgl1ExtVAO?this.webgl1ExtVAO.createVertexArrayOES():void 0}bindVertexArray(e){this.isWebGL2?this.__gl.bindVertexArray(e):null!=this.webgl1ExtVAO&&this.webgl1ExtVAO.bindVertexArrayOES(e)}vertexAttribDivisor(e,t){this.isWebGL2?this.__gl.vertexAttribDivisor(e,t):this.webgl1ExtIA.vertexAttribDivisorANGLE(e,t)}drawElementsInstanced(e,t,r,i,a){this.isWebGL2?this.__gl.drawElementsInstanced(e,t,r,i,a):this.webgl1ExtIA.drawElementsInstancedANGLE(e,t,r,i,a)}__getExtension(e){const t=this.__gl;if(!this.__extensions.has(e)){const r=t.getExtension(e.toString());if(null==r){const t=`The library does not support this environment because the ${e.toString()} is not available`;null!=console.error?console.error(t):console.log(t)}return this.__extensions.set(e,r),r}return this.__extensions.get(e)}}var U=r(39);class y extends a.a{constructor(){super(),this.__webglContexts=new Map,this.__resourceCounter=a.a.InvalidCGAPIResourceUid,this.__webglResources=new Map}static getInstance(){return this.__instance||(this.__instance=new y),this.__instance}addWebGLContext(e,t,r,i){const a=new v(e,t,r);this.__webglContexts.set("default",a),i&&(this.__glw=a)}get currentWebGLContextWrapper(){return this.__glw}getResourceNumber(){return++this.__resourceCounter}getWebGLResource(e){return this.__webglResources.get(e)}createIndexBuffer(e){const t=this.__glw.getRawContext();if(null==t)throw new Error("No WebGLRenderingContext set as Default.");const r=t.createBuffer(),i=this.getResourceNumber();return this.__webglResources.set(i,r),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r),t.bufferData(t.ELEMENT_ARRAY_BUFFER,e.getTypedArray(),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),i}createVertexBuffer(e){const t=this.__glw.getRawContext();if(null==t)throw new Error("No WebGLRenderingContext set as Default.");const r=t.createBuffer(),i=this.getResourceNumber();return this.__webglResources.set(i,r),t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,e.bufferView.getUint8Array(),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),i}createVertexArray(){if(null==this.__glw)throw new Error("No WebGLRenderingContext set as Default.");const e=this.__glw.createVertexArray(),t=this.getResourceNumber();return this.__webglResources.set(t,e),t}createVertexDataResources(e){const t=this.__glw.getRawContext(),r=this.createVertexArray();let i;e.hasIndices()&&(i=this.createIndexBuffer(e.indicesAccessor));const a=[];return e.attributeAccessors.forEach(e=>{const t=this.createVertexBuffer(e);a.push(t)}),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),{vaoHandle:r,iboHandle:i,vboHandles:a,setComplete:!1}}createShaderProgram({vertexShaderStr:e,fragmentShaderStr:t,attributeNames:r,attributeSemantics:i}){const a=this.__glw.getRawContext();if(null==a)throw new Error("No WebGLRenderingContext set as Default.");const n=a.createShader(a.VERTEX_SHADER);a.shaderSource(n,e),a.compileShader(n),this.__checkShaderCompileStatus(n,e);const o=a.createProgram();let s;a.attachShader(o,n),null!=t&&(s=a.createShader(a.FRAGMENT_SHADER),a.shaderSource(s,t),a.compileShader(s),this.__checkShaderCompileStatus(s,t),a.attachShader(o,s)),r.forEach((e,t)=>{a.bindAttribLocation(o,i[t].getAttributeSlot(),e)}),a.linkProgram(o);const l=this.getResourceNumber();return this.__webglResources.set(l,o),this.__checkShaderProgramLinkStatus(o),a.deleteShader(n),null!=t&&a.deleteShader(s),l}__addLineNumber(e){let t=e.split(/\r\n|\r|\n/),r="";for(let e=0;e<t.length;e++){let i=e+1,a=" : ";i<10?a="  : ":i>=100&&(a=": "),r+=i+a+t[e]+"\n"}return r}__checkShaderCompileStatus(e,t){const r=this.__glw.getRawContext();if(!r.getShaderParameter(e,r.COMPILE_STATUS))throw console.log(this.__addLineNumber(t)),new Error("An error occurred compiling the shaders:"+r.getShaderInfoLog(e))}__checkShaderProgramLinkStatus(e){const t=this.__glw.getRawContext();if(!t.getProgramParameter(e,t.LINK_STATUS))throw new Error("Unable to initialize the shader program: "+t.getProgramInfoLog(e))}setupUniformLocations(e,t){const r=this.__glw.getRawContext(),i=this.getWebGLResource(e);for(let e of t){let t="";null!=e.prefix&&(t=e.prefix),e.isPlural?i[e.semantic.str]=r.getUniformLocation(i,"u_"+t+e.semantic.pluralStr):i[e.semantic.str]=r.getUniformLocation(i,"u_"+t+e.semantic.singularStr)}}setUniformValue(e,t,r,i,a,n,o,s,l,u){const c=this.__glw.getRawContext(),_=this.getWebGLResource(e);let h="uniform";r&&(h="uniformMatrix"),h+=i,h+=a,n&&(h+="v");const d=[];d.push(_[t.str]),r&&d.push(!1),d.push(o),null!=s&&d.push(s),null!=l&&d.push(l),null!=u&&d.push(u),c[h].apply(c,d)}setVertexDataToPipeline({vaoHandle:e,iboHandle:t,vboHandles:r},i,o=a.a.InvalidCGAPIResourceUid){const s=this.__glw.getRawContext(),c=this.getWebGLResource(e);if(this.__glw.bindVertexArray(c),null!=t){const e=this.getWebGLResource(t);if(null==e)throw new Error("Nothing Element Array Buffer!");s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,e)}if(r.forEach((e,t)=>{const r=this.getWebGLResource(e);if(null==r)throw new Error("Nothing Element Array Buffer at index "+t);s.bindBuffer(s.ARRAY_BUFFER,r),s.enableVertexAttribArray(i.attributeSemantics[t].getAttributeSlot()),s.vertexAttribPointer(i.attributeSemantics[t].getAttributeSlot(),i.attributeCompositionTypes[t].getNumberOfComponents(),i.attributeComponentTypes[t].index,!1,i.attributeAccessors[t].byteStride,i.attributeAccessors[t].byteOffsetInBufferView)}),o!==a.a.InvalidCGAPIResourceUid){const e=this.getWebGLResource(o);if(null==e)throw new Error("Nothing Element Array Buffer at index");s.bindBuffer(s.ARRAY_BUFFER,e),s.enableVertexAttribArray(n.a.Instance.getAttributeSlot()),s.vertexAttribPointer(n.a.Instance.getAttributeSlot(),l.a.Scalar.getNumberOfComponents(),u.a.Float.index,!1,0,0),this.__glw.vertexAttribDivisor(n.a.Instance.getAttributeSlot(),1)}s.bindBuffer(s.ARRAY_BUFFER,null),this.__glw.bindVertexArray(null),s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,null)}createTexture(e,{level:t,internalFormat:r,width:i,height:a,border:n,format:o,type:s,magFilter:l,minFilter:u,wrapS:c,wrapT:_,generateMipmap:h,anisotropy:d}){const g=this.__glw.getRawContext(),b=g.createTexture(),x=this.getResourceNumber();return this.__webglResources.set(x,b),g.bindTexture(g.TEXTURE_2D,b),e instanceof HTMLImageElement||e instanceof HTMLCanvasElement?g.texImage2D(g.TEXTURE_2D,t,r.index,o.index,s.index,e):g.texImage2D(g.TEXTURE_2D,t,r.index,i,a,n,o.index,s.index,e),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_S,c.index),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_WRAP_T,_.index),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,l.index),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,u.index),U.a.isPowerOfTwoTexture(i,a)&&(d&&this.__glw.webgl1ExtTFA&&g.texParameteri(g.TEXTURE_2D,this.__glw.webgl1ExtTFA.TEXTURE_MAX_ANISOTROPY_EXT,4),h&&g.generateMipmap(g.TEXTURE_2D)),x}updateTexture(e,t,{level:r,width:i,height:a,format:n,type:o}){const s=this.__glw.getRawContext(),l=this.getWebGLResource(e);s.bindTexture(s.TEXTURE_2D,l),s.texSubImage2D(s.TEXTURE_2D,r,0,0,i,a,n.index,o.index,t)}deleteTexture(e){const t=this.getWebGLResource(e),r=this.__glw.getRawContext();null!=t&&(r.deleteTexture(t),this.__webglResources.delete(e))}createDummyTexture(){var e=document.createElement("canvas");e.width=1,e.height=1;const t=e.getContext("2d");return t.fillStyle="rgba(255,255,255,1)",t.fillRect(0,0,1,1),this.createTexture(e,{level:0,internalFormat:s.a.RGBA,width:1,height:1,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.ClampToEdge,wrapT:o.a.ClampToEdge,generateMipmap:!1,anisotropy:!1})}createUniformBuffer(e){const t=this.__glw.getRawContext();if(null==t)throw new Error("No WebGLRenderingContext set as Default.");const r=t.createBuffer(),i=this.getResourceNumber();return this.__webglResources.set(i,r),t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),t.bindBuffer(t.UNIFORM_BUFFER,null),i}updateUniformBuffer(e,t){const r=this.__glw.getRawContext(),i=this.getWebGLResource(e);r.bindBuffer(r.UNIFORM_BUFFER,i),r.bufferSubData(r.UNIFORM_BUFFER,0,t,0),r.bindBuffer(r.UNIFORM_BUFFER,null)}bindUniformBlock(e,t,r){const i=this.__glw.getRawContext();if(null==i)throw new Error("No WebGLRenderingContext set as Default.");const a=this.getWebGLResource(e),n=i.getUniformBlockIndex(a,t);i.uniformBlockBinding(a,n,r)}bindUniformBufferBase(e,t){const r=this.__glw.getRawContext();if(null==r)throw new Error("No WebGLRenderingContext set as Default.");const i=this.getWebGLResource(t);r.bindBufferBase(r.UNIFORM_BUFFER,e,i)}deleteUniformBuffer(e){const t=this.__glw.getRawContext();null==t&&new Error("No WebGLRenderingContext set as Default.");const r=this.getWebGLResource(e);t.deleteBuffer(r)}createTransformFeedback(){const e=this.__glw.getRawContext();var t=e.createTransformFeedback();const r=this.getResourceNumber();return this.__webglResources.set(r,t),e.bindTransformFeedback(e.TRANSFORM_FEEDBACK,t),r}deleteTransformFeedback(e){const t=this.__glw.getRawContext(),r=this.getWebGLResource(e);t.deleteTransformFeedback(r)}}var T=r(21),L=r(10),S=r(5);class A extends c.a{constructor({index:e,singularStr:t,pluralStr:r}){super({index:e,str:t}),this.pluralStr=r}get singularStr(){return this.str}}const P=new A({index:0,singularStr:"worldMatrix",pluralStr:"worldMatrices"}),E=new A({index:1,singularStr:"viewMatrix",pluralStr:"viewMatrices"}),C=new A({index:2,singularStr:"projectionMatrix",pluralStr:"projectionMatrices"}),G=new A({index:3,singularStr:"normalMatrix",pluralStr:"normalMatrices"}),W=new A({index:4,singularStr:"boneMatrix",pluralStr:"boneMatrices"}),M=new A({index:5,singularStr:"baseColorFactor",pluralStr:"baseColorFactors"}),I=new A({index:6,singularStr:"baseColorTexture",pluralStr:"baseColorTextures"}),F=new A({index:7,singularStr:"normalTexture",pluralStr:"normalTextures"}),B=new A({index:8,singularStr:"metallicRoughnessTexture",pluralStr:"metallicRoughnessTextures"}),D=new A({index:9,singularStr:"occlusionTexture",pluralStr:"occlusionTextures"});const N=Object.freeze({WorldMatrix:P,ViewMatrix:E,ProjectionMatrix:C,NormalMatrix:G,BoneMatrix:W,BaseColorFactor:M,BaseColorTexture:I,NormalTexture:F,MetallicRoughnessTexture:B,OcclusionTexture:D});class V{constructor(){this.__webglResourceRepository=y.getInstance()}get glsl_rt0(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"layout(location = 0) out vec4 rt0;\n":"vec4 rt0;\n"}get glsl_fragColor(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"":"gl_FragColor = rt0;\n"}get glsl_vertex_in(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"in":"attribute"}get glsl_fragment_in(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"in":"varying"}get glsl_vertex_out(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"out":"varying"}get glsl_texture(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"texture":"texture2D"}get glsl_versionText(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"#version 300 es\n":""}get toNormalMatrix(){return"\n    mat3 toNormalMatrix(mat4 m) {\n      float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3];\n\n      float b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32;\n\n      float determinantVal = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n      return mat3(\n        a11 * b11 - a12 * b10 + a13 * b09, a12 * b08 - a10 * b11 - a13 * b07, a10 * b10 - a11 * b08 + a13 * b06,\n        a02 * b10 - a01 * b11 - a03 * b09, a00 * b11 - a02 * b08 + a03 * b07, a01 * b08 - a00 * b10 - a03 * b06,\n        a31 * b05 - a32 * b04 + a33 * b03, a32 * b02 - a30 * b05 - a33 * b01, a30 * b04 - a31 * b02 + a33 * b00) / determinantVal;\n    }\n    "}get getSkinMatrix(){return"\n\n    mat4 getSkinMatrix() {\n      mat4 skinMat = a_weight.x * u_boneMatrices[int(a_joint.x)];\n      skinMat += a_weight.y * u_boneMatrices[int(a_joint.y)];\n      skinMat += a_weight.z * u_boneMatrices[int(a_joint.z)];\n      skinMat += a_weight.w * u_boneMatrices[int(a_joint.w)];\n\n      return skinMat;\n    }\n    "}get processSkinningIfNeed(){return"\n    if (length(a_weight.xyz) > 0.01) {\n      mat4 skinMat = getSkinMatrix();\n      v_position_inWorld = skinMat * vec4(a_position, 1.0);\n      normalMatrix = toNormalMatrix(skinMat);\n      v_normal_inWorld = normalize(normalMatrix * a_normal);\n      gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n    }\n    "}get pbrMethodDefinition(){let e;return`\n    const float M_PI = 3.141592653589793;\n    const float c_MinRoughness = 0.04;\n\n    float angular_n_h(float NH) {\n      return acos(NH);\n    }\n\n    float sqr(float x) {\n      return x*x;\n    }\n\n    float d_phong(float NH, float c1) {\n      return pow(\n        cos(acos(NH))\n        , c1\n      );\n    }\n\n    // GGX NDF\n    float d_ggx(float NH, float alphaRoughness) {\n      float roughnessSqr = alphaRoughness * alphaRoughness;\n      float f = (roughnessSqr - 1.0) * NH * NH + 1.0;\n      return roughnessSqr / (M_PI * f * f);\n    }\n\n    float d_torrance_reiz(float NH, float c3) {\n      float CosSquared = NH*NH;\n      float TanSquared = (1.0 - CosSquared)/CosSquared;\n      //return (1.0/M_PI) * sqr(c3/(CosSquared * (c3*c3 + TanSquared)));  // gamma = 2, aka GGX\n      return (1.0/sqrt(M_PI)) * (sqr(c3)/(CosSquared * (c3*c3 + TanSquared))); // gamma = 1, D_Berry\n    }\n\n    float d_beckmann(float NH, float m) {\n      float co = 1.0 / (4.0 * m * m * NH * NH * NH * NH);\n      float expx = exp((NH * NH - 1.0) / (m * m * NH * NH));\n      return co * expx; \n    }\n\n    // the same as glTF WebGL sample\n    // https://github.com/KhronosGroup/glTF-WebGL-PBR/blob/88eda8c5358efe03128b72b6c5f5f6e5b6d023e1/shaders/pbr-frag.glsl#L188\n    // That is, Unreal Engine based approach, but modified to use alphaRoughness (squared artist's roughness parameter),\n    // and based on 'Separable Masking and Shadowing' approximation (propesed by Christophe Schlick)\n    // https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\n    float g_shielding(float NL, float NV, float alphaRoughness) {\n      float r = alphaRoughness;\n\n      // Local Shadowing using "Schlick-Smith" Masking Function\n      float localShadowing = 2.0 * NL / (NL + sqrt(r * r + (1.0 - r * r) * (NL * NL)));\n\n      // Local Masking using "Schlick-Smith" Masking Function\n      float localMasking = 2.0 * NV / (NV + sqrt(r * r + (1.0 - r * r) * (NV * NV)));\n\n      return localShadowing * localMasking;\n    }\n\n    // The Schlick Approximation to Fresnel\n    vec3 fresnel(vec3 f0, float LH) {\n      return vec3(f0) + (vec3(1.0) - f0) * pow(1.0 - LH, 5.0);\n    }\n\n    vec3 cook_torrance_specular_brdf(float NH, float NL, float NV, vec3 F, float alphaRoughness) {    \n      float D = d_ggx(NH, alphaRoughness);\n      float G = g_shielding(NL, NV, alphaRoughness);\n      return vec3(D)*vec3(G)*F/vec3(4.0*NL*NV);\n    }\n\n    vec3 diffuse_brdf(vec3 albedo)\n    {\n      return albedo / M_PI;\n    }\n\n    vec3 srgbToLinear(vec3 srgbColor) {\n      return pow(srgbColor, vec3(2.2));\n    }\n\n    vec3 linearToSrgb(vec3 linearColor) {\n      return pow(linearColor, vec3(1.0/2.2));\n    }\n\n    vec3 IBLContribution(vec3 n, float NV, vec3 reflection, vec3 albedo, vec3 F0, float userRoughness)\n    {\n      float mipCount = uIBLParameters.x;\n      float lod = (userRoughness * mipCount);\n\n      vec3 brdf = srgbToLinear(texture2D(uBrdfLUTTexture, vec2(NV, 1.0 - userRoughness)).rgb);\n      vec3 diffuseLight = srgbToLinear(textureCube(uDiffuseEnvTexture, n).rgb);\n      ${e=this.__webglResourceRepository.currentWebGLContextWrapper.webgl1ExtSTL?"vec3 specularLight = srgbToLinear(textureCubeLodEXT(uSpecularEnvTexture, reflection, lod).rgb);":"vec3 specularLight = srgbToLinear(textureCube(uSpecularEnvTexture, reflection).rgb);"}\n      vec3 diffuse = diffuseLight * albedo;\n      vec3 specular = specularLight * (F0 * brdf.x + brdf.y);\n\n      float IBLDiffuseContribution = uIBLParameters.y;\n      float IBLSpecularContribution = uIBLParameters.z;\n      diffuse *= IBLDiffuseContribution;\n      specular *= IBLSpecularContribution;\n      return diffuse + specular;\n    }\n    `}}class H extends V{constructor(){super(),this.vertexShaderBody=`\n\nvoid main ()\n{\n  mat4 worldMatrix = getMatrix(a_instanceID);\n  mat4 viewMatrix = getViewMatrix(a_instanceID);\n  mat4 projectionMatrix = getProjectionMatrix(a_instanceID);\n  mat3 normalMatrix = getNormalMatrix(a_instanceID);\n\n  v_position_inWorld = worldMatrix * vec4(a_position, 1.0);\n\n  gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n  v_color = a_color;\n  v_normal_inWorld = normalMatrix * a_normal;\n  v_texcoord = a_texcoord;\n\n  // Light\n  vec3 lightPosition = vec3(10000.0, 100000.0, 100000.0);\n  v_lightDirection = normalize(lightPosition - v_position_inWorld.xyz);\n\n  // Skeletal\n  ${this.processSkinningIfNeed}\n\n//  v_color = vec3(u_boneMatrices[int(a_joint.x)][1].xyz);\n}\n  `}static getInstance(){return this.__instance||(this.__instance=new H),this.__instance}get vertexShaderVariableDefinitions(){const e=this.glsl_versionText,t=this.glsl_vertex_in,r=this.glsl_vertex_out;return`${e}\nprecision highp float;\n${t} vec3 a_position;\n${t} vec3 a_color;\n${t} vec3 a_normal;\n${t} float a_instanceID;\n${t} vec2 a_texcoord;\n${t} vec4 a_joint;\n${t} vec4 a_weight;\n${r} vec3 v_color;\n${r} vec3 v_normal_inWorld;\n${r} vec4 v_position_inWorld;\n${r} vec3 v_lightDirection;\n${r} vec2 v_texcoord;\nuniform mat4 u_boneMatrices[100];\n\n${this.toNormalMatrix}\n\n${this.getSkinMatrix}\n\n`}get fragmentShaderSimple(){const e=this.glsl_versionText,t=this.glsl_fragment_in,r=this.glsl_rt0,i=this.glsl_fragColor;return`${e}\nprecision highp float;\n\nstruct Material {\n  vec4 baseColorFactor;\n  sampler2D baseColorTexture;\n};\n\nuniform Material u_material;\n\n${t} vec3 v_color;\n${t} vec3 v_normal_inWorld;\n${t} vec4 v_position_inWorld;\n${t} vec3 v_lightDirection;\n${t} vec2 v_texcoord;\n${r}\nvoid main ()\n{\n  // Light\n  //vec3 lightPosition = vec3(0.0, 0.0, 50000.0);\n\n  // Normal\n  vec3 normal_inWorld = normalize(v_normal_inWorld);\n\n  // baseColor\n  vec3 color = vec3(0.0, 0.0, 0.0);\n  if (v_color != color && u_material.baseColorFactor.rgb != color) {\n    color = v_color * u_material.baseColorFactor.rgb;\n  } else if (v_color == color) {\n    color = u_material.baseColorFactor.rgb;\n  } else if (u_material.baseColorFactor.rgb == color) {\n    color = v_color;\n  } else {\n    color = vec3(1.0, 1.0, 1.0);\n  }\n  //color = v_color;\n\n  // baseColorTexture\n  vec4 textureColor = ${this.glsl_texture}(u_material.baseColorTexture, v_texcoord);\n  if (textureColor.r > 0.05) {\n    color *= textureColor.rgb;\n  }\n\n  // Lighting\n  if (length(v_normal_inWorld) > 0.02) {\n    vec3 lightDirection = normalize(v_lightDirection);\n    float diffuse = 1.0 * max(0.0, dot(normal_inWorld, lightDirection));\n    color *= diffuse;\n  }\n\n  rt0 = vec4(color, 1.0);\n\n\n  ${i}\n}\n`}get fragmentShader(){return this.fragmentShaderSimple}}H.attributeNames=["a_position","a_color","a_normal","a_texcoord","a_joint","a_weight","a_instanceID"],H.attributeSemantics=[n.a.Position,n.a.Color0,n.a.Normal,n.a.Texcoord0,n.a.Joints0,n.a.Weights0,n.a.Instance];class O{constructor(){this.__webglResourceRepository=y.getInstance(),this.__uboUid=a.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=a.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_UBO="layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(){if(this.__shaderProgramUid!==a.a.InvalidCGAPIResourceUid)return;const e=H.getInstance();let t=e.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_UBO+e.vertexShaderBody,r=e.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:H.attributeNames,attributeSemantics:H.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:N.ViewMatrix,isPlural:!1},{semantic:N.ProjectionMatrix,isPlural:!1}])}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=i,O.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,i)}}$prerender(e,t){if(this.__isVAOSet)return;const r=e.getPrimitiveNumber();for(let i=0;i<r;i++){const r=e.getPrimitiveAt(i);this.__vertexHandles[i]=O.__vertexHandleOfPrimitiveObjectUids.get(r.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i],r,t)}this.__isVAOSet=!0}common_$prerender(){const e=T.a.getInstance().getBuffer(S.a.GPUInstanceData);new Float32Array(e.getArrayBuffer());this.__uboUid===a.a.InvalidCGAPIResourceUid?(this.__uboUid=this.__webglResourceRepository.createUniformBuffer(L.a.getAccessor("worldMatrix",L.a).dataViewOfBufferView),this.__webglResourceRepository.bindUniformBufferBase(0,this.__uboUid)):this.__webglResourceRepository.updateUniformBuffer(this.__uboUid,L.a.getAccessor("worldMatrix",L.a).dataViewOfBufferView)}attachGPUData(){this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"matrix",0)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)}attachVertexData(e,t,r,i){const a=this.__vertexHandles[e],n=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=r.getRawContext();if(null!=n)r.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new O),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ViewMatrix,!0,4,"f",!0,e.v),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ProjectionMatrix,!0,4,"f",!0,t.v),!0}}O.__vertexHandleOfPrimitiveObjectUids=new Map;var k=r(24),j=r(19),$=r(35),X=r(29);class z{constructor(){this.__webglResourceRepository=y.getInstance(),this.__instanceDataTextureUid=a.a.InvalidCGAPIResourceUid,this.__vertexDataTextureUid=a.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=a.a.InvalidCGAPIResourceUid,this.__primitiveHeaderUboUid=a.a.InvalidCGAPIResourceUid,this.__indexCountToSubtractUboUid=a.a.InvalidCGAPIResourceUid,this.__entitiesUidUboUid=a.a.InvalidCGAPIResourceUid,this.__primitiveUidUboUid=a.a.InvalidCGAPIResourceUid,this.__isVertexReady=!1}get __transformFeedbackShaderText(){H.getInstance().glsl_vertex_in,H.getInstance().glsl_texture;return`#version 300 es\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    void main(){\n      int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n      int entityUidMinusOne = 0;\n      int primitiveUid = 0;\n      for (int i=0; i<=indexOfVertices; i++) {\n        for (int j=0; j<1024; j++) {\n          int value = u_indexCountsToSubtract.counts[j/4][j%4];\n          int result = int(step(float(value), float(i)));\n          if (result > 0) {\n            entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n            primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n          } else {\n            break;\n          }\n        }\n      }\n\n      ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n      int primIndicesByteOffset = indicesMeta.x;\n      int primIndicesComponentSizeInByte = indicesMeta.y;\n      int primIndicesLength = indicesMeta.z;\n\n      int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n      // get Indices\n      int texelLength = ${T.a.bufferWidthLength};\n      vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n      int index = int(indexVec4[idx%4]);\n\n      // get Positions\n      ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n      int primPositionsByteOffset = indicesData.x;\n      idx = primPositionsByteOffset/4 + index;\n      vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n      position = posVec4;\n    }\n`}get __transformFeedbackFragmentShaderText(){return"#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    "}setupShaderProgram(){if(this.__shaderProgramUid!==a.a.InvalidCGAPIResourceUid)return;let e=this.__transformFeedbackShaderText,t=this.__transformFeedbackFragmentShaderText;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:e,fragmentShaderStr:t,attributeNames:H.attributeNames,attributeSemantics:H.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:N.ViewMatrix,isPlural:!1},{semantic:N.ProjectionMatrix,isPlural:!1}])}$load(e){if(this.__isVertexReady)return;const t=T.a.getInstance().getBuffer(S.a.CPUGeneric),r=t.takeBufferView({byteLengthToNeed:12,byteStride:4,isAoS:!1}).takeAccessor({compositionType:l.a.Scalar,componentType:u.a.UnsingedInt,count:3}),i=t.takeBufferView({byteLengthToNeed:48,byteStride:16,isAoS:!1}).takeAccessor({compositionType:l.a.Vec4,componentType:u.a.Float,count:3}),a=r.getTypedArray();a[0]=0,a[1]=1,a[2]=2;const o=$.a.createPrimitive({indices:a,attributeCompositionTypes:[i.compositionType],attributeSemantics:[n.a.Position],attributes:[i.getTypedArray()],primitiveMode:X.a.Triangles,material:void 0});this.__vertexHandle=this.__webglResourceRepository.createVertexDataResources(o),this.__isVertexReady=!0}$prerender(e,t){}__setupUBOPrimitiveHeaderData(){const e=T.a.getInstance().getBuffer(S.a.UBOGeneric),t=new Int32Array(e.getArrayBuffer());this.__primitiveHeaderUboUid===a.a.InvalidCGAPIResourceUid&&(this.__primitiveHeaderUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(3,this.__primitiveHeaderUboUid))}__setupGPUInstanceMetaData(){if(this.__primitiveUidUboUid!==a.a.InvalidCGAPIResourceUid)return;const e=k.a.getInstance()._getEntities(),t=new Int32Array(e.length),r=new Int32Array(e.length),i=new Int32Array(e.length);let n=0;e.forEach((e,a)=>{const o=e.getComponent(j.a);if(o){r[a]=o.getPrimitiveAt(0).primitiveUid,t[a]=e.entityUID;const s=o.getPrimitiveAt(0).indicesAccessor.elementCount;i[a]=n+s,n+=s}}),this.__indexCountToSubtractUboUid=this.__webglResourceRepository.createUniformBuffer(i),this.__webglResourceRepository.bindUniformBufferBase(0,this.__indexCountToSubtractUboUid),this.__entitiesUidUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(1,this.__entitiesUidUboUid),this.__primitiveUidUboUid=this.__webglResourceRepository.createUniformBuffer(r),this.__webglResourceRepository.bindUniformBufferBase(2,this.__primitiveUidUboUid)}__setupGPUInstanceData(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(w.TextureHalfFloat))&&(e=!0);const t=T.a.getInstance().getBuffer(S.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let i;if(e){i=new Uint16Array(r.length);let e=t.byteSizeInUse/4;e/=2;for(let t=0;t<e;t++)i[t]=U.a.toHalfFloat(r[t])}this.__instanceDataTextureUid===a.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:o.a.RGBA16F,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:s.a.RGBA,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.HalfFloat,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:o.a.RGBA32F,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:s.a.RGBA,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,format:s.a.RGBA,type:u.a.Float}):this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,format:s.a.RGBA,type:u.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,format:s.a.RGBA,type:u.a.Float}))}__setupGPUVertexData(){if(this.__vertexDataTextureUid!==a.a.InvalidCGAPIResourceUid)return;const e=T.a.getInstance().getBuffer(S.a.GPUVertexData),t=new Float32Array(e.getArrayBuffer());this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:o.a.RGBA32F,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:s.a.RGBA,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1})}common_$prerender(){this.__setupUBOPrimitiveHeaderData(),this.__setupGPUInstanceMetaData(),this.__setupGPUInstanceData(),this.__setupGPUVertexData()}attachGPUData(){{const t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,r);const i=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var e=t.getUniformLocation(i,"u_instanceDataTexture");t.uniform1i(e,0)}{const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,r);const i=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var t=e.getUniformLocation(i,"u_vertexDataTexture");e.uniform1i(t,1)}this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"indexCountsToSubtract",0),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"entityUids",1),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveUids",2),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveHeader",3)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)}attachVertexData(e,t,r,i){}static getInstance(){return this.__instance||(this.__instance=new z),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ViewMatrix,!0,4,"f",!0,e.v),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ProjectionMatrix,!0,4,"f",!0,t.v),!0}}class Y{constructor(){this.__webglResourceRepository=y.getInstance(),this.__dataTextureUid=a.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=a.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1}get vertexShaderMethodDefinitions_dataTexture(){const e=H.getInstance().glsl_texture;return`\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${e}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${e}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = instanceId;\n    float powWidthVal = ${T.a.bufferWidthLength}.0;\n    float powHeightVal = ${T.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index * 4.0 + 0.0, arg);\n   vec4 col1 = fetchElement(u_dataTexture, index * 4.0 + 1.0, arg);\n   vec4 col2 = fetchElement(u_dataTexture, index * 4.0 + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `}setupShaderProgram(){if(this.__shaderProgramUid!==a.a.InvalidCGAPIResourceUid)return;const e=H.getInstance();let t=e.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_dataTexture+e.vertexShaderBody,r=e.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:H.attributeNames,attributeSemantics:H.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:N.ViewMatrix,isPlural:!1},{semantic:N.ProjectionMatrix,isPlural:!1}])}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=i,Y.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,i)}}$prerender(e,t){if(this.__isVAOSet)return;const r=e.getPrimitiveNumber();for(let i=0;i<r;i++){const r=e.getPrimitiveAt(i);this.__vertexHandles[i]=Y.__vertexHandleOfPrimitiveObjectUids.get(r.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i],r,t)}this.__isVAOSet=!0}common_$prerender(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(w.TextureHalfFloat))&&(e=!0);const t=T.a.getInstance().getBuffer(S.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let i;if(e){i=new Uint16Array(r.length);let e=t.byteSizeInUse/4;e/=2;for(let t=0;t<e;t++)i[t]=U.a.toHalfFloat(r[t])}this.__dataTextureUid===a.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:o.a.RGBA16F,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:s.a.RGBA,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.HalfFloat,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:o.a.RGBA32F,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:s.a.RGBA,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,border:0,format:s.a.RGBA,type:u.a.Float,magFilter:o.a.Nearest,minFilter:o.a.Nearest,wrapS:o.a.Repeat,wrapT:o.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,format:s.a.RGBA,type:u.a.Float}):this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,format:s.a.RGBA,type:u.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:T.a.bufferWidthLength,height:T.a.bufferHeightLength,format:s.a.RGBA,type:u.a.Float}))}attachGPUData(){const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),t=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);e.bindTexture(e.TEXTURE_2D,t);const r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var i=e.getUniformLocation(r,"u_dataTexture");e.uniform1i(i,0)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)}attachVertexData(e,t,r,i){const a=this.__vertexHandles[e],n=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=r.getRawContext();if(null!=n)r.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new Y),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ViewMatrix,!0,4,"f",!0,e.v),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ProjectionMatrix,!0,4,"f",!0,t.v),!0}}Y.__vertexHandleOfPrimitiveObjectUids=new Map;var q=r(15),J=r(38);class K{constructor(){this.__webglResourceRepository=y.getInstance(),this.__uboUid=a.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=a.a.InvalidCGAPIResourceUid,this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_uniform="\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(){if(this.__shaderProgramUid!==a.a.InvalidCGAPIResourceUid)return;const e=H.getInstance();let t=e.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_uniform+e.vertexShaderBody,r=e.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:H.attributeNames,attributeSemantics:H.attributeSemantics}),this.__shaderProgram=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);this.__webglResourceRepository.currentWebGLContextWrapper;this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:N.WorldMatrix,isPlural:!1},{semantic:N.BaseColorFactor,isPlural:!1,prefix:"material."},{semantic:N.ViewMatrix,isPlural:!1},{semantic:N.ProjectionMatrix,isPlural:!1},{semantic:N.NormalMatrix,isPlural:!1},{semantic:N.BaseColorTexture,isPlural:!1,prefix:"material."},{semantic:N.BoneMatrix,isPlural:!0}])}$load(e){const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);K.__vertexHandleOfPrimitiveObjectUids.set(t.primitiveUid,i)}this.__dummyTextureUid=this.__webglResourceRepository.createDummyTexture()}$prerender(e,t){const r=[],i=e.getPrimitiveNumber();for(let a=0;a<i;a++){const i=e.getPrimitiveAt(a);r[a]=K.__vertexHandleOfPrimitiveObjectUids.get(i.primitiveUid),r[a].setComplete,this.__webglResourceRepository.setVertexDataToPipeline(r[a],i,t),r[a].setComplete=!0}}common_$prerender(){}attachGPUData(){}attatchShaderProgram(){this.__shaderProgramUid;this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext().useProgram(this.__shaderProgram)}attachVertexData(e,t,r,i){const a=K.__vertexHandleOfPrimitiveObjectUids.get(t.primitiveUid),n=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=r.getRawContext();if(null!=n)r.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new K),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ViewMatrix,!0,4,"f",!0,e.v),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.ProjectionMatrix,!0,4,"f",!0,t.v),!1}$render(e,t,r,i,n){const o=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();const s=o.getRawContext();this.attachVertexData(e,t,o,a.a.InvalidCGAPIResourceUid),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.WorldMatrix,!0,4,"f",!0,q.a.transpose(r).v),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.NormalMatrix,!0,3,"f",!0,i.v);const l=t.material,u=[];l?(u[0]=l.baseColor.r,u[1]=l.baseColor.g,u[2]=l.baseColor.b,u[3]=l.alpha):(u[0]=1,u[1]=1,u[2]=1,u[3]=1),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.BaseColorFactor,!1,4,"f",!0,u),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.BaseColorTexture,!1,1,"i",!1,0);const c=n.getComponent(J.a);if(c){const e=c.jointMatrices;this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,N.BoneMatrix,!0,4,"f",!0,e)}if(l&&l.baseColorTexture){const e=this.__webglResourceRepository.getWebGLResource(l.baseColorTexture.texture3DAPIResourseUid);s.bindTexture(s.TEXTURE_2D,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyTextureUid);s.bindTexture(s.TEXTURE_2D,e)}s.drawElements(t.primitiveMode.index,t.indicesAccessor.elementCount,t.indicesAccessor.componentType.index,0),s.bindTexture(s.TEXTURE_2D,null),s.useProgram(null),this.dettachVertexData(o)}}K.__vertexHandleOfPrimitiveObjectUids=new Map;var Q=function(e){return e.index===i.a.UBOWebGL2.index?O.getInstance():e.index===i.a.TransformFeedbackWebGL2.index?z.getInstance():e.index===i.a.UniformWebGL1.index?K.getInstance():Y.getInstance()};const Z=Object.freeze({getRenderingStrategy:Q,GLSLShader:V,WebGLContextWrapper:v,WebGLResourceRepository:y,WebGLStrategyDataTexture:Y,WebGLStrategyTransformFeedback:z,WebGLStrategyUBO:O,WebGLStrategyUniform:K});t.default=Z}}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.1-91-gad19-mod branch: feature/shader';
