(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{66:function(e,t,r){"use strict";r.r(t);var i=r(43),a=r(23),s=r(24),o=r(26),n=r(16),u=r(6),c=r(15),_=r(5),d=r(55);class l{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__uboUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_UBO="layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(e){if(this.__shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;const t=d.a.getInstance();let r=t.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_UBO+t.vertexShaderBody,i=t.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:r,fragmentShaderStr:i,attributeNames:d.a.attributeNames,attributeSemantics:d.a.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=i,l.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,i)}}$prerender(e,t){if(this.__isVAOSet)return;const r=e.getPrimitiveNumber();for(let i=0;i<r;i++){const r=e.getPrimitiveAt(i);this.__vertexHandles[i]=l.__vertexHandleOfPrimitiveObjectUids.get(r.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i],r,t)}this.__isVAOSet=!0}common_$prerender(){const e=s.a.getInstance().getBuffer(u.a.GPUInstanceData);new Float32Array(e.getArrayBuffer());this.__uboUid===c.a.InvalidCGAPIResourceUid?(this.__uboUid=this.__webglResourceRepository.createUniformBuffer(n.a.getAccessor("worldMatrix",n.a).dataViewOfBufferView),this.__webglResourceRepository.bindUniformBufferBase(0,this.__uboUid)):this.__webglResourceRepository.updateUniformBuffer(this.__uboUid,n.a.getAccessor("worldMatrix",n.a).dataViewOfBufferView)}attachGPUData(){this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"matrix",0)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)}attachVertexData(e,t,r,i){const a=this.__vertexHandles[e],s=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=r.getRawContext();if(null!=s)r.bindVertexArray(s);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new l),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,_.a.ViewMatrix,!0,4,"f",!0,{x:e.v},{}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,_.a.ProjectionMatrix,!0,4,"f",!0,{x:t.v},{}),!0}}l.__vertexHandleOfPrimitiveObjectUids=new Map;var h=r(33),m=r(41),g=r(1),p=r(27),f=r(40),R=r(17),x=r(46),b=r(2),y=r(7),U=r(18);class w{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__instanceDataTextureUid=c.a.InvalidCGAPIResourceUid,this.__vertexDataTextureUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.__primitiveHeaderUboUid=c.a.InvalidCGAPIResourceUid,this.__indexCountToSubtractUboUid=c.a.InvalidCGAPIResourceUid,this.__entitiesUidUboUid=c.a.InvalidCGAPIResourceUid,this.__primitiveUidUboUid=c.a.InvalidCGAPIResourceUid,this.__isVertexReady=!1}get __transformFeedbackShaderText(){d.a.getInstance().glsl_vertex_in,d.a.getInstance().glsl_texture;return`#version 300 es\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    void main(){\n      int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n      int entityUidMinusOne = 0;\n      int primitiveUid = 0;\n      for (int i=0; i<=indexOfVertices; i++) {\n        for (int j=0; j<1024; j++) {\n          int value = u_indexCountsToSubtract.counts[j/4][j%4];\n          int result = int(step(float(value), float(i)));\n          if (result > 0) {\n            entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n            primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n          } else {\n            break;\n          }\n        }\n      }\n\n      ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n      int primIndicesByteOffset = indicesMeta.x;\n      int primIndicesComponentSizeInByte = indicesMeta.y;\n      int primIndicesLength = indicesMeta.z;\n\n      int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n      // get Indices\n      int texelLength = ${s.a.bufferWidthLength};\n      vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n      int index = int(indexVec4[idx%4]);\n\n      // get Positions\n      ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n      int primPositionsByteOffset = indicesData.x;\n      idx = primPositionsByteOffset/4 + index;\n      vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n      position = posVec4;\n    }\n`}get __transformFeedbackFragmentShaderText(){return"#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    "}setupShaderProgram(e){if(this.__shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;let t=this.__transformFeedbackShaderText,r=this.__transformFeedbackFragmentShaderText;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:d.a.attributeNames,attributeSemantics:d.a.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}$load(e){if(this.__isVertexReady)return;this.setupShaderProgram(e);const t=s.a.getInstance().getBuffer(u.a.CPUGeneric),r=t.takeBufferView({byteLengthToNeed:12,byteStride:4,isAoS:!1}).takeAccessor({compositionType:b.a.Scalar,componentType:g.a.UnsingedInt,count:3}),i=t.takeBufferView({byteLengthToNeed:48,byteStride:16,isAoS:!1}).takeAccessor({compositionType:b.a.Vec4,componentType:g.a.Float,count:3}),a=r.getTypedArray();a[0]=0,a[1]=1,a[2]=2;const o=x.a.createPrimitive({indices:a,attributeCompositionTypes:[i.compositionType],attributeSemantics:[y.a.Position],attributes:[i.getTypedArray()],primitiveMode:U.a.Triangles,material:void 0});this.__vertexHandle=this.__webglResourceRepository.createVertexDataResources(o),this.__isVertexReady=!0}$prerender(e,t){}__setupUBOPrimitiveHeaderData(){const e=s.a.getInstance().getBuffer(u.a.UBOGeneric),t=new Int32Array(e.getArrayBuffer());this.__primitiveHeaderUboUid===c.a.InvalidCGAPIResourceUid&&(this.__primitiveHeaderUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(3,this.__primitiveHeaderUboUid))}__setupGPUInstanceMetaData(){if(this.__primitiveUidUboUid!==c.a.InvalidCGAPIResourceUid)return;const e=f.a.getInstance()._getEntities(),t=new Int32Array(e.length),r=new Int32Array(e.length),i=new Int32Array(e.length);let a=0;e.forEach((e,s)=>{const o=e.getComponent(R.a);if(o){r[s]=o.getPrimitiveAt(0).primitiveUid,t[s]=e.entityUID;const n=o.getPrimitiveAt(0).indicesAccessor.elementCount;i[s]=a+n,a+=n}}),this.__indexCountToSubtractUboUid=this.__webglResourceRepository.createUniformBuffer(i),this.__webglResourceRepository.bindUniformBufferBase(0,this.__indexCountToSubtractUboUid),this.__entitiesUidUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(1,this.__entitiesUidUboUid),this.__primitiveUidUboUid=this.__webglResourceRepository.createUniformBuffer(r),this.__webglResourceRepository.bindUniformBufferBase(2,this.__primitiveUidUboUid)}__setupGPUInstanceData(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(h.a.TextureHalfFloat))&&(e=!0);const t=s.a.getInstance().getBuffer(u.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let i;if(e){i=new Uint16Array(r.length);let e=t.takenSizeInByte/4;e/=2;for(let t=0;t<e;t++)i[t]=o.a.toHalfFloat(r[t])}this.__instanceDataTextureUid===c.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:p.a.RGBA16F,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:m.a.RGBA,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.HalfFloat,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:p.a.RGBA32F,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:m.a.RGBA,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,format:m.a.RGBA,type:g.a.Float}):this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,format:m.a.RGBA,type:g.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,format:m.a.RGBA,type:g.a.Float}))}__setupGPUVertexData(){if(this.__vertexDataTextureUid!==c.a.InvalidCGAPIResourceUid)return;const e=s.a.getInstance().getBuffer(u.a.GPUVertexData),t=new Float32Array(e.getArrayBuffer());this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:p.a.RGBA32F,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:m.a.RGBA,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1})}common_$prerender(){this.__setupUBOPrimitiveHeaderData(),this.__setupGPUInstanceMetaData(),this.__setupGPUInstanceData(),this.__setupGPUVertexData()}attachGPUData(){{const t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,r);const i=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var e=t.getUniformLocation(i,"u_instanceDataTexture");t.uniform1i(e,0)}{const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,r);const i=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var t=e.getUniformLocation(i,"u_vertexDataTexture");e.uniform1i(t,1)}this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"indexCountsToSubtract",0),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"entityUids",1),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveUids",2),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveHeader",3)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)}attachVertexData(e,t,r,i){}static getInstance(){return this.__instance||(this.__instance=new w),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,_.a.ViewMatrix,!0,4,"f",!0,{x:e.v},{}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,_.a.ProjectionMatrix,!0,4,"f",!0,{x:t.v},{}),!0}}class v{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__dataTextureUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1}get vertexShaderMethodDefinitions_dataTexture(){const e=d.a.getInstance().glsl_texture;return`\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${e}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${e}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = instanceId;\n    float powWidthVal = ${s.a.bufferWidthLength}.0;\n    float powHeightVal = ${s.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index * 4.0 + 0.0, arg);\n   vec4 col1 = fetchElement(u_dataTexture, index * 4.0 + 1.0, arg);\n   vec4 col2 = fetchElement(u_dataTexture, index * 4.0 + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `}setupShaderProgram(e){if(this.__shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;const t=d.a.getInstance();let r=t.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_dataTexture+t.vertexShaderBody,i=t.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:r,fragmentShaderStr:i,attributeNames:d.a.attributeNames,attributeSemantics:d.a.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=i,v.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,i)}}$prerender(e,t){if(this.__isVAOSet)return;const r=e.getPrimitiveNumber();for(let i=0;i<r;i++){const r=e.getPrimitiveAt(i);this.__vertexHandles[i]=v.__vertexHandleOfPrimitiveObjectUids.get(r.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i],r,t)}this.__isVAOSet=!0}common_$prerender(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(h.a.TextureHalfFloat))&&(e=!0);const t=s.a.getInstance().getBuffer(u.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let i;if(e){i=new Uint16Array(r.length);let e=t.takenSizeInByte/4;e/=2;for(let t=0;t<e;t++)i[t]=o.a.toHalfFloat(r[t])}this.__dataTextureUid===c.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:p.a.RGBA16F,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:m.a.RGBA,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.HalfFloat,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:p.a.RGBA32F,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:m.a.RGBA,width:s.a.bufferWidthLength,height:s.a.bufferHeightLength,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:s.a.bufferWidthLength,height:t.takenSizeInByte/s.a.bufferWidthLength/4,format:m.a.RGBA,type:g.a.Float}):this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:s.a.bufferWidthLength,height:t.takenSizeInByte/s.a.bufferWidthLength/4,format:m.a.RGBA,type:g.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:s.a.bufferWidthLength,height:t.takenSizeInByte/s.a.bufferWidthLength/4,format:m.a.RGBA,type:g.a.Float}))}attachGPUData(){const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),t=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);e.bindTexture(e.TEXTURE_2D,t);const r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var i=e.getUniformLocation(r,"u_dataTexture");e.uniform1i(i,0)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)}attachVertexData(e,t,r,i){const a=this.__vertexHandles[e],s=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=r.getRawContext();if(null!=s)r.bindVertexArray(s);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new v),this.__instance}common_$render(e,t){const r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,_.a.ViewMatrix,!0,4,"f",!0,{x:e.v},{}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,_.a.ProjectionMatrix,!0,4,"f",!0,{x:t.v},{}),!0}}v.__vertexHandleOfPrimitiveObjectUids=new Map;var T=r(36),P=r(54),L=r(28),S=r(11),G=r(57),I=r(25),W=r(35),A=r(49),B=r(42),M=function(e,t,r,i){return new(r||(r=Promise))(function(a,s){function o(e){try{u(i.next(e))}catch(e){s(e)}}function n(e){try{u(i.throw(e))}catch(e){s(e)}}function u(e){e.done?a(e.value):new r(function(t){t(e.value)}).then(o,n)}u((i=i.apply(e,t||[])).next())})};class C{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.vertexShaderMethodDefinitions_uniform="\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  ",this.__lastShader=-1}setupShaderProgram(e){const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_uniform);const e=[{semantic:_.a.WorldMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.NormalMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.BoneMatrix,isPlural:!0,isSystem:!0},{semantic:_.a.LightNumber,isPlural:!1,isSystem:!0},{semantic:_.a.ViewPosition,isPlural:!1,isSystem:!0},{semantic:_.a.DiffuseEnvTexture,compositionType:b.a.TextureCube,componentType:g.a.Int,isPlural:!1,isSystem:!0},{semantic:_.a.SpecularEnvTexture,compositionType:b.a.TextureCube,componentType:g.a.Int,isPlural:!1,isSystem:!0},{semantic:_.a.IBLParameter,compositionType:b.a.Vec3,componentType:g.a.Float,isPlural:!1,isSystem:!0},{semantic:_.a.BrdfLutTexture,compositionType:b.a.Texture2D,componentType:g.a.Int,isPlural:!1,isSystem:!0}],r=[];for(let e=0;e<I.a.maxLightNumberInShader;e++)r.push({semantic:_.a.LightPosition,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0}),r.push({semantic:_.a.LightDirection,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0}),r.push({semantic:_.a.LightIntensity,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0});this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,e.concat(r)),t.setUniformLocations(t._shaderProgramUid)}}}$load(e){return M(this,void 0,void 0,function*(){this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);C.__vertexHandleOfPrimitiveObjectUids.set(t.primitiveUid,i)}this.__dummyWhiteTextureUid=this.__webglResourceRepository.createDummyTexture(),this.__dummyBlackTextureUid=this.__webglResourceRepository.createDummyTexture("rgba(0, 0, 0, 1)"),this.__dummyBlackCubeTextureUid=this.__webglResourceRepository.createDummyCubeTexture();const r=W.a.getInstance().getModule("pbr").pbrCookTorranceBrdfLutDataUrl;this.__pbrCookTorranceBrdfLutDataUrlUid=yield this.__webglResourceRepository.createTextureFromDataUri(r,{level:0,internalFormat:m.a.RGBA,border:0,format:m.a.RGBA,type:g.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.ClampToEdge,wrapT:p.a.ClampToEdge,generateMipmap:!1,anisotropy:!1})})}$prerender(e,t){const r=[],i=e.getPrimitiveNumber();if(e.weights.length>0)for(let t=0;t<i;t++){const i=e.getPrimitiveAt(t);r[t]=C.__vertexHandleOfPrimitiveObjectUids.get(i.primitiveUid),this.__webglResourceRepository.resendVertexBuffer(i,r[t].vboHandles)}for(let a=0;a<i;a++){const i=e.getPrimitiveAt(a);r[a]=C.__vertexHandleOfPrimitiveObjectUids.get(i.primitiveUid),r[a].setComplete,this.__webglResourceRepository.setVertexDataToPipeline(r[a],i,t),r[a].setComplete=!0}}common_$prerender(){const e=S.a.getInstance();this.__lightComponents=e.getComponentsWithType(G.a)}attachGPUData(){}attatchShaderProgram(){}attachVertexData(e,t,r,i){const a=C.__vertexHandleOfPrimitiveObjectUids.get(t.primitiveUid),s=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=r.getRawContext();if(null!=s)r.bindVertexArray(s);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new C),this.__instance}common_$render(e,t){return!1}$render(e,t,r,i,a,s){const o=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();const n=o.getRawContext();e.componentSID===A.a.firstOpaqueSid&&(n.disable(n.BLEND),n.depthMask(!0)),e.componentSID==A.a.firstTranparentSid&&(n.enable(n.BLEND),n.blendFuncSeparate(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE),n.depthMask(!1));const u=e.getPrimitiveNumber();for(let d=0;d<u;d++){const u=e.getPrimitiveAt(d);this.attachVertexData(d,u,o,c.a.InvalidCGAPIResourceUid);const l=u.material,h=this.__webglResourceRepository.getWebGLResource(l._shaderProgramUid),m=l._shaderProgramUid;let g=!1;m!==this.__lastShader&&(n.useProgram(h),this.__lastShader=m,g=!0),T.a.transposeTo(t,C.transposedMatrix44),this.__webglResourceRepository.setUniformValue(m,_.a.WorldMatrix,!0,4,"f",!0,{x:C.transposedMatrix44.v},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.NormalMatrix,!0,3,"f",!0,{x:r.v},{force:g});const p=S.a.getInstance().getComponent(L.a,L.a.main);this.__webglResourceRepository.setUniformValue(m,_.a.ViewMatrix,!0,4,"f",!0,{x:p.viewMatrix.v},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.ProjectionMatrix,!0,4,"f",!0,{x:p.projectionMatrix.v},{force:g});const f=p.worldPosition;this.__webglResourceRepository.setUniformValue(m,_.a.ViewPosition,!1,3,"f",!0,{x:f.v},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.LightNumber,!1,1,"i",!1,{x:this.__lightComponents.length},{force:g});for(let e=0;e<this.__lightComponents.length&&!(e>=I.a.maxLightNumberInShader);e++){const t=this.__lightComponents[e],r=t.entity.getSceneGraph().worldPosition,i=t.direction,a=t.intensity;this.__webglResourceRepository.setUniformValue(m,_.a.LightPosition,!1,4,"f",!1,{x:r.x,y:r.y,z:r.z,w:t.type.index},{force:g},e),this.__webglResourceRepository.setUniformValue(m,_.a.LightDirection,!1,4,"f",!1,{x:i.x,y:i.y,z:i.z,w:0},{force:g},e),this.__webglResourceRepository.setUniformValue(m,_.a.LightIntensity,!1,4,"f",!1,{x:a.x,y:a.y,z:a.z,w:0},{force:g},e)}const R=i.getComponent(P.a);if(R){const e=R.jointMatrices;this.__webglResourceRepository.setUniformValue(m,_.a.BoneMatrix,!0,4,"f",!0,{x:e},{force:g})}let x;if(x=this.__webglResourceRepository.setUniformValue(m,_.a.DiffuseEnvTexture,!1,1,"i",!1,{x:6},{force:g}))if(n.activeTexture(n.TEXTURE6),a&&a.isTextureReady){const e=this.__webglResourceRepository.getWebGLResource(a.cubeTextureUid);n.bindTexture(n.TEXTURE_CUBE_MAP,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);n.bindTexture(n.TEXTURE_CUBE_MAP,e)}if(x=this.__webglResourceRepository.setUniformValue(m,_.a.SpecularEnvTexture,!1,1,"i",!1,{x:7},{force:g}))if(n.activeTexture(n.TEXTURE7),s&&s.isTextureReady){const e=this.__webglResourceRepository.getWebGLResource(s.cubeTextureUid);n.bindTexture(n.TEXTURE_CUBE_MAP,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);n.bindTexture(n.TEXTURE_CUBE_MAP,e)}let b=1;if(s&&(b=s.mipmapLevelNumber),this.__webglResourceRepository.setUniformValue(m,_.a.IBLParameter,!1,3,"f",!1,{x:b,y:1,z:1},{force:g}),x=this.__webglResourceRepository.setUniformValue(m,_.a.BrdfLutTexture,!1,1,"i",!1,{x:5},{force:g}))if(n.activeTexture(n.TEXTURE5),null!=this.__pbrCookTorranceBrdfLutDataUrlUid){const e=this.__webglResourceRepository.getWebGLResource(this.__pbrCookTorranceBrdfLutDataUrlUid);n.bindTexture(n.TEXTURE_2D,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);n.bindTexture(n.TEXTURE_2D,e)}l&&l.setUniformValues(m,g),n.drawElements(u.primitiveMode.index,u.indicesAccessor.elementCount,u.indicesAccessor.componentType.index,0),this.dettachVertexData(o)}this.__lastShader=-1}}C.__vertexHandleOfPrimitiveObjectUids=new Map,C.transposedMatrix44=new B.a([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);var D=function(e){return e.index===i.a.UBOWebGL2.index?l.getInstance():e.index===i.a.TransformFeedbackWebGL2.index?w.getInstance():e.index===i.a.UniformWebGL1.index?C.getInstance():v.getInstance()},V=r(48),F=r(56);const E=Object.freeze({getRenderingStrategy:D,GLSLShader:V.a,WebGLContextWrapper:F.a,WebGLResourceRepository:a.a,WebGLStrategyDataTexture:v,WebGLStrategyTransformFeedback:w,WebGLStrategyUBO:l,WebGLStrategyUniform:C});t.default=E}}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.1-276-g1cab-mod branch: feature/improve-skin-animation';
