(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{80:function(e,t,r){"use strict";r.r(t);var a=r(53),i=r(66),n=r(29),o=r(32),s=r(21),c=r(9),l=r(19),u=r(3),m=r(5),d=r(2),_=r(0),h=r(8);class p{constructor(){this.__webglResourceRepository=i.a.getInstance(),this.__uboUid=u.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_UBO="layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(e){if(null==e.mesh)return void l.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.mesh.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==u.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_UBO,m.a.getShaderProperty),this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,[{semantic:m.a.ViewMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0},{semantic:m.a.ProjectionMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0}])}}}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;if(null==e.mesh)return void l.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.mesh.getPrimitiveAt(r),a=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=a,p.__vertexHandleOfPrimitiveObjectUids.set(t.objectUID,a)}}$prerender(e,t,r){if(this.__isVAOSet)return;if(null==e.mesh)return void l.a.alertNoMeshSet(e);const a=e.mesh.getPrimitiveNumber();for(let t=0;t<a;t++){const a=e.mesh.getPrimitiveAt(t);this.__vertexHandles[t]=p.__vertexHandleOfPrimitiveObjectUids.get(a.objectUID),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[t],a,r)}this.__isVAOSet=!0}common_$prerender(){const e=n.a.getInstance().getBuffer(c.a.GPUInstanceData);new Float32Array(e.getArrayBuffer());this.__uboUid===u.a.InvalidCGAPIResourceUid?(this.__uboUid=this.__webglResourceRepository.createUniformBuffer(s.a.getAccessor("worldMatrix",s.a).dataViewOfBufferView),this.__webglResourceRepository.bindUniformBufferBase(0,this.__uboUid)):this.__webglResourceRepository.updateUniformBuffer(this.__uboUid,s.a.getAccessor("worldMatrix",s.a).dataViewOfBufferView)}attachGPUData(e){this.__webglResourceRepository.bindUniformBlock(e.material._shaderProgramUid,"matrix",0)}attatchShaderProgram(e){const t=e._shaderProgramUid,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),a=this.__webglResourceRepository.getWebGLResource(t);r.useProgram(a)}attachVertexData(e,t,r,a){const i=this.__vertexHandles[e],n=this.__webglResourceRepository.getWebGLResource(i.vaoHandle),o=r.getRawContext();if(null!=n)r.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(i,t,a);const e=this.__webglResourceRepository.getWebGLResource(i.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new p),this.__instance}common_$render(e,t,r,a){const i=this.__webglResourceRepository.currentWebGLContextWrapper,n=e.material;this.attatchShaderProgram(n);i.getRawContext();const o=this.__webglResourceRepository.getWebGLResource(n._shaderProgramUid);return this.__webglResourceRepository.setUniformValue(o,m.a.ViewMatrix.str,!0,t),this.__webglResourceRepository.setUniformValue(o,m.a.ProjectionMatrix.str,!0,r),!0}}p.__vertexHandleOfPrimitiveObjectUids=new Map;var g=r(45),x=r(40),f=r(17),b=r(36),R=r(38),y=r(4),v=r(23),w=r(70);class U{constructor(){this.__webglResourceRepository=i.a.getInstance(),this.__instanceDataTextureUid=u.a.InvalidCGAPIResourceUid,this.__vertexDataTextureUid=u.a.InvalidCGAPIResourceUid,this.__primitiveHeaderUboUid=u.a.InvalidCGAPIResourceUid,this.__indexCountToSubtractUboUid=u.a.InvalidCGAPIResourceUid,this.__entitiesUidUboUid=u.a.InvalidCGAPIResourceUid,this.__primitiveUidUboUid=u.a.InvalidCGAPIResourceUid,this.__isVertexReady=!1}get __transformFeedbackShaderText(){w.a.getInstance().glsl_vertex_in,w.a.getInstance().glsl_texture;return`\n    uniform mat4 u_worldMatrix;\n    uniform mat4 u_viewMatrix;\n    uniform mat4 u_projectionMatrix;\n    uniform mat3 u_normalMatrix;\n\n    mat4 getMatrix(float instanceId) {\n      return u_worldMatrix;\n    }\n\n    mat4 getViewMatrix(float instanceId) {\n      return u_viewMatrix;\n    }\n\n    mat4 getProjectionMatrix(float instanceId) {\n      return u_projectionMatrix;\n    }\n\n    mat3 getNormalMatrix(float instanceId) {\n      return u_normalMatrix;\n    }\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    // void main(){\n    //   int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n    //   int entityUidMinusOne = 0;\n    //   int primitiveUid = 0;\n    //   for (int i=0; i<=indexOfVertices; i++) {\n    //     for (int j=0; j<1024; j++) {\n    //       int value = u_indexCountsToSubtract.counts[j/4][j%4];\n    //       int result = int(step(float(value), float(i)));\n    //       if (result > 0) {\n    //         entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n    //         primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n    //       } else {\n    //         break;\n    //       }\n    //     }\n    //   }\n\n    //   ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n    //   int primIndicesByteOffset = indicesMeta.x;\n    //   int primIndicesComponentSizeInByte = indicesMeta.y;\n    //   int primIndicesLength = indicesMeta.z;\n\n    //   int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n    //   // get Indices\n    //   int texelLength = ${n.a.bufferWidthLength};\n    //   vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n    //   int index = int(indexVec4[idx%4]);\n\n    //   // get Positions\n    //   ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n    //   int primPositionsByteOffset = indicesData.x;\n    //   idx = primPositionsByteOffset/4 + index;\n    //   vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n    //   position = posVec4;\n    //}\n`}get __transformFeedbackFragmentShaderText(){return"#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    "}setupShaderProgram(e){if(null==e.mesh)return void l.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.mesh.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==u.a.InvalidCGAPIResourceUid)return;t.createProgram(this.__transformFeedbackShaderText,m.a.getShaderProperty),this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,[{semantic:m.a.ViewMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0},{semantic:m.a.ProjectionMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0}])}}}$load(e){if(this.__isVertexReady)return;this.setupShaderProgram(e);const t=n.a.getInstance().getBuffer(c.a.CPUGeneric),r=t.takeBufferView({byteLengthToNeed:12,byteStride:4,isAoS:!1}).takeAccessor({compositionType:_.a.Scalar,componentType:d.a.UnsingedInt,count:3}),a=t.takeBufferView({byteLengthToNeed:48,byteStride:16,isAoS:!1}).takeAccessor({compositionType:_.a.Vec4,componentType:d.a.Float,count:3}),i=r.getTypedArray();i[0]=0,i[1]=1,i[2]=2;const o=R.a.createPrimitive({indices:i,attributeCompositionTypes:[a.compositionType],attributeSemantics:[y.a.Position],attributes:[a.getTypedArray()],primitiveMode:v.a.Triangles,material:void 0});this.__vertexHandle=this.__webglResourceRepository.createVertexDataResources(o),this.__isVertexReady=!0}$prerender(e,t,r){}__setupUBOPrimitiveHeaderData(){const e=n.a.getInstance().getBuffer(c.a.UBOGeneric),t=new Int32Array(e.getArrayBuffer());this.__primitiveHeaderUboUid===u.a.InvalidCGAPIResourceUid&&(this.__primitiveHeaderUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(3,this.__primitiveHeaderUboUid))}__setupGPUInstanceMetaData(){if(this.__primitiveUidUboUid!==u.a.InvalidCGAPIResourceUid)return;const e=b.a.getInstance()._getEntities(),t=new Int32Array(e.length),r=new Int32Array(e.length),a=new Int32Array(e.length);let i=0;e.forEach((e,n)=>{const o=e.getComponent(l.a);if(o&&o.mesh){r[n]=o.mesh.getPrimitiveAt(0).primitiveUid,t[n]=e.entityUID;const s=o.mesh.getPrimitiveAt(0).indicesAccessor.elementCount;a[n]=i+s,i+=s}}),this.__indexCountToSubtractUboUid=this.__webglResourceRepository.createUniformBuffer(a),this.__webglResourceRepository.bindUniformBufferBase(0,this.__indexCountToSubtractUboUid),this.__entitiesUidUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(1,this.__entitiesUidUboUid),this.__primitiveUidUboUid=this.__webglResourceRepository.createUniformBuffer(r),this.__webglResourceRepository.bindUniformBufferBase(2,this.__primitiveUidUboUid)}__setupGPUInstanceData(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(g.a.TextureHalfFloat))&&(e=!0);const t=n.a.getInstance().getBuffer(c.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let a;if(e){a=new Uint16Array(r.length);let e=t.takenSizeInByte/4;for(let t=0;t<e;t++)a[t]=o.a.toHalfFloat(r[t])}this.__instanceDataTextureUid===u.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:f.a.RGBA16F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(a,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.HalfFloat,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:f.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:d.a.Float}):this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,a,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:d.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:d.a.Float}))}__setupGPUVertexData(){if(this.__vertexDataTextureUid!==u.a.InvalidCGAPIResourceUid)return;const e=n.a.getInstance().getBuffer(c.a.GPUVertexData),t=new Float32Array(e.getArrayBuffer());this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:f.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1})}common_$prerender(){this.__setupUBOPrimitiveHeaderData(),this.__setupGPUInstanceMetaData(),this.__setupGPUInstanceData(),this.__setupGPUVertexData()}attachGPUData(e){const t=e.material;{const e=this.__webglResourceRepository.currentWebGLContextWrapper,a=e.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);e.bindTexture2D(0,i);const n=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var r=a.getUniformLocation(n,"u_instanceDataTexture");a.uniform1i(r,0)}{const e=this.__webglResourceRepository.currentWebGLContextWrapper,r=e.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);e.bindTexture2D(1,i);const n=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var a=r.getUniformLocation(n,"u_vertexDataTexture");r.uniform1i(a,1)}this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"indexCountsToSubtract",0),this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"entityUids",1),this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"primitiveUids",2),this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"primitiveHeader",3)}attatchShaderProgram(e){const t=e._shaderProgramUid,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),a=this.__webglResourceRepository.getWebGLResource(t);r.useProgram(a)}attachVertexData(e,t,r,a){}static getInstance(){return this.__instance||(this.__instance=new U),this.__instance}common_$render(e,t,r,a){const i=e.material,n=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram(e.material);n.getRawContext();const o=this.__webglResourceRepository.getWebGLResource(i._shaderProgramUid);return this.__webglResourceRepository.setUniformValue(o,m.a.ViewMatrix.str,!0,t),this.__webglResourceRepository.setUniformValue(o,m.a.ProjectionMatrix.str,!0,r),!0}}var T=r(28);class P{constructor(){this.__webglResourceRepository=i.a.getInstance(),this.__dataTextureUid=u.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1}get vertexShaderMethodDefinitions_dataTexture(){const e=w.a.getInstance().glsl_texture;return`\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${e}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${e}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = ${T.a.getLocationOffsetOfMemberOfComponent(s.a,"worldMatrix")}.0 + 4.0 * instanceId;\n    float powWidthVal = ${n.a.bufferWidthLength}.0;\n    float powHeightVal = ${n.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `}setupShaderProgram(e){if(null==e.mesh)return void l.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.mesh.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==u.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_dataTexture,m.a.getShaderProperty),this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,[{semantic:m.a.ViewMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0},{semantic:m.a.ProjectionMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0}])}}}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;if(this.__meshComponent=e,null==e.mesh)return void l.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.mesh.getPrimitiveAt(r),a=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=a,P.__vertexHandleOfPrimitiveObjectUids.set(t.objectUID,a)}}$prerender(e,t,r){if(this.__isVAOSet)return;if(null==e.mesh)return void l.a.alertNoMeshSet(e);const a=e.mesh.getPrimitiveNumber();for(let t=0;t<a;t++){const a=e.mesh.getPrimitiveAt(t);this.__vertexHandles[t]=P.__vertexHandleOfPrimitiveObjectUids.get(a.objectUID),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[t],a,r)}this.__isVAOSet=!0}common_$prerender(){const e=n.a.getInstance().getBuffer(c.a.GPUInstanceData),t=new Float32Array(e.getArrayBuffer());if(this.__dataTextureUid!==u.a.InvalidCGAPIResourceUid)return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,void this.__webglResourceRepository.updateTexture(this.__dataTextureUid,t,{level:0,width:n.a.bufferWidthLength,height:e.takenSizeInByte/n.a.bufferWidthLength/4,format:x.a.RGBA,type:d.a.Float});this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:f.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1})}attachGPUData(e){const t=e.material,r=this.__webglResourceRepository.currentWebGLContextWrapper,a=r.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);r.bindTexture2D(0,i);const n=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var o=a.getUniformLocation(n,"u_dataTexture");a.uniform1i(o,0)}attatchShaderProgram(e){const t=e._shaderProgramUid,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),a=this.__webglResourceRepository.getWebGLResource(t);r.useProgram(a)}attachVertexData(e,t,r,a){const i=this.__vertexHandles[e],n=this.__webglResourceRepository.getWebGLResource(i.vaoHandle),o=r.getRawContext();if(null!=n)r.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(i,t,a);const e=this.__webglResourceRepository.getWebGLResource(i.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new P),this.__instance}common_$render(e,t,r,a){const i=e.material,n=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram(i);n.getRawContext();const o=this.__webglResourceRepository.getWebGLResource(i._shaderProgramUid);return this.__webglResourceRepository.setUniformValue(o,m.a.ViewMatrix.str,!0,t),this.__webglResourceRepository.setUniformValue(o,m.a.ProjectionMatrix.str,!0,r),!0}}P.__vertexHandleOfPrimitiveObjectUids=new Map;var M=r(41),L=r(69),A=r(24),V=r(12),I=r(65),S=r(22),C=r(49),G=r(50),W=r(46),D=r(1),F=r(48),E=r(54),B=function(e,t,r,a){return new(r||(r=Promise))(function(i,n){function o(e){try{c(a.next(e))}catch(e){n(e)}}function s(e){try{c(a.throw(e))}catch(e){n(e)}}function c(e){e.done?i(e.value):new r(function(t){t(e.value)}).then(o,s)}c((a=a.apply(e,t||[])).next())})};class N{constructor(){this.__webglResourceRepository=i.a.getInstance(),this.__lastRenderPassCullFace=!1,this.__pointDistanceAttenuation=new D.b(0,.1,.01),this.__lastRenderPassTickCount=-1,this.vertexShaderMethodDefinitions_uniform="\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n  ",this.__lastShader=-1}setupShaderProgram(e){if(null==e.mesh)return void l.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.mesh.getPrimitiveAt(r),a=t.material;if(a){if(a._shaderProgramUid!==u.a.InvalidCGAPIResourceUid)return;const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();a.createProgram(this.vertexShaderMethodDefinitions_uniform,m.a.getShaderProperty);let r=[{semantic:m.a.VertexAttributesExistenceArray,compositionType:_.a.ScalarArray,componentType:d.a.Int,stage:h.a.VertexShader,min:0,max:1,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.WorldMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.NormalMatrix,compositionType:_.a.Mat3,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.ViewMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.FirstTimeOnly},{semantic:m.a.ProjectionMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.FirstTimeOnly},{semantic:m.a.ViewPosition,compositionType:_.a.Vec3,componentType:d.a.Float,stage:h.a.PixelShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.FirstTimeOnly},{semantic:m.a.BoneMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!0,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.BoneCompressedChank,compositionType:_.a.Vec4Array,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!0,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.BoneCompressedInfo,compositionType:_.a.Vec4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.SkinningMode,compositionType:_.a.Scalar,componentType:d.a.Int,stage:h.a.VertexShader,min:0,max:1,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.DiffuseEnvTexture,compositionType:_.a.TextureCube,componentType:d.a.Int,stage:h.a.PixelShader,min:0,max:Number.MAX_SAFE_INTEGER,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.SpecularEnvTexture,compositionType:_.a.TextureCube,componentType:d.a.Int,stage:h.a.PixelShader,min:0,max:Number.MAX_SAFE_INTEGER,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.IBLParameter,compositionType:_.a.Vec4,componentType:d.a.Float,stage:h.a.PixelShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.HDRIFormat,compositionType:_.a.Vec2,componentType:d.a.Int,stage:h.a.PixelShader,min:0,max:5,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.BrdfLutTexture,compositionType:_.a.Texture2D,componentType:d.a.Int,stage:h.a.PixelShader,min:0,max:Number.MAX_SAFE_INTEGER,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.LightNumber,compositionType:_.a.Scalar,componentType:d.a.Int,stage:h.a.PixelShader,min:0,max:Number.MAX_SAFE_INTEGER,isPlural:!1,isSystem:!0,updateInteval:E.a.FirstTimeOnly}];t.primitiveMode.index===e.POINTS&&r.push({semantic:m.a.PointSize,compositionType:_.a.Scalar,componentType:d.a.Float,stage:h.a.PixelShader,min:0,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime},{semantic:m.a.PointDistanceAttenuation,compositionType:_.a.Vec3,componentType:d.a.Float,stage:h.a.PixelShader,min:0,max:1,isPlural:!1,isSystem:!0,updateInteval:E.a.EveryTime});const i=[];for(let e=0;e<S.a.maxLightNumberInShader;e++)i.push({semantic:m.a.LightPosition,compositionType:_.a.Vec4,componentType:d.a.Float,stage:h.a.PixelShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0,updateInteval:E.a.EveryTime}),i.push({semantic:m.a.LightDirection,compositionType:_.a.Vec4,componentType:d.a.Float,stage:h.a.PixelShader,min:-1,max:1,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0,updateInteval:E.a.EveryTime}),i.push({semantic:m.a.LightIntensity,compositionType:_.a.Vec4,componentType:d.a.Float,stage:h.a.PixelShader,min:0,max:10,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0});r=r.concat(i),this.__webglShaderProgram=this.__webglResourceRepository.setupUniformLocations(a._shaderProgramUid,r),a.setUniformLocations(a._shaderProgramUid)}}}$load(e){return B(this,void 0,void 0,function*(){if(null==e.mesh)return void l.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){e.mesh.getPrimitiveAt(r).create3DAPIVertexData()}e.mesh.updateVariationVBO(),this.__dummyWhiteTextureUid=this.__webglResourceRepository.createDummyTexture(),this.__dummyBlackTextureUid=this.__webglResourceRepository.createDummyTexture("rgba(0, 0, 0, 1)"),this.__dummyBlackCubeTextureUid=this.__webglResourceRepository.createDummyCubeTexture();const r=C.a.getInstance().getModule("pbr").pbrCookTorranceBrdfLutDataUrl;this.__pbrCookTorranceBrdfLutDataUrlUid=yield this.__webglResourceRepository.createTextureFromDataUri(r,{level:0,internalFormat:x.a.RGBA,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Linear,minFilter:f.a.Linear,wrapS:f.a.ClampToEdge,wrapT:f.a.ClampToEdge,generateMipmap:!1,anisotropy:!1})})}$prerender(e,t,r){if(null==e.mesh)return void l.a.alertNoMeshSet(e);const a=e.mesh.getPrimitiveNumber();if(e.mesh.weights.length>0)for(let t=0;t<a;t++){const r=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.resendVertexBuffer(r,r.vertexHandles.vboHandles)}for(let t=0;t<a;t++){const a=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.setVertexDataToPipeline({vaoHandle:e.mesh.getVaoUids(t),iboHandle:a.vertexHandles.iboHandle,vboHandles:a.vertexHandles.vboHandles},a,r)}}common_$prerender(){const e=V.a.getInstance();this.__lightComponents=e.getComponentsWithType(I.a)}attachGPUData(e){}attatchShaderProgram(e){}attachVertexData(e,t,r,a){}attachVertexDataInner(e,t,r,a,i){const n=t.vertexHandles,o=this.__webglResourceRepository.getWebGLResource(e.getVaoUids(r)),s=a.getRawContext();if(null!=o)a.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(n,t,i);const e=this.__webglResourceRepository.getWebGLResource(n.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new N),this.__instance}common_$render(e,t,r,a){return!1}static isOpaqueMode(){return N.__isOpaqueMode}static isTransparentMode(){return!N.__isOpaqueMode}__setUniformBySystem({glw:e,shaderProgram:t,primitive:r,shaderProgramUid:a,entity:i,worldMatrix:n,normalMatrix:o,renderPass:s,diffuseCube:c,specularCube:l,firstTime:u}){this.__webglResourceRepository.setUniformValue(t,m.a.VertexAttributesExistenceArray.str,u,r.vertexHandles.attributesFlags),M.a.transposeTo(n,N.transposedMatrix44),this.__webglResourceRepository.setUniformValue(t,m.a.WorldMatrix.str,u,N.transposedMatrix44),this.__webglResourceRepository.setUniformValue(t,m.a.NormalMatrix.str,u,o);let d=s.cameraComponent;if(null==d&&(d=V.a.getInstance().getComponent(A.a,A.a.main)),d){this.__webglResourceRepository.setUniformValue(t,m.a.ViewMatrix.str,u,d.viewMatrix),this.__webglResourceRepository.setUniformValue(t,m.a.ProjectionMatrix.str,u,d.projectionMatrix);const e=d.worldPosition;this.__webglResourceRepository.setUniformValue(t,m.a.ViewPosition.str,u,e)}const _=i.getComponent(L.a);if(_){const e=_.jointMatrices,r=_.jointCompressedChanks;null!=e&&this.__webglResourceRepository.setUniformValue(t,m.a.BoneMatrix.str,u,e),null!=r&&(this.__webglResourceRepository.setUniformValue(t,m.a.BoneCompressedChank.str,u,r),this.__webglResourceRepository.setUniformValue(t,m.a.BoneCompressedInfo.str,u,_.jointCompressedInfo)),this.__webglResourceRepository.setUniformValue(t,m.a.SkinningMode.str,u,!0)}else this.__webglResourceRepository.setUniformValue(t,m.a.SkinningMode.str,u,!1);let h;if(h=this.__webglResourceRepository.setUniformValue(t,m.a.DiffuseEnvTexture.str,u,[6,-1]))if(c&&c.isTextureReady){const t=this.__webglResourceRepository.getWebGLResource(c.cgApiResourceUid);e.bindTextureCube(6,t)}else{const t=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);e.bindTextureCube(6,t)}if(h=this.__webglResourceRepository.setUniformValue(t,m.a.SpecularEnvTexture.str,u,[7,-1]))if(l&&l.isTextureReady){const t=this.__webglResourceRepository.getWebGLResource(l.cgApiResourceUid);e.bindTextureCube(7,t)}else{const t=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);e.bindTextureCube(7,t)}let p=1;l&&(p=l.mipmapLevelNumber);const g=i.getComponent(G.a);this.__webglResourceRepository.setUniformValue(t,m.a.IBLParameter.str,u,{x:p,y:g.diffuseCubeMapContribution,z:g.specularCubeMapContribution,w:g.rotationOfCubeMap});let x=F.a.LDR_SRGB.index,f=F.a.LDR_SRGB.index;if(g.diffuseCubeMap&&(x=g.diffuseCubeMap.hdriFormat.index),g.specularCubeMap&&(f=g.specularCubeMap.hdriFormat.index),this.__webglResourceRepository.setUniformValue(t,m.a.HDRIFormat.str,u,{x:x,y:f}),h=this.__webglResourceRepository.setUniformValue(t,m.a.BrdfLutTexture.str,u,[5,-1]))if(null!=this.__pbrCookTorranceBrdfLutDataUrlUid){const t=this.__webglResourceRepository.getWebGLResource(this.__pbrCookTorranceBrdfLutDataUrlUid);e.bindTexture2D(5,t)}else{const t=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);e.bindTexture2D(5,t)}this.__webglResourceRepository.setUniformValue(t,m.a.PointSize.str,u,{x:30}),this.__webglResourceRepository.setUniformValue(t,m.a.PointDistanceAttenuation.str,u,{x:this.__pointDistanceAttenuation.v}),this.__webglResourceRepository.setUniformValue(t,m.a.LightNumber.str,u,this.__lightComponents.length);for(let e=0;e<this.__lightComponents.length&&!(e>=S.a.maxLightNumberInShader);e++){const r=this.__lightComponents[e],a=r.entity.getSceneGraph().worldPosition,i=r.direction,n=r.intensity;this.__webglResourceRepository.setUniformValue(t,m.a.LightPosition.str,u,{x:a.x,y:a.y,z:a.z,w:r.type.index},e),this.__webglResourceRepository.setUniformValue(t,m.a.LightDirection.str,u,{x:i.x,y:i.y,z:i.z,w:0},e),this.__webglResourceRepository.setUniformValue(t,m.a.LightIntensity.str,u,{x:n.x,y:n.y,z:n.z,w:0},e)}}$render(e,t,r,a,i,n,o,s,c){const m=this.__webglResourceRepository.currentWebGLContextWrapper,d=m.getRawContext();if(this.setWebGLStates(e,d,n),null==t.mesh)return void l.a.alertNoMeshSet(t);const _=t.mesh.getPrimitiveNumber();for(let e=0;e<_;e++){const l=t.mesh.getPrimitiveAt(e);if(N.isOpaqueMode()&&l.isBlend())continue;if(N.isTransparentMode()&&l.isOpaque())continue;this.attachVertexDataInner(t.mesh,l,e,m,u.a.InvalidCGAPIResourceUid);const _=l.material,h=this.__webglResourceRepository.getWebGLResource(_._shaderProgramUid),p=_._shaderProgramUid;let g=!1;o!==this.__lastRenderPassTickCount&&(g=!0),p!==this.__lastShader&&(d.useProgram(h),this.__lastShader=p,g=!0),this.__setUniformBySystem({glw:m,shaderProgram:h,primitive:l,shaderProgramUid:p,entity:i,worldMatrix:r,normalMatrix:a,renderPass:n,diffuseCube:s,specularCube:c,firstTime:g}),_&&_.setUniformValues(g,{entity:i,lightComponents:this.__lightComponents,renderPass:n}),l.indicesAccessor?d.drawElements(l.primitiveMode.index,l.indicesAccessor.elementCount,l.indicesAccessor.componentType.index,0):d.drawArrays(l.primitiveMode.index,0,l.getVertexCountAsVerticesBased()),this.dettachVertexData(m)}this.__lastRenderPassTickCount=o}setWebGLStates(e,t,r){0===e&&(t.disable(t.BLEND),t.enable(t.DEPTH_TEST),t.depthMask(!0),N.__isOpaqueMode=!0),e===G.a.firstTranparentIndex&&(t.enable(t.BLEND),t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE),t.depthMask(!1),N.__isOpaqueMode=!1),r.cullface!==this.__lastRenderPassCullFace&&(r.cullface?t.enable(t.CULL_FACE):t.disable(t.CULL_FACE),this.__lastRenderPassCullFace=r.cullface)}}N.__isOpaqueMode=!0,N.transposedMatrix44=new W.a([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);var H=r(63),O=r(7);class ${constructor(){this.__webglResourceRepository=i.a.getInstance(),this.__dataTextureUid=u.a.InvalidCGAPIResourceUid,this.__lastShader=u.a.InvalidCGAPIResourceUid}get vertexShaderMethodDefinitions_dataTexture(){const e=w.a.getInstance().glsl_texture;return`\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${e}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${e}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = ${T.a.getLocationOffsetOfMemberOfComponent(s.a,"worldMatrix")}.0 + 4.0 * instanceId;\n    float powWidthVal = ${n.a.bufferWidthLength}.0;\n    float powHeightVal = ${n.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    float index = ${T.a.getLocationOffsetOfMemberOfComponent(s.a,"normalMatrix")}.0 + 3.0 * instanceId;\n    float powWidthVal = ${n.a.bufferWidthLength}.0;\n    float powHeightVal = ${n.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n\n    mat3 matrix = mat3(\n      col0.x, col0.y, col0.z,\n      col0.w, col1.x, col1.y,\n      col1.z, col1.w, col2.x\n      );\n    // mat3 matrix = mat3(\n    //   col0.x, col0.w, col1.z,\n    //   col0.y, col1.x, col1.w,\n    //   col0.z, col1.y, col2.x\n    //   );\n\n\n    return matrix;\n  }\n\n  `}setupShaderProgram(e){if(null==e.mesh)return void l.a.alertNoMeshSet(e);const t=e=>{let t=1;switch(e.compositionType){case _.a.Mat4:t=4;break;case _.a.Mat3:t=3}return t},r=(e,r,a)=>{const i=r.compositionType.getGlslStr(r.componentType),o=[];let s,c=1,l=a,u=-1;if(-1!==a.indexOf("___")){if(-1===a.indexOf("___0"))return"";const i=t(r);for(let t=0;t<r.maxIndex;t++){const r=a.replace("___0",`___${t}`),i=H.a.getLocationOffsetOfMemberOfMaterial(e,r);o.push(i)}c=r.maxIndex,l=a.split("___")[0];let n=`float indices[${c}];`;o.forEach((e,t)=>{n+=`\nindices[${t}] = ${e}.0;`}),s=`\n          ${n}\n          float idx = 0.0;\n          for (int i=0; i<${c}; i++) {\n            idx = indices[i] + ${i}.0 * instanceId;\n            if (i == index) {\n              break;\n            }\n          }`}else{const i=t(r);s=`float idx = ${u=H.a.getLocationOffsetOfMemberOfMaterial(e,a)}.0 + ${i}.0 * instanceId;`}let m=`\n      ${i} get_${l=l.replace(".","_")}(float instanceId, const int index) {\n        ${s}\n        float powWidthVal = ${n.a.bufferWidthLength}.0;\n        float powHeightVal = ${n.a.bufferHeightLength}.0;\n        vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n        vec4 col0 = fetchElement(u_dataTexture, idx + 0.0, arg);\n`;switch(r.compositionType){case _.a.Vec4:m+="        vec4 val = col0;";break;case _.a.Vec3:m+="        vec3 val = col0.xyz;";break;case _.a.Vec2:m+="        vec2 val = col0.xy;";break;case _.a.Scalar:if(r.componentType===d.a.Int){m+="        int val = int(col0.x);";break}m+="        float val = col0.x;";break;case _.a.Mat4:m+="\n          vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n          vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n          mat4 val = mat4(\n            col0.x, col1.x, col2.x, 0.0,\n            col0.y, col1.y, col2.y, 0.0,\n            col0.z, col1.z, col2.z, 0.0,\n            col0.w, col1.w, col2.w, 1.0\n            );\n          ";break;case _.a.Mat3:m+="\n          vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n          vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n          mat3 val = mat3(\n            col0.x, col0.w, col1.z,\n            col0.y, col1.x, col1.w,\n            col0.z, col1.y, col2.x,\n            );\n          ";break;default:return console.error("unknown composition type",r.compositionType.str,a),""}return m+="\n          return val;\n        }\n      "},a=e.mesh.getPrimitiveNumber();for(let t=0;t<a;t++){const a=e.mesh.getPrimitiveAt(t).material;if(a){if(a._shaderProgramUid!==u.a.InvalidCGAPIResourceUid)return;a.createProgram(this.vertexShaderMethodDefinitions_dataTexture,r),this.__webglResourceRepository.setupUniformLocations(a._shaderProgramUid,[{semantic:m.a.ViewMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0},{semantic:m.a.ProjectionMatrix,compositionType:_.a.Mat4,componentType:d.a.Float,stage:h.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isPlural:!1,isSystem:!0}]),a.setUniformLocations(a._shaderProgramUid)}}}__isLoaded(e){if(null==e.mesh)return!1;if(e.mesh.variationVBOUid!==u.a.InvalidCGAPIResourceUid){const t=e.mesh.getPrimitiveNumber();let r=0;for(let a=0;a<t;a++){null!=e.mesh.getPrimitiveAt(a).vertexHandles&&r++}return t===r}return!1}$load(e){if(this.__isLoaded(e))return;if(null==e.mesh)return void l.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let r=0;r<t;r++){e.mesh.getPrimitiveAt(r).create3DAPIVertexData()}e.mesh.updateVariationVBO()}$prerender(e,t,r){if(t._readyForRendering)return;if(null==e.mesh)return void l.a.alertNoMeshSet(e);if(e.mesh.isInstanceMesh())return void(t._readyForRendering=!0);const a=e.mesh.getPrimitiveNumber();for(let t=0;t<a;t++){const r=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.setVertexDataToPipeline({vaoHandle:e.mesh.getVaoUids(t),iboHandle:r.vertexHandles.iboHandle,vboHandles:r.vertexHandles.vboHandles},r,e.mesh.variationVBOUid)}t._readyForRendering=!0}common_$prerender(){const e=n.a.getInstance().getBuffer(c.a.GPUInstanceData),t=new Float32Array(e.getArrayBuffer());if(this.__dataTextureUid!==u.a.InvalidCGAPIResourceUid)return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,void this.__webglResourceRepository.updateTexture(this.__dataTextureUid,t,{level:0,width:n.a.bufferWidthLength,height:e.takenSizeInByte/n.a.bufferWidthLength/4,format:x.a.RGBA,type:d.a.Float});this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:f.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:d.a.Float,magFilter:f.a.Nearest,minFilter:f.a.Nearest,wrapS:f.a.Repeat,wrapT:f.a.Repeat,generateMipmap:!1,anisotropy:!1});const r=V.a.getInstance();this.__lightComponents=r.getComponentsWithType(I.a)}attachGPUData(e){const t=e.material,r=this.__webglResourceRepository.currentWebGLContextWrapper,a=r.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);r.bindTexture2D(0,i);const n=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var o=a.getUniformLocation(n,"u_dataTexture");a.uniform1i(o,0)}attachGPUDataInner(e,t){this.__webglResourceRepository.bindTexture2D(0,this.__dataTextureUid);var r=e.getUniformLocation(t,"u_dataTexture");e.uniform1i(r,0)}attatchShaderProgram(e){const t=e._shaderProgramUid;if(t!==this.__lastShader){const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(t);e.useProgram(r),this.__lastShader=t}}attachVertexData(e,t,r,a){}attachVertexDataInner(e,t,r,a,i){const n=t.vertexHandles,o=this.__webglResourceRepository.getWebGLResource(e.getVaoUids(r)),s=a.getRawContext();if(null!=o)a.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(n,t,e.variationVBOUid);const r=this.__webglResourceRepository.getWebGLResource(n.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,r)}}static getInstance(){return this.__instance||(this.__instance=new $),this.__instance}__setupMaterial(e,t){e.setParameter(m.a.LightNumber,this.__lightComponents.length);for(let t=0;t<this.__lightComponents.length&&!(t>=S.a.maxLightNumberInShader);t++){const r=this.__lightComponents[t],a=r.entity.getSceneGraph().worldPosition,i=r.direction,n=r.intensity;e.setParameter(m.a.LightPosition,new O.b(a.x,a.y,a.z,r.type.index),t),e.setParameter(m.a.LightDirection,i,t),e.setParameter(m.a.LightIntensity,n,t)}}__setupMaterialEveryFrame(e,t){let r=t.cameraComponent;if(null==r&&(r=V.a.getInstance().getComponent(A.a,A.a.main)),r){const t=r.worldPosition;e.setParameter(m.a.ViewPosition,t)}}common_$render(e,t,r,a){const i=this.__webglResourceRepository.currentWebGLContextWrapper,n=i.getRawContext();for(let e of a.meshComponents){const t=e.mesh;if(!t||!t.isOriginalMesh())continue;const r=t.getPrimitiveNumber();for(let e=0;e<r;e++){const r=t.getPrimitiveAt(e),s=r.material._shaderProgramUid;if(-1!==s){if(this.attachVertexDataInner(t,r,e,i,t.variationVBOUid),s!==this.__lastShader){const e=this.__webglResourceRepository.getWebGLResource(s);n.useProgram(e);var o=n.getUniformLocation(e,"u_dataTexture");n.uniform1i(o,7),this.__materialSIDLocation=n.getUniformLocation(e,"u_materialSID"),this.__setupMaterial(r.material,a),$.__shaderProgram=e}n.uniform1f(this.__materialSIDLocation,r.material.materialSID),this.__webglResourceRepository.bindTexture2D(7,this.__dataTextureUid),this.__setupMaterialEveryFrame(r.material,a),r.material.setUniformValuesForOnlyTextures(!0),r.indicesAccessor?i.drawElementsInstanced(r.primitiveMode.index,r.indicesAccessor.elementCount,r.indicesAccessor.componentType.index,0,t.instanceCountIncludeOriginal):i.drawArraysInstanced(r.primitiveMode.index,0,r.getVertexCountAsVerticesBased(),t.instanceCountIncludeOriginal),this.__lastShader=s}}}const s=$.__shaderProgram;return this.__webglResourceRepository.setUniformValue(s,m.a.ViewMatrix.str,!0,t),this.__webglResourceRepository.setUniformValue(s,m.a.ProjectionMatrix.str,!0,r),!1}}var j=function(e){return e.index===a.a.FastestWebGL1.index?$.getInstance():e.index===a.a.UBOWebGL2.index?p.getInstance():e.index===a.a.TransformFeedbackWebGL2.index?U.getInstance():e.index===a.a.UniformWebGL1.index||e.index===a.a.UniformWebGL2.index?N.getInstance():P.getInstance()},k=r(39),z=r(71);const X=Object.freeze({getRenderingStrategy:j,GLSLShader:k.a,WebGLContextWrapper:z.a,WebGLResourceRepository:i.a,WebGLStrategyDataTexture:P,WebGLStrategyTransformFeedback:U,WebGLStrategyUBO:p,WebGLStrategyUniform:N});t.default=X}}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.1-834-g1410-mod branch: feature/picking';
