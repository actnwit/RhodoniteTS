(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{66:function(e,t,r){"use strict";r.r(t);var i=r(43),a=r(24),o=r(25),n=r(27),s=r(18),u=r(9),c=r(16),_=r(6);class l{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__uboUid=c.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_UBO="layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(e){const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_UBO),this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,[{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}}}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=i,l.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,i)}}$prerender(e,t){if(this.__isVAOSet)return;const r=e.getPrimitiveNumber();for(let i=0;i<r;i++){const r=e.getPrimitiveAt(i);this.__vertexHandles[i]=l.__vertexHandleOfPrimitiveObjectUids.get(r.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i],r,t)}this.__isVAOSet=!0}common_$prerender(){const e=o.a.getInstance().getBuffer(u.a.GPUInstanceData);new Float32Array(e.getArrayBuffer());this.__uboUid===c.a.InvalidCGAPIResourceUid?(this.__uboUid=this.__webglResourceRepository.createUniformBuffer(s.a.getAccessor("worldMatrix",s.a).dataViewOfBufferView),this.__webglResourceRepository.bindUniformBufferBase(0,this.__uboUid)):this.__webglResourceRepository.updateUniformBuffer(this.__uboUid,s.a.getAccessor("worldMatrix",s.a).dataViewOfBufferView)}attachGPUData(e){this.__webglResourceRepository.bindUniformBlock(e.material._shaderProgramUid,"matrix",0)}attatchShaderProgram(e){const t=e._shaderProgramUid,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(t);r.useProgram(i)}attachVertexData(e,t,r,i){const a=this.__vertexHandles[e],o=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),n=r.getRawContext();if(null!=o)r.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new l),this.__instance}common_$render(e,t,r){const i=this.__webglResourceRepository.currentWebGLContextWrapper,a=e.material;this.attatchShaderProgram(a);i.getRawContext();return this.__webglResourceRepository.setUniformValue(a._shaderProgramUid,_.a.ViewMatrix,!0,4,"f",!0,{x:t.v},{}),this.__webglResourceRepository.setUniformValue(a._shaderProgramUid,_.a.ProjectionMatrix,!0,4,"f",!0,{x:r.v},{}),!0}}l.__vertexHandleOfPrimitiveObjectUids=new Map;var d=r(33),h=r(41),m=r(1),g=r(29),p=r(40),f=r(17),R=r(46),x=r(2),b=r(7),y=r(19),U=r(55);class w{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__instanceDataTextureUid=c.a.InvalidCGAPIResourceUid,this.__vertexDataTextureUid=c.a.InvalidCGAPIResourceUid,this.__primitiveHeaderUboUid=c.a.InvalidCGAPIResourceUid,this.__indexCountToSubtractUboUid=c.a.InvalidCGAPIResourceUid,this.__entitiesUidUboUid=c.a.InvalidCGAPIResourceUid,this.__primitiveUidUboUid=c.a.InvalidCGAPIResourceUid,this.__isVertexReady=!1}get __transformFeedbackShaderText(){U.a.getInstance().glsl_vertex_in,U.a.getInstance().glsl_texture;return`\n    uniform mat4 u_worldMatrix;\n    uniform mat4 u_viewMatrix;\n    uniform mat4 u_projectionMatrix;\n    uniform mat3 u_normalMatrix;\n\n    mat4 getMatrix(float instanceId) {\n      return u_worldMatrix;\n    }\n\n    mat4 getViewMatrix(float instanceId) {\n      return u_viewMatrix;\n    }\n\n    mat4 getProjectionMatrix(float instanceId) {\n      return u_projectionMatrix;\n    }\n\n    mat3 getNormalMatrix(float instanceId) {\n      return u_normalMatrix;\n    }\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    // void main(){\n    //   int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n    //   int entityUidMinusOne = 0;\n    //   int primitiveUid = 0;\n    //   for (int i=0; i<=indexOfVertices; i++) {\n    //     for (int j=0; j<1024; j++) {\n    //       int value = u_indexCountsToSubtract.counts[j/4][j%4];\n    //       int result = int(step(float(value), float(i)));\n    //       if (result > 0) {\n    //         entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n    //         primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n    //       } else {\n    //         break;\n    //       }\n    //     }\n    //   }\n\n    //   ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n    //   int primIndicesByteOffset = indicesMeta.x;\n    //   int primIndicesComponentSizeInByte = indicesMeta.y;\n    //   int primIndicesLength = indicesMeta.z;\n\n    //   int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n    //   // get Indices\n    //   int texelLength = ${o.a.bufferWidthLength};\n    //   vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n    //   int index = int(indexVec4[idx%4]);\n\n    //   // get Positions\n    //   ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n    //   int primPositionsByteOffset = indicesData.x;\n    //   idx = primPositionsByteOffset/4 + index;\n    //   vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n    //   position = posVec4;\n    //}\n`}get __transformFeedbackFragmentShaderText(){return"#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    "}setupShaderProgram(e){const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;t.createProgram(this.__transformFeedbackShaderText),this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,[{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}}}$load(e){if(this.__isVertexReady)return;this.setupShaderProgram(e);const t=o.a.getInstance().getBuffer(u.a.CPUGeneric),r=t.takeBufferView({byteLengthToNeed:12,byteStride:4,isAoS:!1}).takeAccessor({compositionType:x.a.Scalar,componentType:m.a.UnsingedInt,count:3}),i=t.takeBufferView({byteLengthToNeed:48,byteStride:16,isAoS:!1}).takeAccessor({compositionType:x.a.Vec4,componentType:m.a.Float,count:3}),a=r.getTypedArray();a[0]=0,a[1]=1,a[2]=2;const n=R.a.createPrimitive({indices:a,attributeCompositionTypes:[i.compositionType],attributeSemantics:[b.a.Position],attributes:[i.getTypedArray()],primitiveMode:y.a.Triangles,material:void 0});this.__vertexHandle=this.__webglResourceRepository.createVertexDataResources(n),this.__isVertexReady=!0}$prerender(e,t){}__setupUBOPrimitiveHeaderData(){const e=o.a.getInstance().getBuffer(u.a.UBOGeneric),t=new Int32Array(e.getArrayBuffer());this.__primitiveHeaderUboUid===c.a.InvalidCGAPIResourceUid&&(this.__primitiveHeaderUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(3,this.__primitiveHeaderUboUid))}__setupGPUInstanceMetaData(){if(this.__primitiveUidUboUid!==c.a.InvalidCGAPIResourceUid)return;const e=p.a.getInstance()._getEntities(),t=new Int32Array(e.length),r=new Int32Array(e.length),i=new Int32Array(e.length);let a=0;e.forEach((e,o)=>{const n=e.getComponent(f.a);if(n){r[o]=n.getPrimitiveAt(0).primitiveUid,t[o]=e.entityUID;const s=n.getPrimitiveAt(0).indicesAccessor.elementCount;i[o]=a+s,a+=s}}),this.__indexCountToSubtractUboUid=this.__webglResourceRepository.createUniformBuffer(i),this.__webglResourceRepository.bindUniformBufferBase(0,this.__indexCountToSubtractUboUid),this.__entitiesUidUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(1,this.__entitiesUidUboUid),this.__primitiveUidUboUid=this.__webglResourceRepository.createUniformBuffer(r),this.__webglResourceRepository.bindUniformBufferBase(2,this.__primitiveUidUboUid)}__setupGPUInstanceData(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(d.a.TextureHalfFloat))&&(e=!0);const t=o.a.getInstance().getBuffer(u.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let i;if(e){i=new Uint16Array(r.length);let e=t.takenSizeInByte/4;e/=2;for(let t=0;t<e;t++)i[t]=n.a.toHalfFloat(r[t])}this.__instanceDataTextureUid===c.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:g.a.RGBA16F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:h.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.HalfFloat,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:g.a.RGBA32F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:h.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:h.a.RGBA,type:m.a.Float}):this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:h.a.RGBA,type:m.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:h.a.RGBA,type:m.a.Float}))}__setupGPUVertexData(){if(this.__vertexDataTextureUid!==c.a.InvalidCGAPIResourceUid)return;const e=o.a.getInstance().getBuffer(u.a.GPUVertexData),t=new Float32Array(e.getArrayBuffer());this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:g.a.RGBA32F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:h.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1})}common_$prerender(){this.__setupUBOPrimitiveHeaderData(),this.__setupGPUInstanceMetaData(),this.__setupGPUInstanceData(),this.__setupGPUVertexData()}attachGPUData(e){const t=e.material;{const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,i);const a=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var r=e.getUniformLocation(a,"u_instanceDataTexture");e.uniform1i(r,0)}{const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,r);const a=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var i=e.getUniformLocation(a,"u_vertexDataTexture");e.uniform1i(i,1)}this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"indexCountsToSubtract",0),this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"entityUids",1),this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"primitiveUids",2),this.__webglResourceRepository.bindUniformBlock(t._shaderProgramUid,"primitiveHeader",3)}attatchShaderProgram(e){const t=e._shaderProgramUid,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(t);r.useProgram(i)}attachVertexData(e,t,r,i){}static getInstance(){return this.__instance||(this.__instance=new w),this.__instance}common_$render(e,t,r){const i=e.material,a=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram(e.material);a.getRawContext();return this.__webglResourceRepository.setUniformValue(i._shaderProgramUid,_.a.ViewMatrix,!0,4,"f",!0,{x:t.v},{}),this.__webglResourceRepository.setUniformValue(i._shaderProgramUid,_.a.ProjectionMatrix,!0,4,"f",!0,{x:r.v},{}),!0}}class v{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__dataTextureUid=c.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1}get vertexShaderMethodDefinitions_dataTexture(){const e=U.a.getInstance().glsl_texture;return`\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${e}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${e}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = instanceId;\n    float powWidthVal = ${o.a.bufferWidthLength}.0;\n    float powHeightVal = ${o.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index * 4.0 + 0.0, arg);\n   vec4 col1 = fetchElement(u_dataTexture, index * 4.0 + 1.0, arg);\n   vec4 col2 = fetchElement(u_dataTexture, index * 4.0 + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `}setupShaderProgram(e){const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_dataTexture),this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,[{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}}}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;this.__meshComponent=e,this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[r]=i,v.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,i)}}$prerender(e,t){if(this.__isVAOSet)return;const r=e.getPrimitiveNumber();for(let i=0;i<r;i++){const r=e.getPrimitiveAt(i);this.__vertexHandles[i]=v.__vertexHandleOfPrimitiveObjectUids.get(r.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i],r,t)}this.__isVAOSet=!0}common_$prerender(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(d.a.TextureHalfFloat))&&(e=!0);const t=o.a.getInstance().getBuffer(u.a.GPUInstanceData),r=new Float32Array(t.getArrayBuffer());let i;if(e){i=new Uint16Array(r.length);let e=t.takenSizeInByte/4;e/=2;for(let t=0;t<e;t++)i[t]=n.a.toHalfFloat(r[t])}this.__dataTextureUid===c.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:g.a.RGBA16F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:h.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.HalfFloat,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:g.a.RGBA32F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:h.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.Repeat,wrapT:g.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:o.a.bufferWidthLength,height:t.takenSizeInByte/o.a.bufferWidthLength/4,format:h.a.RGBA,type:m.a.Float}):this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:o.a.bufferWidthLength,height:t.takenSizeInByte/o.a.bufferWidthLength/4,format:h.a.RGBA,type:m.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:o.a.bufferWidthLength,height:t.takenSizeInByte/o.a.bufferWidthLength/4,format:h.a.RGBA,type:m.a.Float}))}attachGPUData(e){const t=e.material,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);r.bindTexture(r.TEXTURE_2D,i);const a=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var o=r.getUniformLocation(a,"u_dataTexture");r.uniform1i(o,0)}attatchShaderProgram(e){const t=e._shaderProgramUid,r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(t);r.useProgram(i)}attachVertexData(e,t,r,i){const a=this.__vertexHandles[e],o=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),n=r.getRawContext();if(null!=o)r.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new v),this.__instance}common_$render(e,t,r){const i=e.material,a=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram(i);a.getRawContext();return this.__webglResourceRepository.setUniformValue(i._shaderProgramUid,_.a.ViewMatrix,!0,4,"f",!0,{x:t.v},{}),this.__webglResourceRepository.setUniformValue(i._shaderProgramUid,_.a.ProjectionMatrix,!0,4,"f",!0,{x:r.v},{}),!0}}v.__vertexHandleOfPrimitiveObjectUids=new Map;var T=r(36),P=r(54),L=r(31),G=r(12),I=r(57),W=r(26),M=r(35),A=r(49),S=r(42),B=function(e,t,r,i){return new(r||(r=Promise))(function(a,o){function n(e){try{u(i.next(e))}catch(e){o(e)}}function s(e){try{u(i.throw(e))}catch(e){o(e)}}function u(e){e.done?a(e.value):new r(function(t){t(e.value)}).then(n,s)}u((i=i.apply(e,t||[])).next())})};class C{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.vertexShaderMethodDefinitions_uniform="\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  ",this.__lastShader=-1}setupShaderProgram(e){const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r).material;if(t){if(t._shaderProgramUid!==c.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_uniform);const e=[{semantic:_.a.WorldMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.ProjectionMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.NormalMatrix,isPlural:!1,isSystem:!0},{semantic:_.a.BoneMatrix,isPlural:!0,isSystem:!0},{semantic:_.a.LightNumber,isPlural:!1,isSystem:!0},{semantic:_.a.ViewPosition,isPlural:!1,isSystem:!0},{semantic:_.a.SkinningMode,compositionType:x.a.Scalar,componentType:m.a.Int,isPlural:!1,isSystem:!0},{semantic:_.a.DiffuseEnvTexture,compositionType:x.a.TextureCube,componentType:m.a.Int,isPlural:!1,isSystem:!0},{semantic:_.a.SpecularEnvTexture,compositionType:x.a.TextureCube,componentType:m.a.Int,isPlural:!1,isSystem:!0},{semantic:_.a.IBLParameter,compositionType:x.a.Vec3,componentType:m.a.Float,isPlural:!1,isSystem:!0},{semantic:_.a.BrdfLutTexture,compositionType:x.a.Texture2D,componentType:m.a.Int,isPlural:!1,isSystem:!0}],r=[];for(let e=0;e<W.a.maxLightNumberInShader;e++)r.push({semantic:_.a.LightPosition,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0}),r.push({semantic:_.a.LightDirection,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0}),r.push({semantic:_.a.LightIntensity,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0});this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,e.concat(r)),t.setUniformLocations(t._shaderProgramUid)}}}$load(e){return B(this,void 0,void 0,function*(){this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let r=0;r<t;r++){const t=e.getPrimitiveAt(r),i=this.__webglResourceRepository.createVertexDataResources(t);C.__vertexHandleOfPrimitiveObjectUids.set(t.primitiveUid,i)}this.__dummyWhiteTextureUid=this.__webglResourceRepository.createDummyTexture(),this.__dummyBlackTextureUid=this.__webglResourceRepository.createDummyTexture("rgba(0, 0, 0, 1)"),this.__dummyBlackCubeTextureUid=this.__webglResourceRepository.createDummyCubeTexture();const r=M.a.getInstance().getModule("pbr").pbrCookTorranceBrdfLutDataUrl;this.__pbrCookTorranceBrdfLutDataUrlUid=yield this.__webglResourceRepository.createTextureFromDataUri(r,{level:0,internalFormat:h.a.RGBA,border:0,format:h.a.RGBA,type:m.a.Float,magFilter:g.a.Nearest,minFilter:g.a.Nearest,wrapS:g.a.ClampToEdge,wrapT:g.a.ClampToEdge,generateMipmap:!1,anisotropy:!1})})}$prerender(e,t){const r=[],i=e.getPrimitiveNumber();if(e.weights.length>0)for(let t=0;t<i;t++){const i=e.getPrimitiveAt(t);r[t]=C.__vertexHandleOfPrimitiveObjectUids.get(i.primitiveUid),this.__webglResourceRepository.resendVertexBuffer(i,r[t].vboHandles)}for(let a=0;a<i;a++){const i=e.getPrimitiveAt(a);r[a]=C.__vertexHandleOfPrimitiveObjectUids.get(i.primitiveUid),r[a].setComplete,this.__webglResourceRepository.setVertexDataToPipeline(r[a],i,t),r[a].setComplete=!0}}common_$prerender(){const e=G.a.getInstance();this.__lightComponents=e.getComponentsWithType(I.a)}attachGPUData(e){}attatchShaderProgram(e){}attachVertexData(e,t,r,i){const a=C.__vertexHandleOfPrimitiveObjectUids.get(t.primitiveUid),o=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),n=r.getRawContext();if(null!=o)r.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,i);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new C),this.__instance}common_$render(e,t,r){return!1}$render(e,t,r,i,a,o){const n=this.__webglResourceRepository.currentWebGLContextWrapper,s=n.getRawContext();e.componentSID===A.a.firstOpaqueSid&&(s.disable(s.BLEND),s.depthMask(!0)),e.componentSID==A.a.firstTranparentSid&&(s.enable(s.BLEND),s.blendFuncSeparate(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE),s.depthMask(!1));const u=e.getPrimitiveNumber();for(let l=0;l<u;l++){const u=e.getPrimitiveAt(l);this.attachVertexData(l,u,n,c.a.InvalidCGAPIResourceUid);const d=u.material,h=this.__webglResourceRepository.getWebGLResource(d._shaderProgramUid),m=d._shaderProgramUid;let g=!1;m!==this.__lastShader&&(s.useProgram(h),this.__lastShader=m,g=!0),T.a.transposeTo(t,C.transposedMatrix44),this.__webglResourceRepository.setUniformValue(m,_.a.WorldMatrix,!0,4,"f",!0,{x:C.transposedMatrix44.v},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.NormalMatrix,!0,3,"f",!0,{x:r.v},{force:g});const p=G.a.getInstance().getComponent(L.a,L.a.main);this.__webglResourceRepository.setUniformValue(m,_.a.ViewMatrix,!0,4,"f",!0,{x:p.viewMatrix.v},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.ProjectionMatrix,!0,4,"f",!0,{x:p.projectionMatrix.v},{force:g});const f=p.worldPosition;this.__webglResourceRepository.setUniformValue(m,_.a.ViewPosition,!1,3,"f",!0,{x:f.v},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.LightNumber,!1,1,"i",!1,{x:this.__lightComponents.length},{force:g});for(let e=0;e<this.__lightComponents.length&&!(e>=W.a.maxLightNumberInShader);e++){const t=this.__lightComponents[e],r=t.entity.getSceneGraph().worldPosition,i=t.direction,a=t.intensity;this.__webglResourceRepository.setUniformValue(m,_.a.LightPosition,!1,4,"f",!1,{x:r.x,y:r.y,z:r.z,w:t.type.index},{force:g},e),this.__webglResourceRepository.setUniformValue(m,_.a.LightDirection,!1,4,"f",!1,{x:i.x,y:i.y,z:i.z,w:0},{force:g},e),this.__webglResourceRepository.setUniformValue(m,_.a.LightIntensity,!1,4,"f",!1,{x:a.x,y:a.y,z:a.z,w:0},{force:g},e)}const R=i.getComponent(P.a);if(R){const e=R.jointMatrices;this.__webglResourceRepository.setUniformValue(m,_.a.BoneMatrix,!0,4,"f",!0,{x:e},{force:g}),this.__webglResourceRepository.setUniformValue(m,_.a.SkinningMode,!1,1,"i",!1,{x:!0},{force:g})}else this.__webglResourceRepository.setUniformValue(m,_.a.SkinningMode,!1,1,"i",!1,{x:!1},{force:g});let x;if(x=this.__webglResourceRepository.setUniformValue(m,_.a.DiffuseEnvTexture,!1,1,"i",!1,{x:6},{force:g}))if(s.activeTexture(s.TEXTURE6),a&&a.isTextureReady){const e=this.__webglResourceRepository.getWebGLResource(a.cubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}if(x=this.__webglResourceRepository.setUniformValue(m,_.a.SpecularEnvTexture,!1,1,"i",!1,{x:7},{force:g}))if(s.activeTexture(s.TEXTURE7),o&&o.isTextureReady){const e=this.__webglResourceRepository.getWebGLResource(o.cubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}let b=1;if(o&&(b=o.mipmapLevelNumber),this.__webglResourceRepository.setUniformValue(m,_.a.IBLParameter,!1,3,"f",!1,{x:b,y:1,z:1},{force:g}),x=this.__webglResourceRepository.setUniformValue(m,_.a.BrdfLutTexture,!1,1,"i",!1,{x:5},{force:g}))if(s.activeTexture(s.TEXTURE5),null!=this.__pbrCookTorranceBrdfLutDataUrlUid){const e=this.__webglResourceRepository.getWebGLResource(this.__pbrCookTorranceBrdfLutDataUrlUid);s.bindTexture(s.TEXTURE_2D,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,e)}d&&d.setUniformValues(m,g),s.drawElements(u.primitiveMode.index,u.indicesAccessor.elementCount,u.indicesAccessor.componentType.index,0),this.dettachVertexData(n)}this.__lastShader=-1}}C.__vertexHandleOfPrimitiveObjectUids=new Map,C.transposedMatrix44=new S.a([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);var D=function(e){return e.index===i.a.UBOWebGL2.index?l.getInstance():e.index===i.a.TransformFeedbackWebGL2.index?w.getInstance():e.index===i.a.UniformWebGL1.index?C.getInstance():v.getInstance()},V=r(48),F=r(56);const E=Object.freeze({getRenderingStrategy:D,GLSLShader:V.a,WebGLContextWrapper:F.a,WebGLResourceRepository:a.a,WebGLStrategyDataTexture:v,WebGLStrategyTransformFeedback:w,WebGLStrategyUBO:l,WebGLStrategyUniform:C});t.default=E}}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.1-293-g7812-mod branch: feature/shader-system';
