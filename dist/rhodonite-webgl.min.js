exports.ids=["webgl"],exports.modules={91:function(e,t,a){"use strict";a.r(t);var n=a(41),r=a(71),i=a(36),o=a(10),s=a(15),l=a(3),c=a(13),u=a(81),h=a(5),d=a(33),p=a(2),m=a(12),g=a(0),_=a(6),f=a(30),x=a(4),b=a(16),y=a(49),v=a(65),R=a(53),I=a(57);let S,T,w,C,P,M,V,A,L;var W=Object.freeze({setCullAndBlendSettings:function(e,t,a){let n,r;null!=e.cullFace?(n=e.cullFace,r=e.cullFrontFaceCCW):(n=t.cullFace,r=t.cullFrontFaceCCW),function(e,t,a){A!==e&&(e?a.enable(a.CULL_FACE):a.disable(a.CULL_FACE),A=e);!0===e&&L!==t&&(t?a.frontFace(a.CCW):a.frontFace(a.CW),L=t)}(n,r,a),function(e,t){const a=e.alphaMode===R.a.Blend;S!==a&&(a?t.enable(t.BLEND):t.disable(t.BLEND),S=a);a&&(function(e,t,a){n=e,r=t,(T!=n||w!=r)&&(null!=t?a.blendEquationSeparate(e,t):a.blendEquation(e),T=e,w=t);var n,r}(e.blendEquationMode,e.blendEquationModeAlpha,t),function(e,t,a,n,r){i=e,o=t,s=a,l=n,(C!=i||P!=o||M!=s||V!=l)&&(null!=a?r.blendFuncSeparate(e,t,a,n):r.blendFunc(e,t),C=e,P=t,M=a,V=n);var i,o,s,l}(e.blendFuncSrcFactor,e.blendFuncDstFactor,e.blendFuncAlphaSrcFactor,e.blendFuncAlphaDstFactor,t))}(e,a)},startDepthMasking:function(e,t,a){e===I.a.firstTransparentIndex&&t.depthMask(!1)},endDepthMasking:function(e,t,a){e===I.a.lastTransparentIndex&&t.depthMask(!0)}}),D=function(e,t,a,n){return new(a||(a=Promise))((function(r,i){function o(e){try{l(n.next(e))}catch(e){i(e)}}function s(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,s)}l((n=n.apply(e,t||[])).next())}))};class U{constructor(){this.__webglResourceRepository=r.a.getInstance(),this.__dataTextureUid=o.a.InvalidCGAPIResourceUid,this.__lastShader=-1,this.__lastRenderPassTickCount=-1}setupShaderProgram(e){if(null==e.mesh)return void i.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){const t=e.mesh.getPrimitiveAt(a),n=t.material;if(null==n||n.isEmptyMaterial())continue;if(n._shaderProgramUid!==o.a.InvalidCGAPIResourceUid)continue;const r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=t.primitiveMode.index===r.POINTS;this.setupDefaultShaderSemantics(n,i)}}setupDefaultShaderSemantics(e,t){const a=[{semantic:l.a.VertexAttributesExistenceArray,compositionType:g.a.ScalarArray,componentType:p.a.Int,stage:x.a.VertexShader,min:0,max:1,isSystem:!0,updateInterval:_.a.EveryTime},{semantic:l.a.WorldMatrix,compositionType:g.a.Mat4,componentType:p.a.Float,stage:x.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isSystem:!0,updateInterval:_.a.EveryTime},{semantic:l.a.NormalMatrix,compositionType:g.a.Mat3,componentType:p.a.Float,stage:x.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isSystem:!0,updateInterval:_.a.EveryTime}];t&&a.push({semantic:l.a.PointSize,compositionType:g.a.Scalar,componentType:p.a.Float,stage:x.a.PixelShader,min:0,max:Number.MAX_VALUE,isSystem:!0,updateInterval:_.a.EveryTime},{semantic:l.a.PointDistanceAttenuation,compositionType:g.a.Vec3,componentType:p.a.Float,stage:x.a.PixelShader,min:0,max:1,isSystem:!0,updateInterval:_.a.EveryTime}),U.setupMaterial(e,a)}static setupMaterial(e,t){let a;a=null!=t?t:e.fieldsInfoArray,U.__vertexShaderMethodDefinitions_uniform=`\nuniform mat4 u_worldMatrix;\nuniform mat3 u_normalMatrix;\n\nmat4 get_worldMatrix(float instanceId) {\n  return u_worldMatrix;\n}\n\nmat3 get_normalMatrix(float instanceId) {\n  return u_normalMatrix;\n}\n\n#ifdef RN_IS_MORPHING\n  vec3 get_position(float vertexId, vec3 basePosition) {\n    vec3 position = basePosition;\n    for (int i=0; i<${h.a.maxVertexMorphNumberInShader}; i++) {\n      float index = u_dataTextureMorphOffsetPosition[i] + 1.0 * vertexId;\n      float powWidthVal = ${f.a.bufferWidthLength}.0;\n      float powHeightVal = ${f.a.bufferHeightLength}.0;\n      vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n    //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n      vec3 addPos = fetchElement(u_dataTexture, index + 0.0, arg).xyz;\n      position += addPos * u_morphWeights[i];\n      if (i == u_morphTargetNumber-1) {\n        break;\n      }\n    }\n\n    return position;\n  }\n#endif\n\n  `,e.createProgram(U.__vertexShaderMethodDefinitions_uniform,l.a.getShaderProperty);const n=r.a.getInstance();n.setupUniformLocations(e._shaderProgramUid,a),e.setUniformLocations(e._shaderProgramUid),U.__globalDataRepository.setUniformLocations(e._shaderProgramUid);const i=n.currentWebGLContextWrapper.getRawContext(),o=n.getWebGLResource(e._shaderProgramUid);o.dataTexture=i.getUniformLocation(o,"u_dataTexture"),o.currentComponentSIDs=i.getUniformLocation(o,"u_currentComponentSIDs")}$load(e){return D(this,void 0,void 0,(function*(){if(null==e.mesh)return void i.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){e.mesh.getPrimitiveAt(a).create3DAPIVertexData()}e.mesh.updateVariationVBO()}))}$prerender(e,t,a){if(null==e.mesh)return void i.a.alertNoMeshSet(e);const n=e.mesh.getPrimitiveNumber();for(let t=0;t<n;t++){const a=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.setVertexDataToPipeline({vaoHandle:e.mesh.getVaoUids(t),iboHandle:a.vertexHandles.iboHandle,vboHandles:a.vertexHandles.vboHandles},a,e.mesh.variationVBOUid)}}common_$prerender(){const e=c.a.getInstance();if(this.__lightComponents=e.getComponentsWithType(u.a),this.__dataTextureUid===o.a.InvalidCGAPIResourceUid){const e=f.a.getInstance().getBuffer(b.a.GPUVertexData);if(null==e)return;e.takenSizeInByte/f.a.bufferWidthLength/4>f.a.bufferHeightLength&&console.warn("The buffer size exceeds the size of the data texture.");let t=0;e.takenSizeInByte/4/4<f.a.bufferWidthLength*f.a.bufferHeightLength&&(t=f.a.bufferWidthLength*f.a.bufferHeightLength*4*4-e.takenSizeInByte);const a=v.a.concatArrayBuffers([e.getArrayBuffer()],[e.takenSizeInByte],t),n=new Float32Array(a);this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(n,{level:0,internalFormat:m.a.RGBA32F,width:f.a.bufferWidthLength,height:f.a.bufferHeightLength,border:0,format:d.a.RGBA,type:p.a.Float,magFilter:m.a.Nearest,minFilter:m.a.Nearest,wrapS:m.a.Repeat,wrapT:m.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(n,{level:0,internalFormat:d.a.RGBA,width:f.a.bufferWidthLength,height:f.a.bufferHeightLength,border:0,format:d.a.RGBA,type:p.a.Float,magFilter:m.a.Nearest,minFilter:m.a.Nearest,wrapS:m.a.Repeat,wrapT:m.a.Repeat,generateMipmap:!1,anisotropy:!1})}}attachGPUData(e){}attachShaderProgram(e){}attachVertexData(e,t,a,n){}attachVertexDataInner(e,t,a,n,r){const i=t.vertexHandles,o=this.__webglResourceRepository.getWebGLResource(e.getVaoUids(a)),s=n.getRawContext();if(null!=o)n.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(i,t,r);const e=this.__webglResourceRepository.getWebGLResource(i.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new U),this.__instance}common_$render(e,t,a,n,r){return!1}$render(e,t,a,n,r,s,l,c,u){const h=this.__webglResourceRepository.currentWebGLContextWrapper,d=h.getRawContext();if(W.startDepthMasking(e,d,s),null==t.mesh)return void i.a.alertNoMeshSet(t);const p=t.mesh.getPrimitiveNumber();for(let e=0;e<p;e++){const i=t.mesh.getPrimitiveAt(e);this.attachVertexDataInner(t.mesh,i,e,h,o.a.InvalidCGAPIResourceUid);const p=s.getAppropriateMaterial(i,i.material);if(p.isEmptyMaterial()||-1===p._shaderProgramUid)continue;const m=this.__webglResourceRepository.getWebGLResource(p._shaderProgramUid),g=p._shaderProgramUid;let _=!1;l!==this.__lastRenderPassTickCount&&(_=!0),g!==this.__lastShader&&(d.useProgram(m),d.uniform1i(m.dataTexture,7),this.__lastShader=g,_=!0,this.__webglResourceRepository.bindTexture2D(7,this.__dataTextureUid)),this.__lastMaterial!==p&&(_=!0,this.__lastMaterial=p),W.setCullAndBlendSettings(p,s,d),p.setParametersForGPU({material:p,shaderProgram:m,firstTime:_,args:{setUniform:!0,glw:h,entity:r,primitive:i,worldMatrix:a,normalMatrix:n,lightComponents:this.__lightComponents,renderPass:s,diffuseCube:c,specularCube:u}}),i.indicesAccessor?h.drawElementsInstanced(i.primitiveMode.index,i.indicesAccessor.elementCount,i.indicesAccessor.componentType.index,0,1):h.drawArraysInstanced(i.primitiveMode.index,0,i.getVertexCountAsVerticesBased(),1)}W.endDepthMasking(e,d,s),this.__lastRenderPassTickCount=l}setCamera(e){let t=e.cameraComponent;null==t&&(t=c.a.getInstance().getComponent(s.a,s.a.main)),t&&t.setValuesToGlobalDataRepository()}}U.__globalDataRepository=y.a.getInstance();var F=a(55),G=a(28),E=a(35),$=a(11),B=a(20),N=a(52);class H{constructor(){this.__webglResourceRepository=r.a.getInstance(),this.__dataTextureUid=o.a.InvalidCGAPIResourceUid,this.__lastShader=o.a.InvalidCGAPIResourceUid,this.__lastRenderPassTickCount=-1}get vertexShaderMethodDefinitions_dataTexture(){return`\n\n  mat4 get_worldMatrix(float instanceId)\n  {\n    highp float index = ${G.a.getLocationOffsetOfMemberOfComponent(E.a,"worldMatrix")}.0 + 4.0 * instanceId;\n    highp float powWidthVal = ${f.a.bufferWidthLength}.0;\n    highp float powHeightVal = ${f.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n    // highp vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n    vec4 col3 = fetchElement(u_dataTexture, index + 3.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col0.y, col0.z, col0.w,\n      col1.x, col1.y, col1.z, col1.w,\n      col2.x, col2.y, col2.z, col2.w,\n      col3.x, col3.y, col3.z, col3.w\n      );\n\n    return matrix;\n  }\n\n\n  mat3 get_normalMatrix(float instanceId) {\n    float index = ${G.a.getLocationOffsetOfMemberOfComponent(E.a,"normalMatrix")}.0 + 3.0 * instanceId;\n    float powWidthVal = ${f.a.bufferWidthLength}.0;\n    float powHeightVal = ${f.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n\n    mat3 matrix = mat3(\n      col0.x, col0.y, col0.z,\n      col0.w, col1.x, col1.y,\n      col1.z, col1.w, col2.x\n      );\n\n    return matrix;\n  }\n\n#ifdef RN_IS_MORPHING\n  vec3 get_position(float vertexId, vec3 basePosition) {\n    vec3 position = basePosition;\n    for (int i=0; i<${h.a.maxVertexMorphNumberInShader}; i++) {\n      float index = u_dataTextureMorphOffsetPosition[i] + 1.0 * vertexId;\n      float powWidthVal = ${f.a.bufferWidthLength}.0;\n      float powHeightVal = ${f.a.bufferHeightLength}.0;\n      vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n    //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n      vec3 addPos = fetchElement(u_dataTexture, index + 0.0, arg).xyz;\n      position += addPos * u_morphWeights[i];\n      if (i == u_morphTargetNumber-1) {\n        break;\n      }\n    }\n\n    return position;\n  }\n#endif\n  `}setupShaderProgram(e){if(null==e.mesh)return void i.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){const t=e.mesh.getPrimitiveAt(a),n=t.material;if(null==n||n.isEmptyMaterial())continue;if(n._shaderProgramUid!==o.a.InvalidCGAPIResourceUid)continue;const r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=t.primitiveMode.index===r.POINTS;this.setupDefaultShaderSemantics(n,i)}}setupDefaultShaderSemantics(e,t){e.createProgram(this.vertexShaderMethodDefinitions_dataTexture,this.__getShaderProperty),t&&this.__webglResourceRepository.setupUniformLocations(e._shaderProgramUid,[{semantic:l.a.PointSize,compositionType:g.a.Scalar,componentType:p.a.Float,stage:x.a.PixelShader,min:0,max:Number.MAX_VALUE,isSystem:!0,updateInterval:_.a.EveryTime},{semantic:l.a.PointDistanceAttenuation,compositionType:g.a.Vec3,componentType:p.a.Float,stage:x.a.PixelShader,min:0,max:1,isSystem:!0,updateInterval:_.a.EveryTime}]),e.setUniformLocations(e._shaderProgramUid);const a=this.__webglResourceRepository.getWebGLResource(e._shaderProgramUid),n=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();a.dataTexture=n.getUniformLocation(a,"u_dataTexture"),a.currentComponentSIDs=n.getUniformLocation(a,"u_currentComponentSIDs")}static __getOffsetOfShaderSemanticsInfo(e){let t=1;switch(e.compositionType){case g.a.Mat4:case g.a.Mat4Array:t=4;break;case g.a.Mat3:t=3;break;case g.a.Mat2:t=2}return t}__getShaderProperty(e,t,a,n){const r=t.compositionType.getGlslStr(t.componentType),i=[];let o,s=1;const c=t.compositionType===g.a.Texture2D||t.compositionType===g.a.TextureCube,u=t.semantic.str.replace(".","_");let h="";const d=t.compositionType.getGlslStr(t.componentType);let m="";if(t.maxIndex&&(m=`[${t.maxIndex}]`),(t.needUniformInFastest||c)&&(h=`  uniform ${d} u_${u}${m};\n`),a<0){if(Math.abs(a)%l.b._scale!=0)return"";const n=H.__getOffsetOfShaderSemanticsInfo(t);for(let n=0;n<t.maxIndex;n++){const t=F.a.getLocationOffsetOfMemberOfMaterial(e,a);i.push(t)}let r=`highp float indices[${s=t.maxIndex}];`;i.forEach((e,t)=>{r+=`\nindices[${t}] = ${e}.0;`}),o=`\n        ${r}\n        highp float idx = 0.0;\n        for (int i=0; i<${s}; i++) {\n          idx = indices[i] + ${n}.0 * instanceId;\n          if (i == index) {\n            break;\n          }\n        }`}else{const r=H.__getOffsetOfShaderSemanticsInfo(t);let i=-1;if(n){i=y.a.getInstance().getLocationOffsetOfProperty(a)}else i=F.a.getLocationOffsetOfMemberOfMaterial(e,a);let s=r;g.a.isArray(t.compositionType)&&null!=t.maxIndex&&(s=r*t.maxIndex),o=g.a.isArray(t.compositionType)?`highp float idx = ${i}.0 + ${s}.0 * instanceId + ${r}.0 * float(index);`:t.compositionType===g.a.Mat4||t.compositionType===g.a.Mat3||t.compositionType===g.a.Mat2?`highp float idx = ${i}.0 + ${s}.0 * instanceId;`:`highp float idx = ${i}.0 + instanceId;`}let _="";t.componentType===p.a.Int&&t.compositionType!==g.a.Scalar&&(_="i");let x="";c||(x+=`\n${r} get_${u}(highp float instanceId, const int index) {\n  ${o}\n  highp float powWidthVal = ${f.a.bufferWidthLength}.0;\n  highp float powHeightVal = ${f.a.bufferHeightLength}.0;\n  highp vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  highp vec4 col0 = fetchElement(u_dataTexture, idx + 0.0, arg);\n`);let b=`${h}${x}`;switch(t.compositionType){case g.a.Vec4:case g.a.Vec4Array:b+=`        highp ${_}vec4 val = ${_}vec4(col0);`;break;case g.a.Vec3:case g.a.Vec3Array:b+=`        highp ${_}vec3 val = ${_}vec3(col0.xyz);`;break;case g.a.Vec2:case g.a.Vec2Array:b+=`        highp ${_}vec2 val = ${_}vec2(col0.xy);`;break;case g.a.Scalar:case g.a.ScalarArray:t.componentType===p.a.Int?b+="        int val = int(col0.x);":t.componentType===p.a.Bool?b+="        bool val = bool(col0.x);":b+="       float val = col0.x;";break;case g.a.Mat4:case g.a.Mat4Array:b+="\n        vec4 col1 = fetchElement(u_dataTexture, idx + 1.0, arg);\n        vec4 col2 = fetchElement(u_dataTexture, idx + 2.0, arg);\n        vec4 col3 = fetchElement(u_dataTexture, idx + 3.0, arg);\n\n        mat4 val = mat4(\n          col0.x, col0.y, col0.z, col0.w,\n          col1.x, col1.y, col1.z, col1.w,\n          col2.x, col2.y, col2.z, col2.w,\n          col3.x, col3.y, col3.z, col3.w\n          );\n        ";break;case g.a.Mat3:b+="\n        vec4 col1 = fetchElement(u_dataTexture, idx + 1.0, arg);\n        vec4 col2 = fetchElement(u_dataTexture, idx + 2.0, arg);\n        mat3 val = mat3(\n          col0.x, col0.y, col0.z,\n          col0.w, col1.x, col1.y,\n          col1.z, col1.w, col2.x\n          );\n        ";break;default:b+=""}return c||(b+="\n      return val;\n    }\n  "),b}__isLoaded(e){if(null==e.mesh)return!1;if(e.mesh.variationVBOUid!==o.a.InvalidCGAPIResourceUid){const t=e.mesh.getPrimitiveNumber();let a=0;for(let n=0;n<t;n++){null!=e.mesh.getPrimitiveAt(n).vertexHandles&&a++}return t===a}return!1}$load(e){if(this.__isLoaded(e))return;if(H.__currentComponentSIDs=H.__globalDataRepository.getValue(l.a.CurrentComponentSIDs,0),null==e.mesh)return void i.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){e.mesh.getPrimitiveAt(a).create3DAPIVertexData()}e.mesh.updateVariationVBO()}$prerender(e,t,a){if(t._readyForRendering)return;if(null==e.mesh)return void i.a.alertNoMeshSet(e);if(e.mesh.isInstanceMesh())return void(t._readyForRendering=!0);const n=e.mesh.getPrimitiveNumber();for(let t=0;t<n;t++){const a=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.setVertexDataToPipeline({vaoHandle:e.mesh.getVaoUids(t),iboHandle:a.vertexHandles.iboHandle,vboHandles:a.vertexHandles.vboHandles},a,e.mesh.variationVBOUid)}t._readyForRendering=!0}__createAndUpdateDataTexture(){const e=f.a.getInstance(),t=e.getBuffer(b.a.GPUInstanceData);if(null!=t)if(this.__dataTextureUid!==o.a.InvalidCGAPIResourceUid){const e=t.takenSizeInByte,a=Math.min(Math.ceil(e/f.a.bufferWidthLength/4/4),f.a.bufferHeightLength),n=f.a.bufferWidthLength*a*4*4;e>f.a.bufferWidthLength*f.a.bufferHeightLength*4*4&&console.warn("The buffer size exceeds the size of the data texture.");const r=new Float32Array(t.getArrayBuffer(),0,n/4);this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,xoffset:0,yoffset:0,width:f.a.bufferWidthLength,height:a,format:d.a.RGBA,type:p.a.Float})}else{const a=e.getBuffer(b.a.GPUVertexData);let n=0;null!=a&&(n=a.takenSizeInByte);let r=0;const i=f.a.bufferWidthLength*f.a.bufferHeightLength*4*4;t.takenSizeInByte+n<i&&(r=i-(t.takenSizeInByte+n));let o=new ArrayBuffer(0);null!=a&&(o=a.getArrayBuffer());const s=v.a.concatArrayBuffers([t.getArrayBuffer(),o],[t.takenSizeInByte,n],r);s.byteLength/f.a.bufferWidthLength/4/4>f.a.bufferHeightLength&&console.warn("The buffer size exceeds the size of the data texture.");const l=new Float32Array(s),c=f.a.bufferHeightLength;this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(l,{level:0,internalFormat:m.a.RGBA32F,width:f.a.bufferWidthLength,height:c,border:0,format:d.a.RGBA,type:p.a.Float,magFilter:m.a.Nearest,minFilter:m.a.Nearest,wrapS:m.a.Repeat,wrapT:m.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(l,{level:0,internalFormat:d.a.RGBA,width:f.a.bufferWidthLength,height:c,border:0,format:d.a.RGBA,type:p.a.Float,magFilter:m.a.Nearest,minFilter:m.a.Nearest,wrapS:m.a.Repeat,wrapT:m.a.Repeat,generateMipmap:!1,anisotropy:!1})}}common_$prerender(){this.__createAndUpdateDataTexture();const e=c.a.getInstance();this.__lightComponents=e.getComponentsWithType(u.a)}attachGPUData(e){const t=e.material,a=this.__webglResourceRepository.currentWebGLContextWrapper,n=a.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);a.bindTexture2D(0,r);const i=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var o=n.getUniformLocation(i,"u_dataTexture");n.uniform1i(o,0)}attachGPUDataInner(e,t){this.__webglResourceRepository.bindTexture2D(0,this.__dataTextureUid);var a=e.getUniformLocation(t,"u_dataTexture");e.uniform1i(a,0)}attachShaderProgram(e){const t=e._shaderProgramUid;if(t!==this.__lastShader){const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),a=this.__webglResourceRepository.getWebGLResource(t);e.useProgram(a),this.__lastShader=t}}attachVertexData(e,t,a,n){}attachVertexDataInner(e,t,a,n,r){const i=t.vertexHandles,o=this.__webglResourceRepository.getWebGLResource(e.getVaoUids(a)),s=n.getRawContext();if(null!=o)n.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(i,t,e.variationVBOUid);const a=this.__webglResourceRepository.getWebGLResource(i.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,a)}}static getInstance(){return this.__instance||(this.__instance=new H),this.__instance}__setupMaterial(e,t){e.setParameter(l.a.LightNumber,this.__lightComponents.length);for(let t=0;t<this.__lightComponents.length&&!(t>=h.a.maxLightNumberInShader);t++){const a=this.__lightComponents[t],n=a.entity.getSceneGraph().worldPosition,r=a.direction,i=a.intensity;e.setParameter(l.a.LightPosition,new $.b(n.x,n.y,n.z,a.type.index),t),e.setParameter(l.a.LightDirection,new $.b(r.x,r.y,r.z,0),t),e.setParameter(l.a.LightIntensity,new $.b(i.x,i.y,i.z,0),t)}}__getViewport(e){let t=e.getViewport();return t=this.__webglResourceRepository.currentWebGLContextWrapper.viewport}__setCamera(e,t){var a;const n=N.a.getInstance().getModule("xr");if((null===(a=n)||void 0===a?void 0:a.WebVRSystem.getInstance().isWebVRMode)&&e.isMainPass){const a=n.WebVRSystem.getInstance();this.__webglResourceRepository.setViewport(a.getViewportAt(this.__getViewport(e),t)),a.setValuesToGlobalDataRepository()}else{let t=e.cameraComponent;null==t&&(t=c.a.getInstance().getComponent(s.a,s.a.main)),t&&t.setValuesToGlobalDataRepository()}}__setCurrentComponentSIDsForEachRenderPass(e,t){var a;const n=N.a.getInstance().getModule("xr");if((null===(a=n)||void 0===a?void 0:a.WebVRSystem.getInstance().isWebVRMode)&&e.isMainPass){const e=n.WebVRSystem.getInstance();H.__currentComponentSIDs.v[B.a.CameraComponentTID]=e.getCameraComponentSIDAt(t)}else{let t=e.cameraComponent;null==t&&(t=c.a.getInstance().getComponent(s.a,s.a.main)),H.__currentComponentSIDs.v[B.a.CameraComponentTID]=t?t.componentSID:-1}}__setCurrentComponentSIDsForEachEntity(e,t,a){const n=a.getSkeletal();if(n){let e=0;n.componentSID<h.a.maxSkeletonNumber&&(e=n.componentSID),H.__currentComponentSIDs.v[B.a.SkeletalComponentTID]=e}else H.__currentComponentSIDs.v[B.a.SkeletalComponentTID]=-1}__setCurrentComponentSIDsForEachPrimitive(e,t,a,n){H.__currentComponentSIDs.v[0]=a.materialSID,e.uniform1fv(H.__shaderProgram.currentComponentSIDs,H.__currentComponentSIDs.v)}__getDisplayNumber(e){var t;let a=1;return(null===(t=N.a.getInstance().getModule("xr"))||void 0===t?void 0:t.WebVRSystem.getInstance().isWebVRMode)&&e.isMainPass&&(a=2),a}common_$render(e,t,a,n,r,i){const o=this.__webglResourceRepository.currentWebGLContextWrapper,s=o.getRawContext(),l=this.__getDisplayNumber(r);for(let a=0;a<l;a++){this.__setCamera(r,a),this.__setCurrentComponentSIDsForEachRenderPass(r,a);for(let a=0;a<e.length;a++){const n=e[a];if(n===G.a.invalidComponentSID)break;const i=t[n];if(null==i)break;const l=i.mesh;if(!l||!l.isOriginalMesh())continue;W.startDepthMasking(a,s,r);const c=i.entity;this.__setCurrentComponentSIDsForEachEntity(s,r,c);const u=c.getMeshRenderer(),h=l.getPrimitiveNumber();let d=!1;for(let e=0;e<h;e++){const t=l.getPrimitiveAt(e),a=r.getAppropriateMaterial(t,t.material);if(a.isEmptyMaterial())continue;const n=a._shaderProgramUid;if(-1!==n){if(this.attachVertexDataInner(l,t,e,o,l.variationVBOUid),n!==this.__lastShader){const e=this.__webglResourceRepository.getWebGLResource(n);s.useProgram(e),s.uniform1i(e.dataTexture,7),this.__setupMaterial(a,r),this.__webglResourceRepository.bindTexture2D(7,this.__dataTextureUid),H.__shaderProgram=e,d=!0}this.__lastMaterial!==a&&(d=!0,this.__lastMaterial=a),this.__setCurrentComponentSIDsForEachPrimitive(s,r,a,c),W.setCullAndBlendSettings(a,r,s),a.setParametersForGPU({material:a,shaderProgram:H.__shaderProgram,firstTime:d,args:{glw:o,entity:c,worldMatrix:c.getSceneGraph().worldMatrixInner,normalMatrix:c.getSceneGraph().normalMatrixInner,lightComponents:this.__lightComponents,renderPass:r,primitive:t,diffuseCube:u.diffuseCubeMap,specularCube:u.specularCubeMap,setUniform:!1}}),t.indicesAccessor?o.drawElementsInstanced(t.primitiveMode.index,t.indicesAccessor.elementCount,t.indicesAccessor.componentType.index,0,l.instanceCountIncludeOriginal):o.drawArraysInstanced(t.primitiveMode.index,0,t.getVertexCountAsVerticesBased(),l.instanceCountIncludeOriginal),this.__lastShader=n}}}}return this.__lastRenderPassTickCount=i,!1}$render(e,t,a,n,r,i,o,s,l){const c=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();W.endDepthMasking(e,c,i)}}H.__globalDataRepository=y.a.getInstance();var O=function(e){return e.index===n.a.FastestWebGL1.index?H.getInstance():(e.index===n.a.UniformWebGL1.index||(e.index,n.a.UniformWebGL2.index),U.getInstance())},k=a(62),z=a(87),X=a(8),q=a(63);class Y extends k.a{constructor(){super(),this.__vertexInputs=[],this.__vertexOutputs=[],this.__pixelInputs=[],this.__pixelOutputs=[],this.__attributeNames=[],this.__attributeSemantics=[],this.__attributeCompositions=[]}addVertexInputAndOutput(e,t){e.componentType===t.componentType&&e.compositionType===t.compositionType?(this.__vertexInputs.push(e),this.__vertexOutputs.push(t)):console.error("input and output type miss match!")}addPixelInputAndOutput(e,t){e.componentType===t.componentType&&e.compositionType===t.compositionType?(this.__pixelInputs.push(e),this.__pixelOutputs.push(t)):console.error("input and output type miss match!")}get vertexShaderDefinitions(){let e="";for(let t=0;t<this.__vertexInputs.length;t++){const a=this.__vertexInputs[t];if(0!=t&&(e+=",\n  "),!(a.isImmediateValue||a.name instanceof X.b||a.name instanceof l.b)){e+=`in ${a.compositionType.getGlslStr(a.componentType)} ${k.a.getStringFromShaderAnyDataType(a.name)}`,e+=",\n  "}const n=this.__vertexOutputs[t];e+=`out ${n.compositionType.getGlslStr(n.componentType)} ${k.a.getStringFromShaderAnyDataType(n.name)}`}let t="";for(let e=0;e<this.__vertexInputs.length;e++){const a=this.__vertexInputs[e],n=this.__vertexOutputs[e];let r;r=a.isImmediateValue?a.immediateValue:k.a.getStringFromShaderAnyDataType(a.name);let i=`${k.a.getStringFromShaderAnyDataType(n.name)} = ${r};\n`;e!==this.__vertexInputs.length-1&&(i+="  "),t+=i}return"void getVars(\n  "+e+"\n)\n{\n  "+t+"}"}get vertexShaderBody(){return"\n\n    "}get pixelShaderDefinitions(){let e="";for(let t=0;t<this.__pixelInputs.length;t++){const a=this.__pixelInputs[t];if(0!=t&&(e+=",\n  "),!(a.isImmediateValue||a.name instanceof X.b||a.name instanceof l.b)){e+=`in ${a.compositionType.getGlslStr(a.componentType)} ${k.a.getStringFromShaderAnyDataType(a.name)}`,e+=",\n  "}const n=this.__pixelOutputs[t];e+=`out ${n.compositionType.getGlslStr(n.componentType)} ${k.a.getStringFromShaderAnyDataType(n.name)}`}let t="";for(let e=0;e<this.__pixelInputs.length;e++){const a=this.__pixelInputs[e],n=this.__pixelOutputs[e];let r;r=a.isImmediateValue?a.immediateValue:k.a.getStringFromShaderAnyDataType(a.name);let i=`${k.a.getStringFromShaderAnyDataType(n.name)} = ${r};\n`;e!==this.__pixelInputs.length-1&&(i+="  "),t+=i}return"void getVars(\n  "+e+"\n)\n{\n  "+t+"}"}get pixelShaderBody(){return""}get attributeNames(){return this.__attributeNames}get attributeSemantics(){return this.__attributeSemantics}get attributeCompositions(){return this.__attributeCompositions}}Y.materialElement=q.a.PBRShading;const j=Object.freeze({getRenderingStrategy:O,GLSLShader:k.a,WebGLContextWrapper:z.a,WebGLResourceRepository:r.a,WebGLStrategyUniform:U,GetVarsShader:Y});t.default=j;"undefined"!=typeof exports&&(Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=j),(0,eval)("this").RnWebGL=j}};
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.5-240-g77835-mod branch: master';
