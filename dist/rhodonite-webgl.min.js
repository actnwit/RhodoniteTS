(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{84:function(e,t,a){"use strict";a.r(t);var n=a(40),r=a(62),i=a(37),o=a(10),s=a(18),c=a(3),l=a(12),d=a(67),h=a(8),u=a(38),m=a(2),p=a(23),g=a(1),f=a(7),_=a(29),x=a(4),b=a(14),y=a(44),v=a(58),R=a(48),w=a(55);let I,S,T,C,P,L,M,A,V;var W=Object.freeze({setCullAndBlendSettings:function(e,t,a){let n,r;null!=e.cullface?(n=e.cullface,r=e.cullFrontFaceCCW):(n=t.cullface,r=t.cullFrontFaceCCW),function(e,t,a){A!==e&&(e?a.enable(a.CULL_FACE):a.disable(a.CULL_FACE),A=e);!0===e&&V!==t&&(t?a.frontFace(a.CCW):a.frontFace(a.CW),V=t)}(n,r,a),function(e,t){const a=e.alphaMode===R.a.Blend;I!==a&&(a?t.enable(t.BLEND):t.disable(t.BLEND),I=a);a&&(function(e,t,a){n=e,r=t,(S!=n||T!=r)&&(null!=t?a.blendEquationSeparate(e,t):a.blendEquation(e),S=e,T=t);var n,r}(e.blendEquationMode,e.blendEquationModeAlpha,t),function(e,t,a,n,r){i=e,o=t,s=a,c=n,(C!=i||P!=o||L!=s||M!=c)&&(null!=a?r.blendFuncSeparate(e,t,a,n):r.blendFunc(e,t),C=e,P=t,L=a,M=n);var i,o,s,c}(e.blendFuncSrcFactor,e.blendFuncDstFactor,e.blendFuncAlphaSrcFactor,e.blendFuncAlphaDstFactor,t))}(e,a)},startDepthMasking:function(e,t,a){e===w.a.firstTranparentIndex&&t.depthMask(!1)},endDepthMasking:function(e,t,a){e===w.a.lastTransparentIndex&&t.depthMask(!0)}}),U=function(e,t,a,n){return new(a||(a=Promise))((function(r,i){function o(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,s)}c((n=n.apply(e,t||[])).next())}))};class D{constructor(){this.__webglResourceRepository=r.a.getInstance(),this.__dataTextureUid=o.a.InvalidCGAPIResourceUid,this.__lastShader=-1,this.__lastRenderPassTickCount=-1}setupShaderProgram(e){if(null==e.mesh)return void i.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){const t=e.mesh.getPrimitiveAt(a),n=t.material;if(null==n||n.isEmptyMaterial())return;if(n._shaderProgramUid!==o.a.InvalidCGAPIResourceUid)return;const r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=t.primitiveMode.index===r.POINTS;this.setupDefaultShaderSemantics(n,i)}}setupDefaultShaderSemantics(e,t){const a=[{semantic:c.a.VertexAttributesExistenceArray,compositionType:g.a.ScalarArray,componentType:m.a.Int,stage:x.a.VertexShader,min:0,max:1,isSystem:!0,updateInteval:f.a.EveryTime},{semantic:c.a.WorldMatrix,compositionType:g.a.Mat4,componentType:m.a.Float,stage:x.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isSystem:!0,updateInteval:f.a.EveryTime},{semantic:c.a.NormalMatrix,compositionType:g.a.Mat3,componentType:m.a.Float,stage:x.a.VertexShader,min:-Number.MAX_VALUE,max:Number.MAX_VALUE,isSystem:!0,updateInteval:f.a.EveryTime}];t&&a.push({semantic:c.a.PointSize,compositionType:g.a.Scalar,componentType:m.a.Float,stage:x.a.PixelShader,min:0,max:Number.MAX_VALUE,isSystem:!0,updateInteval:f.a.EveryTime},{semantic:c.a.PointDistanceAttenuation,compositionType:g.a.Vec3,componentType:m.a.Float,stage:x.a.PixelShader,min:0,max:1,isSystem:!0,updateInteval:f.a.EveryTime}),D.setupMaterial(e,a)}static setupMaterial(e,t){let a;a=null!=t?t:e.fieldsInfoArray,D.__vertexShaderMethodDefinitions_uniform=`\nuniform mat4 u_worldMatrix;\nuniform mat3 u_normalMatrix;\n\nmat4 get_worldMatrix(float instanceId) {\n  return u_worldMatrix;\n}\n\nmat3 get_normalMatrix(float instanceId) {\n  return u_normalMatrix;\n}\n\n#ifdef RN_IS_MORPHING\n  vec3 get_position(float vertexId, vec3 basePosition) {\n    vec3 position = basePosition;\n    for (int i=0; i<${h.a.maxVertexMorphNumberInShader}; i++) {\n      float index = u_dataTextureMorphOffsetPosition[i] + 1.0 * vertexId;\n      float powWidthVal = ${_.a.bufferWidthLength}.0;\n      float powHeightVal = ${_.a.bufferHeightLength}.0;\n      vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n    //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n      vec3 addPos = fetchElement(u_dataTexture, index + 0.0, arg).xyz;\n      position += addPos * u_morphWeights[i];\n      if (i == u_morphTargetNumber-1) {\n        break;\n      }\n    }\n\n    return position;\n  }\n#endif\n\n  `,e.createProgram(D.__vertexShaderMethodDefinitions_uniform,c.a.getShaderProperty);const n=r.a.getInstance();n.setupUniformLocations(e._shaderProgramUid,a),e.setUniformLocations(e._shaderProgramUid),D.__globalDataRepository.setUniformLocations(e._shaderProgramUid);const i=n.currentWebGLContextWrapper.getRawContext(),o=n.getWebGLResource(e._shaderProgramUid);o.dataTexture=i.getUniformLocation(o,"u_dataTexture"),o.currentComponentSIDs=i.getUniformLocation(o,"u_currentComponentSIDs")}$load(e){return U(this,void 0,void 0,(function*(){if(null==e.mesh)return void i.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){e.mesh.getPrimitiveAt(a).create3DAPIVertexData()}e.mesh.updateVariationVBO()}))}$prerender(e,t,a){if(null==e.mesh)return void i.a.alertNoMeshSet(e);const n=e.mesh.getPrimitiveNumber();if(e.mesh.weights.length>0)for(let t=0;t<n;t++){const a=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.resendVertexBuffer(a,a.vertexHandles.vboHandles)}for(let t=0;t<n;t++){const a=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.setVertexDataToPipeline({vaoHandle:e.mesh.getVaoUids(t),iboHandle:a.vertexHandles.iboHandle,vboHandles:a.vertexHandles.vboHandles},a,e.mesh.variationVBOUid)}}common_$prerender(){const e=l.a.getInstance();if(this.__lightComponents=e.getComponentsWithType(d.a),this.__dataTextureUid===o.a.InvalidCGAPIResourceUid){const e=_.a.getInstance().getBuffer(b.a.GPUVertexData);e.takenSizeInByte/_.a.bufferWidthLength/4>_.a.bufferHeightLength&&console.warn("The buffer size exceeds the size of the data texture.");let t=0;e.takenSizeInByte/4/4<_.a.bufferWidthLength*_.a.bufferHeightLength&&(t=_.a.bufferWidthLength*_.a.bufferHeightLength*4*4-e.takenSizeInByte);const a=v.a.concatArrayBuffers([e.getArrayBuffer()],[e.takenSizeInByte],t),n=new Float32Array(a);this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(n,{level:0,internalFormat:p.a.RGBA32F,width:_.a.bufferWidthLength,height:_.a.bufferHeightLength,border:0,format:u.a.RGBA,type:m.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(n,{level:0,internalFormat:u.a.RGBA,width:_.a.bufferWidthLength,height:_.a.bufferHeightLength,border:0,format:u.a.RGBA,type:m.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1})}}attachGPUData(e){}attatchShaderProgram(e){}attachVertexData(e,t,a,n){}attachVertexDataInner(e,t,a,n,r){const i=t.vertexHandles,o=this.__webglResourceRepository.getWebGLResource(e.getVaoUids(a)),s=n.getRawContext();if(null!=o)n.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(i,t,r);const e=this.__webglResourceRepository.getWebGLResource(i.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new D),this.__instance}common_$render(e,t,a,n,r){return!1}$render(e,t,a,n,r,s,c,l,d){const h=this.__webglResourceRepository.currentWebGLContextWrapper,u=h.getRawContext();if(W.startDepthMasking(e,u,s),null==t.mesh)return void i.a.alertNoMeshSet(t);const m=t.mesh.getPrimitiveNumber();for(let e=0;e<m;e++){const i=t.mesh.getPrimitiveAt(e);this.attachVertexDataInner(t.mesh,i,e,h,o.a.InvalidCGAPIResourceUid);const m=s.getAppropriateMaterial(i,i.material);if(m.isEmptyMaterial())continue;const p=this.__webglResourceRepository.getWebGLResource(m._shaderProgramUid),g=m._shaderProgramUid;let f=!1;c!==this.__lastRenderPassTickCount&&(f=!0),g!==this.__lastShader&&(u.useProgram(p),u.uniform1i(p.dataTexture,7),this.__lastShader=g,f=!0),this.__webglResourceRepository.bindTexture2D(7,this.__dataTextureUid),W.setCullAndBlendSettings(m,s,u),m.setParemetersForGPU({material:m,shaderProgram:p,firstTime:f,args:{setUniform:!0,glw:h,entity:r,primitive:i,worldMatrix:a,normalMatrix:n,lightComponents:this.__lightComponents,renderPass:s,diffuseCube:l,specularCube:d}}),i.indicesAccessor?h.drawElementsInstanced(i.primitiveMode.index,i.indicesAccessor.elementCount,i.indicesAccessor.componentType.index,0,1):h.drawArraysInstanced(i.primitiveMode.index,0,i.getVertexCountAsVerticesBased(),1)}W.endDepthMasking(e,u,s),this.__lastRenderPassTickCount=c}setCamera(e){let t=e.cameraComponent;null==t&&(t=l.a.getInstance().getComponent(s.a,s.a.main)),t&&t.setValuesToGlobalDataRepository()}}D.__globalDataRepository=y.a.getInstance();var G=a(49),F=a(28),E=a(30),B=a(11),H=a(17);class N{constructor(){this.__webglResourceRepository=r.a.getInstance(),this.__dataTextureUid=o.a.InvalidCGAPIResourceUid,this.__lastShader=o.a.InvalidCGAPIResourceUid,this.__lastRenderPassTickCount=-1}get vertexShaderMethodDefinitions_dataTexture(){return`\n\n  mat4 get_worldMatrix(float instanceId)\n  {\n    highp float index = ${F.a.getLocationOffsetOfMemberOfComponent(E.a,"worldMatrix")}.0 + 4.0 * instanceId;\n    highp float powWidthVal = ${_.a.bufferWidthLength}.0;\n    highp float powHeightVal = ${_.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n    // highp vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n    vec4 col3 = fetchElement(u_dataTexture, index + 3.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col0.y, col0.z, col0.w,\n      col1.x, col1.y, col1.z, col1.w,\n      col2.x, col2.y, col2.z, col2.w,\n      col3.x, col3.y, col3.z, col3.w\n      );\n\n    return matrix;\n  }\n\n\n  mat3 get_normalMatrix(float instanceId) {\n    float index = ${F.a.getLocationOffsetOfMemberOfComponent(E.a,"normalMatrix")}.0 + 3.0 * instanceId;\n    float powWidthVal = ${_.a.bufferWidthLength}.0;\n    float powHeightVal = ${_.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index + 0.0, arg);\n    vec4 col1 = fetchElement(u_dataTexture, index + 1.0, arg);\n    vec4 col2 = fetchElement(u_dataTexture, index + 2.0, arg);\n\n    mat3 matrix = mat3(\n      col0.x, col0.y, col0.z,\n      col0.w, col1.x, col1.y,\n      col1.z, col1.w, col2.x\n      );\n\n    return matrix;\n  }\n\n#ifdef RN_IS_MORPHING\n  vec3 get_position(float vertexId, vec3 basePosition) {\n    vec3 position = basePosition;\n    for (int i=0; i<${h.a.maxVertexMorphNumberInShader}; i++) {\n      float index = u_dataTextureMorphOffsetPosition[i] + 1.0 * vertexId;\n      float powWidthVal = ${_.a.bufferWidthLength}.0;\n      float powHeightVal = ${_.a.bufferHeightLength}.0;\n      vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n    //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n      vec3 addPos = fetchElement(u_dataTexture, index + 0.0, arg).xyz;\n      position += addPos * u_morphWeights[i];\n      if (i == u_morphTargetNumber-1) {\n        break;\n      }\n    }\n\n    return position;\n  }\n#endif\n  `}setupShaderProgram(e){if(null==e.mesh)return void i.a.alertNoMeshSet(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){const t=e.mesh.getPrimitiveAt(a),n=t.material;if(null==n||n.isEmptyMaterial())return;if(n._shaderProgramUid!==o.a.InvalidCGAPIResourceUid)return;const r=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=t.primitiveMode.index===r.POINTS;this.setupDefaultShaderSemantics(n,i)}}setupDefaultShaderSemantics(e,t){e.createProgram(this.vertexShaderMethodDefinitions_dataTexture,this.__getShaderProperty),t&&this.__webglResourceRepository.setupUniformLocations(e._shaderProgramUid,[{semantic:c.a.PointSize,compositionType:g.a.Scalar,componentType:m.a.Float,stage:x.a.PixelShader,min:0,max:Number.MAX_VALUE,isSystem:!0,updateInteval:f.a.EveryTime},{semantic:c.a.PointDistanceAttenuation,compositionType:g.a.Vec3,componentType:m.a.Float,stage:x.a.PixelShader,min:0,max:1,isSystem:!0,updateInteval:f.a.EveryTime}]),e.setUniformLocations(e._shaderProgramUid);const a=this.__webglResourceRepository.getWebGLResource(e._shaderProgramUid),n=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();a.dataTexture=n.getUniformLocation(a,"u_dataTexture"),a.currentComponentSIDs=n.getUniformLocation(a,"u_currentComponentSIDs")}static __getOffsetOfShaderSemanticsInfo(e){let t=1;switch(e.compositionType){case g.a.Mat4:t=4;break;case g.a.Mat3:t=3;break;case g.a.Mat2:t=2}return t}__getShaderProperty(e,t,a,n){const r=t.compositionType.getGlslStr(t.componentType),i=[];let o,s=1,l=-1;const d=t.compositionType===g.a.Texture2D||t.compositionType===g.a.TextureCube,h=t.semantic.str.replace(".","_");let u="";const p=t.compositionType.getGlslStr(t.componentType);let f="";if(t.maxIndex&&(f=`[${t.maxIndex}]`),(t.needUniformInFastest||d)&&(u=`  uniform ${p} u_${h}${f};\n`),a<0){if(Math.abs(a)%c.b._scale!=0)return"";const n=N.__getOffsetOfShaderSemanticsInfo(t);for(let n=0;n<t.maxIndex;n++){const t=G.a.getLocationOffsetOfMemberOfMaterial(e,a);i.push(t)}let r=`highp float indices[${s=t.maxIndex}];`;i.forEach((e,t)=>{r+=`\nindices[${t}] = ${e}.0;`}),o=`\n        ${r}\n        highp float idx = 0.0;\n        for (int i=0; i<${s}; i++) {\n          idx = indices[i] + ${n}.0 * instanceId;\n          if (i == index) {\n            break;\n          }\n        }`}else{const r=N.__getOffsetOfShaderSemanticsInfo(t);let i,s=0;if(n){const e=y.a.getInstance();l=e.getLocationOffsetOfProperty(a);e.getGlobalPropertyStruct(a).maxCount;s=r}else l=G.a.getLocationOffsetOfMemberOfMaterial(e,a);g.a.isArray(t.compositionType)?(i="float(index)",null!=t.maxIndex&&(s=r*t.maxIndex)):i=t.compositionType===g.a.Mat4||t.compositionType===g.a.Mat3||t.compositionType===g.a.Mat2?"float(index)":"instanceId",o=`highp float idx = ${l}.0 + ${s}.0 * instanceId + ${r}.0 * ${i};`}let x="";t.componentType===m.a.Int&&t.compositionType!==g.a.Scalar&&(x="i");let b="";d||(b+=`\n${r} get_${h}(highp float instanceId, const int index) {\n  ${o}\n  highp float powWidthVal = ${_.a.bufferWidthLength}.0;\n  highp float powHeightVal = ${_.a.bufferHeightLength}.0;\n  highp vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  highp vec4 col0 = fetchElement(u_dataTexture, idx + 0.0, arg);\n`);let v=`${u}${b}`;switch(t.compositionType){case g.a.Vec4:case g.a.Vec4Array:v+=`        highp ${x}vec4 val = ${x}vec4(col0);`;break;case g.a.Vec3:case g.a.Vec3Array:v+=`        highp ${x}vec3 val = ${x}vec3(col0.xyz);`;break;case g.a.Vec2:case g.a.Vec2Array:v+=`        highp ${x}vec2 val = ${x}vec2(col0.xy);`;break;case g.a.Scalar:case g.a.ScalarArray:t.componentType===m.a.Int?v+="        int val = int(col0.x);":t.componentType===m.a.Bool?v+="        bool val = bool(col0.x);":v+="       float val = col0.x;";break;case g.a.Mat4:v+="\n        vec4 col1 = fetchElement(u_dataTexture, idx + 1.0, arg);\n        vec4 col2 = fetchElement(u_dataTexture, idx + 2.0, arg);\n        vec4 col3 = fetchElement(u_dataTexture, idx + 3.0, arg);\n\n        mat4 val = mat4(\n          col0.x, col0.y, col0.z, col0.w,\n          col1.x, col1.y, col1.z, col1.w,\n          col2.x, col2.y, col2.z, col2.w,\n          col3.x, col3.y, col3.z, col3.w\n          );\n        ";break;case g.a.Mat3:v+="\n        vec4 col1 = fetchElement(u_dataTexture, idx + 1.0, arg);\n        vec4 col2 = fetchElement(u_dataTexture, idx + 2.0, arg);\n        mat3 val = mat3(\n          col0.x, col0.y, col0.z,\n          col0.w, col1.x, col1.y,\n          col1.z, col1.w, col2.x\n          );\n        ";break;default:v+=""}return d||(v+="\n      return val;\n    }\n  "),v}__isLoaded(e){if(null==e.mesh)return!1;if(e.mesh.variationVBOUid!==o.a.InvalidCGAPIResourceUid){const t=e.mesh.getPrimitiveNumber();let a=0;for(let n=0;n<t;n++){null!=e.mesh.getPrimitiveAt(n).vertexHandles&&a++}return t===a}return!1}$load(e){if(this.__isLoaded(e))return;if(N.__currentComponentSIDs=N.__globalDataRepository.getValue(c.a.CurrentComponentSIDs,0),null==e.mesh)return void i.a.alertNoMeshSet(e);this.setupShaderProgram(e);const t=e.mesh.getPrimitiveNumber();for(let a=0;a<t;a++){e.mesh.getPrimitiveAt(a).create3DAPIVertexData()}e.mesh.updateVariationVBO()}$prerender(e,t,a){if(t._readyForRendering)return;if(null==e.mesh)return void i.a.alertNoMeshSet(e);if(e.mesh.isInstanceMesh())return void(t._readyForRendering=!0);const n=e.mesh.getPrimitiveNumber();for(let t=0;t<n;t++){const a=e.mesh.getPrimitiveAt(t);this.__webglResourceRepository.setVertexDataToPipeline({vaoHandle:e.mesh.getVaoUids(t),iboHandle:a.vertexHandles.iboHandle,vboHandles:a.vertexHandles.vboHandles},a,e.mesh.variationVBOUid)}t._readyForRendering=!0}__createAndUpdateDataTexture(){const e=_.a.getInstance(),t=e.getBuffer(b.a.GPUInstanceData);if(this.__dataTextureUid!==o.a.InvalidCGAPIResourceUid){const e=new Float32Array(t.getArrayBuffer().slice(0,t.takenSizeInByte)),a=t.takenSizeInByte;a/_.a.bufferWidthLength/4/4>_.a.bufferHeightLength&&console.warn("The buffer size exceeds the size of the data texture."),this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,e,{level:0,xoffset:0,yoffset:0,width:_.a.bufferWidthLength,height:Math.min(a/_.a.bufferWidthLength/4/4,_.a.bufferHeightLength),format:u.a.RGBA,type:m.a.Float})}else{const a=e.getBuffer(b.a.GPUVertexData);let n=0;(t.takenSizeInByte+a.takenSizeInByte)/4/4<_.a.bufferWidthLength*_.a.bufferHeightLength&&(n=_.a.bufferWidthLength*_.a.bufferHeightLength*4*4-t.takenSizeInByte+a.takenSizeInByte);const r=v.a.concatArrayBuffers([t.getArrayBuffer(),a.getArrayBuffer()],[t.takenSizeInByte,a.takenSizeInByte],n),i=new Float32Array(r);r.byteLength/_.a.bufferWidthLength/4/4>_.a.bufferHeightLength&&console.warn("The buffer size exceeds the size of the data texture."),this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:p.a.RGBA32F,width:_.a.bufferWidthLength,height:_.a.bufferHeightLength,border:0,format:u.a.RGBA,type:m.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:u.a.RGBA,width:_.a.bufferWidthLength,height:_.a.bufferHeightLength,border:0,format:u.a.RGBA,type:m.a.Float,magFilter:p.a.Nearest,minFilter:p.a.Nearest,wrapS:p.a.Repeat,wrapT:p.a.Repeat,generateMipmap:!1,anisotropy:!1})}}common_$prerender(){this.__createAndUpdateDataTexture();const e=l.a.getInstance();this.__lightComponents=e.getComponentsWithType(d.a)}attachGPUData(e){const t=e.material,a=this.__webglResourceRepository.currentWebGLContextWrapper,n=a.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);a.bindTexture2D(0,r);const i=this.__webglResourceRepository.getWebGLResource(t._shaderProgramUid);var o=n.getUniformLocation(i,"u_dataTexture");n.uniform1i(o,0)}attachGPUDataInner(e,t){this.__webglResourceRepository.bindTexture2D(0,this.__dataTextureUid);var a=e.getUniformLocation(t,"u_dataTexture");e.uniform1i(a,0)}attatchShaderProgram(e){const t=e._shaderProgramUid;if(t!==this.__lastShader){const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),a=this.__webglResourceRepository.getWebGLResource(t);e.useProgram(a),this.__lastShader=t}}attachVertexData(e,t,a,n){}attachVertexDataInner(e,t,a,n,r){const i=t.vertexHandles,o=this.__webglResourceRepository.getWebGLResource(e.getVaoUids(a)),s=n.getRawContext();if(null!=o)n.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(i,t,e.variationVBOUid);const a=this.__webglResourceRepository.getWebGLResource(i.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,a)}}static getInstance(){return this.__instance||(this.__instance=new N),this.__instance}__setupMaterial(e,t){e.setParameter(c.a.LightNumber,this.__lightComponents.length);for(let t=0;t<this.__lightComponents.length&&!(t>=h.a.maxLightNumberInShader);t++){const a=this.__lightComponents[t],n=a.entity.getSceneGraph().worldPosition,r=a.direction,i=a.intensity;e.setParameter(c.a.LightPosition,new B.b(n.x,n.y,n.z,a.type.index),t),e.setParameter(c.a.LightDirection,new B.b(r.x,r.y,r.z,0),t),e.setParameter(c.a.LightIntensity,new B.b(i.x,i.y,i.z,0),t)}}__setCamera(e){let t=e.cameraComponent;null==t&&(t=l.a.getInstance().getComponent(s.a,s.a.main)),t&&t.setValuesToGlobalDataRepository()}__setCurrentComponentSIDsForEachRenderPass(e){let t=e.cameraComponent;null==t&&(t=l.a.getInstance().getComponent(s.a,s.a.main)),N.__currentComponentSIDs.v[H.a.CameraComponentTID]=t?t.componentSID:-1}__setCurrentComponentSIDsForEachEntity(e,t,a){const n=a.getSkeletal();if(n){let e=0;n.componentSID<h.a.maxSkeletonNumber&&(e=n.componentSID),N.__currentComponentSIDs.v[H.a.SkeletalComponentTID]=e}else N.__currentComponentSIDs.v[H.a.SkeletalComponentTID]=-1}__setCurrentComponentSIDsForEachPrimitive(e,t,a,n){N.__currentComponentSIDs.v[0]=a.materialSID,e.uniform1fv(N.__shaderProgram.currentComponentSIDs,N.__currentComponentSIDs.v)}common_$render(e,t,a,n,r,i){const o=this.__webglResourceRepository.currentWebGLContextWrapper,s=o.getRawContext();this.__setCamera(r),this.__setCurrentComponentSIDsForEachRenderPass(r);for(let a=0;a<e.length;a++){const n=e[a];if(n===F.a.invalidComponentSID)break;const i=t[n];if(null==i)break;const c=i.mesh;if(!c||!c.isOriginalMesh())continue;W.startDepthMasking(a,s,r);const l=i.entity;this.__setCurrentComponentSIDsForEachEntity(s,r,l);const d=l.getMeshRenderer(),h=c.getPrimitiveNumber();let u=!1;for(let e=0;e<h;e++){const t=c.getPrimitiveAt(e),a=r.getAppropriateMaterial(t,t.material);if(a.isEmptyMaterial())continue;const n=a._shaderProgramUid;if(-1!==n){if(this.attachVertexDataInner(c,t,e,o,c.variationVBOUid),n!==this.__lastShader){const e=this.__webglResourceRepository.getWebGLResource(n);s.useProgram(e),s.uniform1i(e.dataTexture,7),this.__setupMaterial(a,r),N.__shaderProgram=e,u=!0}u&&this.__webglResourceRepository.bindTexture2D(7,this.__dataTextureUid),this.__setCurrentComponentSIDsForEachPrimitive(s,r,a,l),W.setCullAndBlendSettings(a,r,s),a.setParemetersForGPU({material:a,shaderProgram:N.__shaderProgram,firstTime:u,args:{glw:o,entity:l,worldMatrix:l.getSceneGraph().worldMatrixInner,normalMatrix:l.getSceneGraph().normalMatrixInner,lightComponents:this.__lightComponents,renderPass:r,primitive:t,diffuseCube:d.diffuseCubeMap,specularCube:d.specularCubeMap}}),t.indicesAccessor?o.drawElementsInstanced(t.primitiveMode.index,t.indicesAccessor.elementCount,t.indicesAccessor.componentType.index,0,c.instanceCountIncludeOriginal):o.drawArraysInstanced(t.primitiveMode.index,0,t.getVertexCountAsVerticesBased(),c.instanceCountIncludeOriginal),this.__lastShader=n}}}return this.__lastRenderPassTickCount=i,!1}$render(e,t,a,n,r,i,o,s,c){const l=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();W.endDepthMasking(e,l,i)}}N.__globalDataRepository=y.a.getInstance();var $=function(e){return e.index===n.a.FastestWebGL1.index?N.getInstance():(e.index===n.a.UniformWebGL1.index||(e.index,n.a.UniformWebGL2.index),D.getInstance())},k=a(43),z=a(75);const O=Object.freeze({getRenderingStrategy:$,GLSLShader:k.a,WebGLContextWrapper:z.a,WebGLResourceRepository:r.a,WebGLStrategyUniform:D});t.default=O;window.RnWebGL=O}}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.4-mod branch: master';
