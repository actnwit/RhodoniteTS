(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{61:function(e,t,i){"use strict";i.r(t);var r=i(40),a=i(21),n=i(23),o=i(22),s=i(16),c=i(5),_=i(14),u=i(7),l=i(10),h=i(49),d=i(38),g=i(51);class m extends h.a{constructor(){super(),this.vertexShaderBody=`\n\nvoid main ()\n{\n  mat4 worldMatrix = getMatrix(a_instanceID);\n  mat4 viewMatrix = getViewMatrix(a_instanceID);\n  mat4 projectionMatrix = getProjectionMatrix(a_instanceID);\n  mat3 normalMatrix = getNormalMatrix(a_instanceID);\n\n  v_position_inWorld = worldMatrix * vec4(a_position, 1.0);\n\n  gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n  v_color = a_color;\n  v_normal_inWorld = normalMatrix * a_normal;\n  v_texcoord = a_texcoord;\n\n  // Skeletal\n  ${this.processSkinningIfNeed}\n\n//  v_color = vec3(u_boneMatrices[int(a_joint.x)][1].xyz);\n}\n  `}static getInstance(){return this.__instance||(this.__instance=new m),this.__instance}get vertexShaderVariableDefinitions(){const e=this.glsl_versionText,t=this.glsl_vertex_in,i=this.glsl_vertex_out;return`${e}\nprecision highp float;\n${t} vec3 a_position;\n${t} vec3 a_color;\n${t} vec3 a_normal;\n${t} float a_instanceID;\n${t} vec2 a_texcoord;\n${t} vec4 a_joint;\n${t} vec4 a_weight;\n${i} vec3 v_color;\n${i} vec3 v_normal_inWorld;\n${i} vec4 v_position_inWorld;\n${i} vec2 v_texcoord;\nuniform mat4 u_boneMatrices[100];\n\n${this.toNormalMatrix}\n\n${this.getSkinMatrix}\n\n`}get fragmentShaderSimple(){const e=this.glsl_versionText,t=this.glsl_fragment_in,i=this.glsl_rt0,r=this.glsl_fragColor,a=this.glsl_texture;return`${e}\nprecision highp float;\n\nstruct Material {\n  vec4 baseColorFactor;\n};\nuniform sampler2D u_baseColorTexture;\nuniform Material u_material;\n\nstruct Light {\n  vec4 lightPosition;\n  vec4 lightDirection;\n  vec4 lightIntensity;\n};\nuniform Light u_lights[${d.a.maxLightNumberInShader}];\nuniform int u_lightNumber;\n\n${t} vec3 v_color;\n${t} vec3 v_normal_inWorld;\n${t} vec4 v_position_inWorld;\n${t} vec2 v_texcoord;\n${i}\nvoid main ()\n{\n\n  // Normal\n  vec3 normal_inWorld = normalize(v_normal_inWorld);\n\n  // baseColor\n  vec3 color = vec3(0.0, 0.0, 0.0);\n  if (v_color != color && u_material.baseColorFactor.rgb != color) {\n    color = v_color * u_material.baseColorFactor.rgb;\n  } else if (v_color == color) {\n    color = u_material.baseColorFactor.rgb;\n  } else if (u_material.baseColorFactor.rgb == color) {\n    color = v_color;\n  } else {\n    color = vec3(1.0, 1.0, 1.0);\n  }\n  //color = v_color;\n\n  // baseColorTexture\n  vec4 textureColor = ${a}(u_baseColorTexture, v_texcoord);\n  if (textureColor.r > 0.05) {\n    color *= textureColor.rgb;\n  }\n\n  // Lighting\n  if (length(v_normal_inWorld) > 0.02) {\n    vec3 diffuse = vec3(0.0, 0.0, 0.0);\n    for (int i = 0; i < ${d.a.maxLightNumberInShader}; i++) {\n      if (i >= u_lightNumber) {\n        break;\n      }\n\n      vec3 lightDirection = u_lights[i].lightDirection.xyz;\n      float lightType = u_lights[i].lightPosition.w;\n      float spotCosCutoff = u_lights[i].lightDirection.w;\n      float spotExponent = u_lights[i].lightIntensity.w;\n\n      if (0.75 < lightType) { // is pointlight or spotlight\n        lightDirection = normalize(u_lights[i].lightPosition.xyz - v_position_inWorld.xyz);\n      }\n      float spotEffect = 1.0;\n      if (lightType > 1.75) { // is spotlight\n        spotEffect = dot(u_lights[i].lightDirection.xyz, lightDirection);\n        if (spotEffect > spotCosCutoff) {\n          spotEffect = pow(spotEffect, spotExponent);\n        } else {\n          spotEffect = 0.0;\n        }\n      }\n\n      vec3 incidentLight = spotEffect * u_lights[i].lightIntensity.xyz;\n//      incidentLight *= M_PI;\n\n      diffuse += 1.0 * max(0.0, dot(normal_inWorld, lightDirection)) * incidentLight;\n    }\n\n    color *= diffuse;\n  }\n\n  rt0 = vec4(color, 1.0);\n  //rt0 = vec4(u_lightNumber, 0.0, 0.0, 1.0);\n\n\n  ${r}\n}\n`}get fragmentShader(){return this.fragmentShaderSimple}}m.materialElement=g.a.ClassicShading,m.attributeNames=["a_position","a_color","a_normal","a_texcoord","a_joint","a_weight","a_instanceID"],m.attributeSemantics=[l.a.Position,l.a.Color0,l.a.Normal,l.a.Texcoord0,l.a.Joints0,l.a.Weights0,l.a.Instance];class p{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__uboUid=_.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=_.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_UBO="layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(e){if(this.__shaderProgramUid!==_.a.InvalidCGAPIResourceUid)return;const t=m.getInstance();let i=t.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_UBO+t.vertexShaderBody,r=t.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:i,fragmentShaderStr:r,attributeNames:m.attributeNames,attributeSemantics:m.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:u.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let i=0;i<t;i++){const t=e.getPrimitiveAt(i),r=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[i]=r,p.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,r)}}$prerender(e,t){if(this.__isVAOSet)return;const i=e.getPrimitiveNumber();for(let r=0;r<i;r++){const i=e.getPrimitiveAt(r);this.__vertexHandles[r]=p.__vertexHandleOfPrimitiveObjectUids.get(i.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[r],i,t)}this.__isVAOSet=!0}common_$prerender(){const e=n.a.getInstance().getBuffer(c.a.GPUInstanceData);new Float32Array(e.getArrayBuffer());this.__uboUid===_.a.InvalidCGAPIResourceUid?(this.__uboUid=this.__webglResourceRepository.createUniformBuffer(s.a.getAccessor("worldMatrix",s.a).dataViewOfBufferView),this.__webglResourceRepository.bindUniformBufferBase(0,this.__uboUid)):this.__webglResourceRepository.updateUniformBuffer(this.__uboUid,s.a.getAccessor("worldMatrix",s.a).dataViewOfBufferView)}attachGPUData(){this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"matrix",0)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(i)}attachVertexData(e,t,i,r){const a=this.__vertexHandles[e],n=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=i.getRawContext();if(null!=n)i.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,r);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new p),this.__instance}common_$render(e,t){const i=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();i.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,u.a.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,u.a.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!0}}p.__vertexHandleOfPrimitiveObjectUids=new Map;var f=i(32),x=i(39),b=i(1),R=i(26),y=i(35),v=i(18),U=i(44),w=i(2),T=i(19);class P{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__instanceDataTextureUid=_.a.InvalidCGAPIResourceUid,this.__vertexDataTextureUid=_.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=_.a.InvalidCGAPIResourceUid,this.__primitiveHeaderUboUid=_.a.InvalidCGAPIResourceUid,this.__indexCountToSubtractUboUid=_.a.InvalidCGAPIResourceUid,this.__entitiesUidUboUid=_.a.InvalidCGAPIResourceUid,this.__primitiveUidUboUid=_.a.InvalidCGAPIResourceUid,this.__isVertexReady=!1}get __transformFeedbackShaderText(){m.getInstance().glsl_vertex_in,m.getInstance().glsl_texture;return`#version 300 es\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    void main(){\n      int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n      int entityUidMinusOne = 0;\n      int primitiveUid = 0;\n      for (int i=0; i<=indexOfVertices; i++) {\n        for (int j=0; j<1024; j++) {\n          int value = u_indexCountsToSubtract.counts[j/4][j%4];\n          int result = int(step(float(value), float(i)));\n          if (result > 0) {\n            entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n            primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n          } else {\n            break;\n          }\n        }\n      }\n\n      ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n      int primIndicesByteOffset = indicesMeta.x;\n      int primIndicesComponentSizeInByte = indicesMeta.y;\n      int primIndicesLength = indicesMeta.z;\n\n      int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n      // get Indices\n      int texelLength = ${n.a.bufferWidthLength};\n      vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n      int index = int(indexVec4[idx%4]);\n\n      // get Positions\n      ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n      int primPositionsByteOffset = indicesData.x;\n      idx = primPositionsByteOffset/4 + index;\n      vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n      position = posVec4;\n    }\n`}get __transformFeedbackFragmentShaderText(){return"#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    "}setupShaderProgram(e){if(this.__shaderProgramUid!==_.a.InvalidCGAPIResourceUid)return;let t=this.__transformFeedbackShaderText,i=this.__transformFeedbackFragmentShaderText;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:i,attributeNames:m.attributeNames,attributeSemantics:m.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:u.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}$load(e){if(this.__isVertexReady)return;this.setupShaderProgram(e);const t=n.a.getInstance().getBuffer(c.a.CPUGeneric),i=t.takeBufferView({byteLengthToNeed:12,byteStride:4,isAoS:!1}).takeAccessor({compositionType:w.a.Scalar,componentType:b.a.UnsingedInt,count:3}),r=t.takeBufferView({byteLengthToNeed:48,byteStride:16,isAoS:!1}).takeAccessor({compositionType:w.a.Vec4,componentType:b.a.Float,count:3}),a=i.getTypedArray();a[0]=0,a[1]=1,a[2]=2;const o=U.a.createPrimitive({indices:a,attributeCompositionTypes:[r.compositionType],attributeSemantics:[l.a.Position],attributes:[r.getTypedArray()],primitiveMode:T.a.Triangles,material:void 0});this.__vertexHandle=this.__webglResourceRepository.createVertexDataResources(o),this.__isVertexReady=!0}$prerender(e,t){}__setupUBOPrimitiveHeaderData(){const e=n.a.getInstance().getBuffer(c.a.UBOGeneric),t=new Int32Array(e.getArrayBuffer());this.__primitiveHeaderUboUid===_.a.InvalidCGAPIResourceUid&&(this.__primitiveHeaderUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(3,this.__primitiveHeaderUboUid))}__setupGPUInstanceMetaData(){if(this.__primitiveUidUboUid!==_.a.InvalidCGAPIResourceUid)return;const e=y.a.getInstance()._getEntities(),t=new Int32Array(e.length),i=new Int32Array(e.length),r=new Int32Array(e.length);let a=0;e.forEach((e,n)=>{const o=e.getComponent(v.a);if(o){i[n]=o.getPrimitiveAt(0).primitiveUid,t[n]=e.entityUID;const s=o.getPrimitiveAt(0).indicesAccessor.elementCount;r[n]=a+s,a+=s}}),this.__indexCountToSubtractUboUid=this.__webglResourceRepository.createUniformBuffer(r),this.__webglResourceRepository.bindUniformBufferBase(0,this.__indexCountToSubtractUboUid),this.__entitiesUidUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(1,this.__entitiesUidUboUid),this.__primitiveUidUboUid=this.__webglResourceRepository.createUniformBuffer(i),this.__webglResourceRepository.bindUniformBufferBase(2,this.__primitiveUidUboUid)}__setupGPUInstanceData(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(f.a.TextureHalfFloat))&&(e=!0);const t=n.a.getInstance().getBuffer(c.a.GPUInstanceData),i=new Float32Array(t.getArrayBuffer());let r;if(e){r=new Uint16Array(i.length);let e=t.byteSizeInUse/4;e/=2;for(let t=0;t<e;t++)r[t]=o.a.toHalfFloat(i[t])}this.__instanceDataTextureUid===_.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:R.a.RGBA16F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.HalfFloat,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:R.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:b.a.Float}):this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,r,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:b.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:b.a.Float}))}__setupGPUVertexData(){if(this.__vertexDataTextureUid!==_.a.InvalidCGAPIResourceUid)return;const e=n.a.getInstance().getBuffer(c.a.GPUVertexData),t=new Float32Array(e.getArrayBuffer());this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:R.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1})}common_$prerender(){this.__setupUBOPrimitiveHeaderData(),this.__setupGPUInstanceMetaData(),this.__setupGPUInstanceData(),this.__setupGPUVertexData()}attachGPUData(){{const t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,i);const r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var e=t.getUniformLocation(r,"u_instanceDataTexture");t.uniform1i(e,0)}{const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,i);const r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var t=e.getUniformLocation(r,"u_vertexDataTexture");e.uniform1i(t,1)}this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"indexCountsToSubtract",0),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"entityUids",1),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveUids",2),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveHeader",3)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(i)}attachVertexData(e,t,i,r){}static getInstance(){return this.__instance||(this.__instance=new P),this.__instance}common_$render(e,t){const i=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();i.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,u.a.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,u.a.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!0}}class L{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.__dataTextureUid=_.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=_.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1}get vertexShaderMethodDefinitions_dataTexture(){const e=m.getInstance().glsl_texture;return`\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${e}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${e}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = instanceId;\n    float powWidthVal = ${n.a.bufferWidthLength}.0;\n    float powHeightVal = ${n.a.bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index * 4.0 + 0.0, arg);\n   vec4 col1 = fetchElement(u_dataTexture, index * 4.0 + 1.0, arg);\n   vec4 col2 = fetchElement(u_dataTexture, index * 4.0 + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `}setupShaderProgram(e){if(this.__shaderProgramUid!==_.a.InvalidCGAPIResourceUid)return;const t=m.getInstance();let i=t.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_dataTexture+t.vertexShaderBody,r=t.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:i,fragmentShaderStr:r,attributeNames:m.attributeNames,attributeSemantics:m.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:u.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.ProjectionMatrix,isPlural:!1,isSystem:!0}])}__isLoaded(e){return null!=this.__vertexHandles[e]}$load(e){if(this.__isLoaded(0))return;this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let i=0;i<t;i++){const t=e.getPrimitiveAt(i),r=this.__webglResourceRepository.createVertexDataResources(t);this.__vertexHandles[i]=r,L.__vertexHandleOfPrimitiveObjectUids.set(t.objectUid,r)}}$prerender(e,t){if(this.__isVAOSet)return;const i=e.getPrimitiveNumber();for(let r=0;r<i;r++){const i=e.getPrimitiveAt(r);this.__vertexHandles[r]=L.__vertexHandleOfPrimitiveObjectUids.get(i.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[r],i,t)}this.__isVAOSet=!0}common_$prerender(){let e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(f.a.TextureHalfFloat))&&(e=!0);const t=n.a.getInstance().getBuffer(c.a.GPUInstanceData),i=new Float32Array(t.getArrayBuffer());let r;if(e){r=new Uint16Array(i.length);let e=t.byteSizeInUse/4;e/=2;for(let t=0;t<e;t++)r[t]=o.a.toHalfFloat(i[t])}this.__dataTextureUid===_.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:R.a.RGBA16F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(r,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.HalfFloat,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:R.a.RGBA32F,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:x.a.RGBA,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.Repeat,wrapT:R.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:b.a.Float}):this.__webglResourceRepository.updateTexture(this.__dataTextureUid,r,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:b.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:n.a.bufferWidthLength,height:n.a.bufferHeightLength,format:x.a.RGBA,type:b.a.Float}))}attachGPUData(){const e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),t=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);e.bindTexture(e.TEXTURE_2D,t);const i=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var r=e.getUniformLocation(i,"u_dataTexture");e.uniform1i(r,0)}attatchShaderProgram(){const e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),i=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(i)}attachVertexData(e,t,i,r){const a=this.__vertexHandles[e],n=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=i.getRawContext();if(null!=n)i.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,r);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}static getInstance(){return this.__instance||(this.__instance=new L),this.__instance}common_$render(e,t){const i=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();i.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,u.a.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,u.a.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!0}}L.__vertexHandleOfPrimitiveObjectUids=new Map;var S=i(31),I=i(48),G=i(28),W=i(9),C=i(52),M=i(34),D=i(43),A=function(e,t,i,r){return new(i||(i=Promise))(function(a,n){function o(e){try{c(r.next(e))}catch(e){n(e)}}function s(e){try{c(r.throw(e))}catch(e){n(e)}}function c(e){e.done?a(e.value):new i(function(t){t(e.value)}).then(o,s)}c((r=r.apply(e,t||[])).next())})};class B{constructor(){this.__webglResourceRepository=a.a.getInstance(),this.vertexShaderMethodDefinitions_uniform="\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}setupShaderProgram(e){const t=e.getPrimitiveNumber();for(let i=0;i<t;i++){const t=e.getPrimitiveAt(i).material;if(t){if(t._shaderProgramUid!==_.a.InvalidCGAPIResourceUid)return;t.createProgram(this.vertexShaderMethodDefinitions_uniform);const e=[{semantic:u.a.WorldMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.ViewMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.ProjectionMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.NormalMatrix,isPlural:!1,isSystem:!0},{semantic:u.a.BoneMatrix,isPlural:!0,isSystem:!0},{semantic:u.a.LightNumber,isPlural:!1,isSystem:!0},{semantic:u.a.ViewPosition,isPlural:!1,isSystem:!0},{semantic:u.a.DiffuseEnvTexture,compositionType:w.a.TextureCube,componentType:b.a.Int,isPlural:!1,isSystem:!0},{semantic:u.a.SpecularEnvTexture,compositionType:w.a.TextureCube,componentType:b.a.Int,isPlural:!1,isSystem:!0},{semantic:u.a.IBLParameter,compositionType:w.a.Vec3,componentType:b.a.Float,isPlural:!1,isSystem:!0},{semantic:u.a.BrdfLutTexture,compositionType:w.a.Texture2D,componentType:b.a.Int,isPlural:!1,isSystem:!0}],i=[];for(let e=0;e<d.a.maxLightNumberInShader;e++)i.push({semantic:u.a.LightPosition,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0}),i.push({semantic:u.a.LightDirection,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0}),i.push({semantic:u.a.LightIntensity,isPlural:!1,prefix:`lights[${e}].`,index:e,isSystem:!0});this.__webglResourceRepository.setupUniformLocations(t._shaderProgramUid,e.concat(i)),t.setUniformLocations(t._shaderProgramUid)}}}$load(e){return A(this,void 0,void 0,function*(){this.setupShaderProgram(e);const t=e.getPrimitiveNumber();for(let i=0;i<t;i++){const t=e.getPrimitiveAt(i),r=this.__webglResourceRepository.createVertexDataResources(t);B.__vertexHandleOfPrimitiveObjectUids.set(t.primitiveUid,r)}this.__dummyWhiteTextureUid=this.__webglResourceRepository.createDummyTexture(),this.__dummyBlackTextureUid=this.__webglResourceRepository.createDummyTexture("rgba(0, 0, 0, 1)"),this.__dummyBlackCubeTextureUid=this.__webglResourceRepository.createDummyCubeTexture();const i=M.a.getInstance().getModule("pbr").pbrCookTorranceBrdfLutDataUrl;this.__pbrCookTorranceBrdfLutDataUrlUid=yield this.__webglResourceRepository.createTextureFromDataUri(i,{level:0,internalFormat:x.a.RGBA,border:0,format:x.a.RGBA,type:b.a.Float,magFilter:R.a.Nearest,minFilter:R.a.Nearest,wrapS:R.a.ClampToEdge,wrapT:R.a.ClampToEdge,generateMipmap:!1,anisotropy:!1})})}$prerender(e,t){const i=[],r=e.getPrimitiveNumber();for(let a=0;a<r;a++){const r=e.getPrimitiveAt(a);i[a]=B.__vertexHandleOfPrimitiveObjectUids.get(r.primitiveUid),i[a].setComplete,this.__webglResourceRepository.setVertexDataToPipeline(i[a],r,t),i[a].setComplete=!0}}common_$prerender(){const e=W.a.getInstance();this.__lightComponents=e.getComponentsWithType(C.a)}attachGPUData(){}attatchShaderProgram(){}attachVertexData(e,t,i,r){const a=B.__vertexHandleOfPrimitiveObjectUids.get(t.primitiveUid),n=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),o=i.getRawContext();if(null!=n)i.bindVertexArray(n);else{this.__webglResourceRepository.setVertexDataToPipeline(a,t,r);const e=this.__webglResourceRepository.getWebGLResource(a.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,e)}}dettachVertexData(e){const t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)}static getInstance(){return this.__instance||(this.__instance=new B),this.__instance}common_$render(e,t){return!1}$render(e,t,i,r,a,n){const o=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();const s=o.getRawContext();e.componentSID===D.a.firstOpaqueSid&&s.disable(s.BLEND),e.componentSID==D.a.firstTranparentSid&&(s.enable(s.BLEND),s.blendFuncSeparate(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE));const c=e.getPrimitiveNumber();for(let l=0;l<c;l++){const c=e.getPrimitiveAt(l);this.attachVertexData(l,c,o,_.a.InvalidCGAPIResourceUid);const h=c.material,g=this.__webglResourceRepository.getWebGLResource(h._shaderProgramUid),m=h._shaderProgramUid;s.useProgram(g),this.__webglResourceRepository.setUniformValue(m,u.a.WorldMatrix,!0,4,"f",!0,{x:S.a.transpose(t).v}),this.__webglResourceRepository.setUniformValue(m,u.a.NormalMatrix,!0,3,"f",!0,{x:i.v});const p=W.a.getInstance().getComponent(G.a,G.a.main);this.__webglResourceRepository.setUniformValue(m,u.a.ViewMatrix,!0,4,"f",!0,{x:p.viewMatrix.v}),this.__webglResourceRepository.setUniformValue(m,u.a.ProjectionMatrix,!0,4,"f",!0,{x:p.projectionMatrix.v});const f=p.worldPosition;this.__webglResourceRepository.setUniformValue(m,u.a.ViewPosition,!1,3,"f",!0,{x:f.v}),this.__webglResourceRepository.setUniformValue(m,u.a.LightNumber,!1,1,"i",!1,{x:this.__lightComponents.length});for(let e=0;e<this.__lightComponents.length&&!(e>=d.a.maxLightNumberInShader);e++){const t=this.__lightComponents[e],i=t.entity.getSceneGraph().worldPosition,r=t.direction,a=t.intensity;this.__webglResourceRepository.setUniformValue(m,u.a.LightPosition,!1,4,"f",!1,{x:i.x,y:i.y,z:i.z,w:t.type.index},e),this.__webglResourceRepository.setUniformValue(m,u.a.LightDirection,!1,4,"f",!1,{x:r.x,y:r.y,z:r.z,w:0},e),this.__webglResourceRepository.setUniformValue(m,u.a.LightIntensity,!1,4,"f",!1,{x:a.x,y:a.y,z:a.z,w:0},e)}const x=r.getComponent(I.a);if(x){const e=x.jointMatrices;this.__webglResourceRepository.setUniformValue(m,u.a.BoneMatrix,!0,4,"f",!0,{x:e})}if(this.__webglResourceRepository.setUniformValue(m,u.a.DiffuseEnvTexture,!1,1,"i",!1,{x:6}),s.activeTexture(s.TEXTURE6),a&&a.isTextureReady){const e=this.__webglResourceRepository.getWebGLResource(a.cubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}if(this.__webglResourceRepository.setUniformValue(m,u.a.SpecularEnvTexture,!1,1,"i",!1,{x:7}),s.activeTexture(s.TEXTURE7),n&&n.isTextureReady){const e=this.__webglResourceRepository.getWebGLResource(n.cubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,e)}let b=1;if(n&&(b=n.mipmapLevelNumber),this.__webglResourceRepository.setUniformValue(m,u.a.IBLParameter,!1,3,"f",!1,{x:b,y:1,z:1}),this.__webglResourceRepository.setUniformValue(m,u.a.BrdfLutTexture,!1,1,"i",!1,{x:5}),s.activeTexture(s.TEXTURE5),null!=this.__pbrCookTorranceBrdfLutDataUrlUid){const e=this.__webglResourceRepository.getWebGLResource(this.__pbrCookTorranceBrdfLutDataUrlUid);s.bindTexture(s.TEXTURE_2D,e)}else{const e=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,e)}h&&h.setUniformValues(m),s.drawElements(c.primitiveMode.index,c.indicesAccessor.elementCount,c.indicesAccessor.componentType.index,0),s.bindTexture(s.TEXTURE_2D,null),this.dettachVertexData(o)}s.useProgram(null)}}B.__vertexHandleOfPrimitiveObjectUids=new Map;var V=function(e){return e.index===r.a.UBOWebGL2.index?p.getInstance():e.index===r.a.TransformFeedbackWebGL2.index?P.getInstance():e.index===r.a.UniformWebGL1.index?B.getInstance():L.getInstance()},F=i(50);const E=Object.freeze({getRenderingStrategy:V,GLSLShader:h.a,WebGLContextWrapper:F.a,WebGLResourceRepository:a.a,WebGLStrategyDataTexture:L,WebGLStrategyTransformFeedback:P,WebGLStrategyUBO:p,WebGLStrategyUniform:B});t.default=E}}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.1-220-gaf15-mod branch: feature/gltf2-exporter';
