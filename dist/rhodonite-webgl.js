(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["webgl"],{

/***/ "./src/foundation/definitions/ShaderSemantics.ts":
/*!*******************************************************!*\
  !*** ./src/foundation/definitions/ShaderSemantics.ts ***!
  \*******************************************************/
/*! exports provided: ShaderSemantics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderSemantics\", function() { return ShaderSemantics; });\n/* harmony import */ var _misc_EnumIO__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/EnumIO */ \"./src/foundation/misc/EnumIO.ts\");\n\nclass ShaderSemanticsClass extends _misc_EnumIO__WEBPACK_IMPORTED_MODULE_0__[\"EnumClass\"] {\n    constructor({ index, singularStr, pluralStr }) {\n        super({ index: index, str: singularStr });\n        this.pluralStr = pluralStr;\n    }\n    get singularStr() {\n        return this.str;\n    }\n}\nconst WorldMatrix = new ShaderSemanticsClass({ index: 0, singularStr: 'worldMatrix', pluralStr: 'worldMatrices' });\nconst ViewMatrix = new ShaderSemanticsClass({ index: 1, singularStr: 'viewMatrix', pluralStr: 'viewMatrices' });\nconst ProjectionMatrix = new ShaderSemanticsClass({ index: 2, singularStr: 'projectionMatrix', pluralStr: 'projectionMatrices' });\nconst NormalMatrix = new ShaderSemanticsClass({ index: 3, singularStr: 'normalMatrix', pluralStr: 'normalMatrices' });\nconst BoneMatrix = new ShaderSemanticsClass({ index: 4, singularStr: 'boneMatrix', pluralStr: 'boneMatrices' });\nconst BaseColorFactor = new ShaderSemanticsClass({ index: 5, singularStr: 'baseColorFactor', pluralStr: 'baseColorFactors' });\nconst BaseColorTexture = new ShaderSemanticsClass({ index: 6, singularStr: 'baseColorTexture', pluralStr: 'baseColorTextures' });\nconst NormalTexture = new ShaderSemanticsClass({ index: 7, singularStr: 'normalTexture', pluralStr: 'normalTextures' });\nconst MetallicRoughnessTexture = new ShaderSemanticsClass({ index: 8, singularStr: 'metallicRoughnessTexture', pluralStr: 'metallicRoughnessTextures' });\nconst OcclusionTexture = new ShaderSemanticsClass({ index: 9, singularStr: 'occlusionTexture', pluralStr: 'occlusionTextures' });\nconst typeList = [WorldMatrix, ViewMatrix, ProjectionMatrix, NormalMatrix, BoneMatrix, BaseColorFactor, BaseColorTexture,\n    NormalTexture, MetallicRoughnessTexture, OcclusionTexture];\nfunction from(index) {\n    return Object(_misc_EnumIO__WEBPACK_IMPORTED_MODULE_0__[\"_from\"])({ typeList, index });\n}\nconst ShaderSemantics = Object.freeze({ WorldMatrix, ViewMatrix, ProjectionMatrix, NormalMatrix, BoneMatrix, BaseColorFactor, BaseColorTexture,\n    NormalTexture, MetallicRoughnessTexture, OcclusionTexture });\n\n\n//# sourceURL=webpack:///./src/foundation/definitions/ShaderSemantics.ts?");

/***/ }),

/***/ "./src/webgl/GLSLShader.ts":
/*!*********************************!*\
  !*** ./src/webgl/GLSLShader.ts ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return GLSLShader; });\n/* harmony import */ var _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebGLResourceRepository */ \"./src/webgl/WebGLResourceRepository.ts\");\n\nclass GLSLShader {\n    constructor() {\n        this.__webglResourceRepository = _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n    }\n    get glsl_rt0() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return 'layout(location = 0) out vec4 rt0;\\n';\n        }\n        else {\n            return 'vec4 rt0;\\n';\n        }\n    }\n    get glsl_fragColor() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return '';\n        }\n        else {\n            return 'gl_FragColor = rt0;\\n';\n        }\n    }\n    get glsl_vertex_in() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return 'in';\n        }\n        else {\n            return 'attribute';\n        }\n    }\n    get glsl_fragment_in() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return 'in';\n        }\n        else {\n            return 'varying';\n        }\n    }\n    get glsl_vertex_out() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return 'out';\n        }\n        else {\n            return 'varying';\n        }\n    }\n    get glsl_texture() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return 'texture';\n        }\n        else {\n            return 'texture2D';\n        }\n    }\n    get glsl_versionText() {\n        const repo = this.__webglResourceRepository;\n        if (repo.currentWebGLContextWrapper.isWebGL2) {\n            return '#version 300 es\\n';\n        }\n        else {\n            return '';\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/webgl/GLSLShader.ts?");

/***/ }),

/***/ "./src/webgl/PBRShader.ts":
/*!********************************!*\
  !*** ./src/webgl/PBRShader.ts ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return PBRShader; });\n/* harmony import */ var _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../foundation/definitions/VertexAttribute */ \"./src/foundation/definitions/VertexAttribute.ts\");\n/* harmony import */ var _GLSLShader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GLSLShader */ \"./src/webgl/GLSLShader.ts\");\n\n\nclass PBRShader extends _GLSLShader__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super();\n        this.vertexShaderBody = `\n\nvoid main ()\n{\n  mat4 worldMatrix = getMatrix(a_instanceID);\n  mat4 viewMatrix = getViewMatrix(a_instanceID);\n  mat4 projectionMatrix = getProjectionMatrix(a_instanceID);\n  mat3 normalMatrix = getNormalMatrix(a_instanceID);\n\n  v_position_inWorld = worldMatrix * vec4(a_position, 1.0);\n\n  gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n  v_color = a_color;\n  v_normal_inWorld = normalMatrix * a_normal;\n  v_texcoord = a_texcoord;\n\n  // Light\n  vec3 lightPosition = vec3(10000.0, 100000.0, 100000.0);\n  v_lightDirection = normalize(lightPosition - v_position_inWorld.xyz);\n\n  // Skeletal\n\n  if (length(a_weight.xyz) > 0.01) {\n    mat4 skinMat = a_weight.x * u_boneMatrices[int(a_joint.x)];\n    skinMat += a_weight.y * u_boneMatrices[int(a_joint.y)];\n    skinMat += a_weight.z * u_boneMatrices[int(a_joint.z)];\n    skinMat += a_weight.w * u_boneMatrices[int(a_joint.w)];\n    v_position_inWorld = skinMat * vec4(a_position, 1.0);\n    normalMatrix = toNormalMatrix(skinMat);\n    v_normal_inWorld = normalize(normalMatrix * a_normal);\n    gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n  }\n\n//  v_color = vec3(u_boneMatrices[int(a_joint.x)][1].xyz);\n}\n  `;\n    }\n    static getInstance() {\n        if (!this.__instance) {\n            this.__instance = new PBRShader();\n        }\n        return this.__instance;\n    }\n    get vertexShaderVariableDefinitions() {\n        const _version = this.glsl_versionText;\n        const _in = this.glsl_vertex_in;\n        const _out = this.glsl_vertex_out;\n        return `${_version}\nprecision highp float;\n${_in} vec3 a_position;\n${_in} vec3 a_color;\n${_in} vec3 a_normal;\n${_in} float a_instanceID;\n${_in} vec2 a_texcoord;\n${_in} vec4 a_joint;\n${_in} vec4 a_weight;\n${_out} vec3 v_color;\n${_out} vec3 v_normal_inWorld;\n${_out} vec4 v_position_inWorld;\n${_out} vec3 v_lightDirection;\n${_out} vec2 v_texcoord;\nuniform mat4 u_boneMatrices[100];\n\nmat3 toNormalMatrix(mat4 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n  a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n  a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n  a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3];\n\n  float b00 = a00 * a11 - a01 * a10,\n  b01 = a00 * a12 - a02 * a10,\n  b02 = a00 * a13 - a03 * a10,\n  b03 = a01 * a12 - a02 * a11,\n  b04 = a01 * a13 - a03 * a11,\n  b05 = a02 * a13 - a03 * a12,\n  b06 = a20 * a31 - a21 * a30,\n  b07 = a20 * a32 - a22 * a30,\n  b08 = a20 * a33 - a23 * a30,\n  b09 = a21 * a32 - a22 * a31,\n  b10 = a21 * a33 - a23 * a31,\n  b11 = a22 * a33 - a23 * a32;\n\n  float determinantVal = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  return mat3(\n    a11 * b11 - a12 * b10 + a13 * b09, a12 * b08 - a10 * b11 - a13 * b07, a10 * b10 - a11 * b08 + a13 * b06,\n    a02 * b10 - a01 * b11 - a03 * b09, a00 * b11 - a02 * b08 + a03 * b07, a01 * b08 - a00 * b10 - a03 * b06,\n    a31 * b05 - a32 * b04 + a33 * b03, a32 * b02 - a30 * b05 - a33 * b01, a30 * b04 - a31 * b02 + a33 * b00) / determinantVal;\n}\n\n`;\n    }\n    ;\n    get fragmentShaderSimple() {\n        const _version = this.glsl_versionText;\n        const _in = this.glsl_fragment_in;\n        const _def_rt0 = this.glsl_rt0;\n        const _def_fragColor = this.glsl_fragColor;\n        const _texture = this.glsl_texture;\n        return `${_version}\nprecision highp float;\n\nstruct Material {\n  vec4 baseColorFactor;\n  sampler2D baseColorTexture;\n};\n\nuniform Material u_material;\n\n${_in} vec3 v_color;\n${_in} vec3 v_normal_inWorld;\n${_in} vec4 v_position_inWorld;\n${_in} vec3 v_lightDirection;\n${_in} vec2 v_texcoord;\n${_def_rt0}\nvoid main ()\n{\n  // Light\n  //vec3 lightPosition = vec3(0.0, 0.0, 50000.0);\n\n  // Normal\n  vec3 normal_inWorld = normalize(v_normal_inWorld);\n\n  // baseColor\n  vec3 color = vec3(0.0, 0.0, 0.0);\n  if (v_color != color && u_material.baseColorFactor.rgb != color) {\n    color = v_color * u_material.baseColorFactor.rgb;\n  } else if (v_color == color) {\n    color = u_material.baseColorFactor.rgb;\n  } else if (u_material.baseColorFactor.rgb == color) {\n    color = v_color;\n  } else {\n    color = vec3(1.0, 1.0, 1.0);\n  }\n  //color = v_color;\n\n  // baseColorTexture\n  vec4 textureColor = ${_texture}(u_material.baseColorTexture, v_texcoord);\n  if (textureColor.r > 0.05) {\n    color *= textureColor.rgb;\n  }\n\n  // Lighting\n  if (length(v_normal_inWorld) > 0.02) {\n    vec3 lightDirection = normalize(v_lightDirection);\n    float diffuse = 1.0 * max(0.0, dot(normal_inWorld, lightDirection));\n    color *= diffuse;\n  }\n\n  rt0 = vec4(color, 1.0);\n\n\n  ${_def_fragColor}\n}\n`;\n    }\n    get fragmentShader() {\n        return this.fragmentShaderSimple;\n    }\n}\nPBRShader.attributeNames = ['a_position', 'a_color', 'a_normal', 'a_texcoord', 'a_joint', 'a_weight', 'a_instanceID'];\nPBRShader.attributeSemantics = [_foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Position, _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Color0,\n    _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Normal, _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Texcoord0, _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Joints0, _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Weights0, _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_0__[\"VertexAttribute\"].Instance];\n\n\n//# sourceURL=webpack:///./src/webgl/PBRShader.ts?");

/***/ }),

/***/ "./src/webgl/WebGLContextWrapper.ts":
/*!******************************************!*\
  !*** ./src/webgl/WebGLContextWrapper.ts ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLContextWrapper; });\n/* harmony import */ var _WebGLExtension__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebGLExtension */ \"./src/webgl/WebGLExtension.ts\");\n\nclass WebGLContextWrapper {\n    constructor(gl, width, height) {\n        this.__webglVersion = 1;\n        this.width = 0;\n        this.height = 0;\n        this.__extensions = new Map();\n        this.__gl = gl;\n        this.width = width;\n        this.height = height;\n        if (this.__gl.constructor.name === 'WebGL2RenderingContext') {\n            this.__webglVersion = 2;\n        }\n        else {\n            this.webgl1ExtVAO = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].VertexArrayObject);\n            this.webgl1ExtIA = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].InstancedArrays);\n            this.webgl1ExtTF = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].TextureFloat);\n            this.webgl1ExtTHF = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].TextureHalfFloat);\n            this.webgl1ExtTFL = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].TextureFloatLinear);\n            this.webgl1ExtTHFL = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].TextureHalfFloatLinear);\n            this.webgl1ExtTFA = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].TextureFilterAnisotropic);\n            this.webgl1ExtEIUI = this.__getExtension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_0__[\"WebGLExtension\"].ElementIndexUint);\n        }\n    }\n    getRawContext() {\n        return this.__gl;\n    }\n    isSupportWebGL1Extension(webGLExtension) {\n        if (this.__getExtension(webGLExtension)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    get isWebGL2() {\n        if (this.__webglVersion === 2) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    createVertexArray() {\n        if (this.isWebGL2) {\n            return this.__gl.createVertexArray();\n        }\n        else {\n            if (this.webgl1ExtVAO != null) {\n                return this.webgl1ExtVAO.createVertexArrayOES();\n            }\n        }\n    }\n    bindVertexArray(vao) {\n        if (this.isWebGL2) {\n            this.__gl.bindVertexArray(vao);\n        }\n        else {\n            if (this.webgl1ExtVAO != null) {\n                this.webgl1ExtVAO.bindVertexArrayOES(vao);\n            }\n        }\n    }\n    vertexAttribDivisor(index, divisor) {\n        if (this.isWebGL2) {\n            this.__gl.vertexAttribDivisor(index, divisor);\n        }\n        else {\n            this.webgl1ExtIA.vertexAttribDivisorANGLE(index, divisor);\n        }\n    }\n    drawElementsInstanced(primitiveMode, indexCount, type, offset, instanceCount) {\n        if (this.isWebGL2) {\n            this.__gl.drawElementsInstanced(primitiveMode, indexCount, type, offset, instanceCount);\n        }\n        else {\n            this.webgl1ExtIA.drawElementsInstancedANGLE(primitiveMode, indexCount, type, offset, instanceCount);\n        }\n    }\n    __getExtension(extension) {\n        const gl = this.__gl;\n        if (!this.__extensions.has(extension)) {\n            const extObj = gl.getExtension(extension.toString());\n            if (extObj == null) {\n                const text = `The library does not support this environment because the ${extension.toString()} is not available`;\n                if (console.error != null) {\n                    console.error(text);\n                }\n                else {\n                    console.log(text);\n                }\n            }\n            this.__extensions.set(extension, extObj);\n            return extObj;\n        }\n        return this.__extensions.get(extension);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLContextWrapper.ts?");

/***/ }),

/***/ "./src/webgl/WebGLExtension.ts":
/*!*************************************!*\
  !*** ./src/webgl/WebGLExtension.ts ***!
  \*************************************/
/*! exports provided: WebGLExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLExtension\", function() { return WebGLExtension; });\n/* harmony import */ var _foundation_misc_EnumIO__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../foundation/misc/EnumIO */ \"./src/foundation/misc/EnumIO.ts\");\n\nclass WebGLExtensionClass extends _foundation_misc_EnumIO__WEBPACK_IMPORTED_MODULE_0__[\"EnumClass\"] {\n    constructor({ index, str }) {\n        super({ index, str });\n    }\n}\nconst VertexArrayObject = new WebGLExtensionClass({ index: 1, str: 'OES_vertex_array_object' });\nconst TextureFloat = new WebGLExtensionClass({ index: 2, str: 'OES_texture_float' });\nconst TextureHalfFloat = new WebGLExtensionClass({ index: 3, str: 'OES_texture_half_float' });\nconst TextureFloatLinear = new WebGLExtensionClass({ index: 4, str: 'OES_texture_float_linear' });\nconst TextureHalfFloatLinear = new WebGLExtensionClass({ index: 5, str: 'OES_texture_half_float_linear' });\nconst InstancedArrays = new WebGLExtensionClass({ index: 6, str: 'ANGLE_instanced_arrays' });\nconst TextureFilterAnisotropic = new WebGLExtensionClass({ index: 7, str: 'EXT_texture_filter_anisotropic' });\nconst ElementIndexUint = new WebGLExtensionClass({ index: 8, str: 'OES_element_index_uint' });\nconst typeList = [VertexArrayObject, TextureFloat, TextureHalfFloat, TextureFloatLinear, TextureHalfFloatLinear, InstancedArrays, TextureFilterAnisotropic, ElementIndexUint];\nfunction from({ index }) {\n    return Object(_foundation_misc_EnumIO__WEBPACK_IMPORTED_MODULE_0__[\"_from\"])({ typeList, index });\n}\nconst WebGLExtension = Object.freeze({ VertexArrayObject, TextureFloat, TextureHalfFloat, TextureFloatLinear, TextureHalfFloatLinear, InstancedArrays, TextureFilterAnisotropic, ElementIndexUint });\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLExtension.ts?");

/***/ }),

/***/ "./src/webgl/WebGLResourceRepository.ts":
/*!**********************************************!*\
  !*** ./src/webgl/WebGLResourceRepository.ts ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLResourceRepository; });\n/* harmony import */ var _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../foundation/renderer/CGAPIResourceRepository */ \"./src/foundation/renderer/CGAPIResourceRepository.ts\");\n/* harmony import */ var _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../foundation/definitions/VertexAttribute */ \"./src/foundation/definitions/VertexAttribute.ts\");\n/* harmony import */ var _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../foundation/definitions/TextureParameter */ \"./src/foundation/definitions/TextureParameter.ts\");\n/* harmony import */ var _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../foundation/definitions/PixelFormat */ \"./src/foundation/definitions/PixelFormat.ts\");\n/* harmony import */ var _foundation_definitions_CompositionType__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../foundation/definitions/CompositionType */ \"./src/foundation/definitions/CompositionType.ts\");\n/* harmony import */ var _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../foundation/definitions/ComponentType */ \"./src/foundation/definitions/ComponentType.ts\");\n/* harmony import */ var _WebGLContextWrapper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WebGLContextWrapper */ \"./src/webgl/WebGLContextWrapper.ts\");\n/* harmony import */ var _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../foundation/math/MathUtil */ \"./src/foundation/math/MathUtil.ts\");\n\n\n\n\n\n\n\n\nclass WebGLResourceRepository extends _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.__webglContexts = new Map();\n        this.__resourceCounter = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].InvalidCGAPIResourceUid;\n        this.__webglResources = new Map();\n    }\n    static getInstance() {\n        if (!this.__instance) {\n            this.__instance = new (WebGLResourceRepository)();\n        }\n        return this.__instance;\n    }\n    addWebGLContext(gl, width, height, asCurrent) {\n        const glw = new _WebGLContextWrapper__WEBPACK_IMPORTED_MODULE_6__[\"default\"](gl, width, height);\n        this.__webglContexts.set('default', glw);\n        if (asCurrent) {\n            this.__glw = glw;\n        }\n    }\n    get currentWebGLContextWrapper() {\n        return this.__glw;\n    }\n    getResourceNumber() {\n        return ++this.__resourceCounter;\n    }\n    getWebGLResource(WebGLResourceHandle) {\n        return this.__webglResources.get(WebGLResourceHandle);\n    }\n    createIndexBuffer(accsessor) {\n        const gl = this.__glw.getRawContext();\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const ibo = gl.createBuffer();\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, ibo);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n        //    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, accsessor.bufferView.buffer.getArrayBuffer(), gl.STATIC_DRAW);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, accsessor.getTypedArray(), gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        return resourceHandle;\n    }\n    createVertexBuffer(accessor) {\n        const gl = this.__glw.getRawContext();\n        ;\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const vbo = gl.createBuffer();\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, vbo);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        gl.bufferData(gl.ARRAY_BUFFER, accessor.bufferView.getUint8Array(), gl.STATIC_DRAW);\n        //    gl.bufferData(gl.ARRAY_BUFFER, accessor.getTypedArray(), gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        return resourceHandle;\n    }\n    createVertexArray() {\n        const gl = this.__glw;\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const vao = this.__glw.createVertexArray();\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, vao);\n        return resourceHandle;\n    }\n    createVertexDataResources(primitive) {\n        const gl = this.__glw.getRawContext();\n        const vaoHandle = this.createVertexArray();\n        let iboHandle;\n        if (primitive.hasIndices()) {\n            iboHandle = this.createIndexBuffer(primitive.indicesAccessor);\n        }\n        const vboHandles = [];\n        primitive.attributeAccessors.forEach(accessor => {\n            const vboHandle = this.createVertexBuffer(accessor);\n            vboHandles.push(vboHandle);\n        });\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        return { vaoHandle: vaoHandle, iboHandle: iboHandle, vboHandles: vboHandles, setComplete: false };\n    }\n    createShaderProgram({ vertexShaderStr, fragmentShaderStr, attributeNames, attributeSemantics }) {\n        const gl = this.__glw.getRawContext();\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertexShaderStr);\n        gl.compileShader(vertexShader);\n        this.__checkShaderCompileStatus(vertexShader, vertexShaderStr);\n        const shaderProgram = gl.createProgram();\n        gl.attachShader(shaderProgram, vertexShader);\n        let fragmentShader;\n        if (fragmentShaderStr != null) {\n            fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n            gl.shaderSource(fragmentShader, fragmentShaderStr);\n            gl.compileShader(fragmentShader);\n            this.__checkShaderCompileStatus(fragmentShader, fragmentShaderStr);\n            gl.attachShader(shaderProgram, fragmentShader);\n        }\n        attributeNames.forEach((attributeName, i) => {\n            gl.bindAttribLocation(shaderProgram, attributeSemantics[i].getAttributeSlot(), attributeName);\n        });\n        gl.linkProgram(shaderProgram);\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, shaderProgram);\n        this.__checkShaderProgramLinkStatus(shaderProgram);\n        gl.deleteShader(vertexShader);\n        if (fragmentShaderStr != null) {\n            gl.deleteShader(fragmentShader);\n        }\n        return resourceHandle;\n    }\n    __addLineNumber(shaderString) {\n        let shaderTextLines = shaderString.split(/\\r\\n|\\r|\\n/);\n        let shaderTextWithLineNumber = '';\n        for (let i = 0; i < shaderTextLines.length; i++) {\n            let lineIndex = i + 1;\n            let splitter = ' : ';\n            if (lineIndex < 10) {\n                splitter = '  : ';\n            }\n            else if (lineIndex >= 100) {\n                splitter = ': ';\n            }\n            shaderTextWithLineNumber += lineIndex + splitter + shaderTextLines[i] + '\\n';\n        }\n        return shaderTextWithLineNumber;\n    }\n    __checkShaderCompileStatus(shader, shaderText) {\n        const gl = this.__glw.getRawContext();\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            console.log(this.__addLineNumber(shaderText));\n            throw new Error('An error occurred compiling the shaders:' + gl.getShaderInfoLog(shader));\n        }\n    }\n    __checkShaderProgramLinkStatus(shaderProgram) {\n        const gl = this.__glw.getRawContext();\n        // If creating the shader program failed, alert\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n            throw new Error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n        }\n    }\n    setupUniformLocations(shaderProgramUid, dataArray) {\n        const gl = this.__glw.getRawContext();\n        const shaderProgram = this.getWebGLResource(shaderProgramUid);\n        for (let data of dataArray) {\n            let prefix = '';\n            if (data.prefix != null) {\n                prefix = data.prefix;\n            }\n            if (data.isPlural) {\n                shaderProgram[data.semantic.str] = gl.getUniformLocation(shaderProgram, 'u_' + prefix + data.semantic.pluralStr);\n            }\n            else {\n                shaderProgram[data.semantic.str] = gl.getUniformLocation(shaderProgram, 'u_' + prefix + data.semantic.singularStr);\n            }\n        }\n    }\n    setUniformValue(shaderProgramUid, uniformSemantic, isMatrix, componentNumber, componentType, isVector, x, y, z, w) {\n        const gl = this.__glw.getRawContext();\n        const shaderProgram = this.getWebGLResource(shaderProgramUid);\n        let funcName = 'uniform';\n        if (isMatrix) {\n            funcName = 'uniformMatrix';\n        }\n        funcName += componentNumber;\n        funcName += componentType;\n        if (isVector) {\n            funcName += 'v';\n        }\n        const args = [];\n        args.push(shaderProgram[uniformSemantic.str]);\n        if (isMatrix) {\n            args.push(false);\n        }\n        args.push(x);\n        if (y != null) {\n            args.push(y);\n        }\n        if (z != null) {\n            args.push(z);\n        }\n        if (w != null) {\n            args.push(w);\n        }\n        gl[funcName].apply(gl, args);\n    }\n    setVertexDataToPipeline({ vaoHandle, iboHandle, vboHandles }, primitive, instanceIDBufferUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].InvalidCGAPIResourceUid) {\n        const gl = this.__glw.getRawContext();\n        const vao = this.getWebGLResource(vaoHandle);\n        // VAO bind\n        this.__glw.bindVertexArray(vao);\n        // IBO bind\n        if (iboHandle != null) {\n            const ibo = this.getWebGLResource(iboHandle);\n            if (ibo != null) {\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n            }\n            else {\n                throw new Error('Nothing Element Array Buffer!');\n            }\n        }\n        // bind vertex attributes to VBO's\n        vboHandles.forEach((vboHandle, i) => {\n            const vbo = this.getWebGLResource(vboHandle);\n            if (vbo != null) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n            }\n            else {\n                throw new Error('Nothing Element Array Buffer at index ' + i);\n            }\n            gl.enableVertexAttribArray(primitive.attributeSemantics[i].getAttributeSlot());\n            gl.vertexAttribPointer(primitive.attributeSemantics[i].getAttributeSlot(), primitive.attributeCompositionTypes[i].getNumberOfComponents(), primitive.attributeComponentTypes[i].index, false, primitive.attributeAccessors[i].byteStride, primitive.attributeAccessors[i].byteOffsetInBufferView);\n        });\n        /// for InstanceIDBuffer\n        if (instanceIDBufferUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].InvalidCGAPIResourceUid) {\n            const instanceIDBuffer = this.getWebGLResource(instanceIDBufferUid);\n            if (instanceIDBuffer != null) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, instanceIDBuffer);\n            }\n            else {\n                throw new Error('Nothing Element Array Buffer at index');\n            }\n            gl.enableVertexAttribArray(_foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_1__[\"VertexAttribute\"].Instance.getAttributeSlot());\n            gl.vertexAttribPointer(_foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_1__[\"VertexAttribute\"].Instance.getAttributeSlot(), _foundation_definitions_CompositionType__WEBPACK_IMPORTED_MODULE_4__[\"CompositionType\"].Scalar.getNumberOfComponents(), _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float.index, false, 0, 0);\n            this.__glw.vertexAttribDivisor(_foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_1__[\"VertexAttribute\"].Instance.getAttributeSlot(), 1);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n        this.__glw.bindVertexArray(null);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n    createTexture(data, { level, internalFormat, width, height, border, format, type, magFilter, minFilter, wrapS, wrapT, generateMipmap, anisotropy }) {\n        const gl = this.__glw.getRawContext();\n        ;\n        const dataTexture = gl.createTexture();\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, dataTexture);\n        gl.bindTexture(gl.TEXTURE_2D, dataTexture);\n        if (data instanceof HTMLImageElement || data instanceof HTMLCanvasElement) {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat.index, format.index, type.index, data);\n        }\n        else {\n            gl.texImage2D(gl.TEXTURE_2D, level, internalFormat.index, width, height, border, format.index, type.index, data);\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS.index);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT.index);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter.index);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter.index);\n        if (_foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_7__[\"MathUtil\"].isPowerOfTwoTexture(width, height)) {\n            if (anisotropy && this.__glw.webgl1ExtTFA) {\n                gl.texParameteri(gl.TEXTURE_2D, this.__glw.webgl1ExtTFA.TEXTURE_MAX_ANISOTROPY_EXT, 4);\n            }\n            if (generateMipmap) {\n                gl.generateMipmap(gl.TEXTURE_2D);\n            }\n        }\n        return resourceHandle;\n    }\n    updateTexture(textureUid, typedArray, { level, width, height, format, type }) {\n        const gl = this.__glw.getRawContext();\n        ;\n        const texture = this.getWebGLResource(textureUid);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texSubImage2D(gl.TEXTURE_2D, level, 0, 0, width, height, format.index, type.index, typedArray);\n    }\n    deleteTexture(textureHandle) {\n        const texture = this.getWebGLResource(textureHandle);\n        const gl = this.__glw.getRawContext();\n        if (texture != null) {\n            gl.deleteTexture(texture);\n            this.__webglResources.delete(textureHandle);\n        }\n    }\n    createDummyTexture() {\n        var canvas = document.createElement(\"canvas\");\n        canvas.width = 1;\n        canvas.height = 1;\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = \"rgba(255,255,255,1)\";\n        ctx.fillRect(0, 0, 1, 1);\n        return this.createTexture(canvas, {\n            level: 0, internalFormat: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_3__[\"PixelFormat\"].RGBA, width: 1, height: 1,\n            border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_3__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_2__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_2__[\"TextureParameter\"].Nearest,\n            wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_2__[\"TextureParameter\"].ClampToEdge, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_2__[\"TextureParameter\"].ClampToEdge, generateMipmap: false, anisotropy: false\n        });\n    }\n    createUniformBuffer(bufferView) {\n        const gl = this.__glw.getRawContext();\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const ubo = gl.createBuffer();\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, ubo);\n        gl.bindBuffer(gl.UNIFORM_BUFFER, ubo);\n        gl.bufferData(gl.UNIFORM_BUFFER, bufferView, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n        return resourceHandle;\n    }\n    updateUniformBuffer(uboUid, bufferView) {\n        const gl = this.__glw.getRawContext();\n        const ubo = this.getWebGLResource(uboUid);\n        gl.bindBuffer(gl.UNIFORM_BUFFER, ubo);\n        void gl.bufferSubData(gl.UNIFORM_BUFFER, 0, bufferView, 0);\n        gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n    }\n    bindUniformBlock(shaderProgramUid, blockName, blockIndex) {\n        const gl = this.__glw.getRawContext();\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const shaderProgram = this.getWebGLResource(shaderProgramUid);\n        const block = gl.getUniformBlockIndex(shaderProgram, blockName);\n        gl.uniformBlockBinding(shaderProgram, block, blockIndex);\n    }\n    bindUniformBufferBase(blockIndex, uboUid) {\n        const gl = this.__glw.getRawContext();\n        if (gl == null) {\n            throw new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const ubo = this.getWebGLResource(uboUid);\n        gl.bindBufferBase(gl.UNIFORM_BUFFER, blockIndex, ubo);\n    }\n    deleteUniformBuffer(uboUid) {\n        const gl = this.__glw.getRawContext();\n        if (gl == null) {\n            new Error(\"No WebGLRenderingContext set as Default.\");\n        }\n        const ubo = this.getWebGLResource(uboUid);\n        gl.deleteBuffer(ubo);\n    }\n    createTransformFeedback() {\n        const gl = this.__glw.getRawContext();\n        var transformFeedback = gl.createTransformFeedback();\n        const resourceHandle = this.getResourceNumber();\n        this.__webglResources.set(resourceHandle, transformFeedback);\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedback);\n        return resourceHandle;\n    }\n    deleteTransformFeedback(transformFeedbackUid) {\n        const gl = this.__glw.getRawContext();\n        const transformFeedback = this.getWebGLResource(transformFeedbackUid);\n        gl.deleteTransformFeedback(transformFeedback);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLResourceRepository.ts?");

/***/ }),

/***/ "./src/webgl/WebGLStrategyDataTexture.ts":
/*!***********************************************!*\
  !*** ./src/webgl/WebGLStrategyDataTexture.ts ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLStrategyDataTexture; });\n/* harmony import */ var _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebGLResourceRepository */ \"./src/webgl/WebGLResourceRepository.ts\");\n/* harmony import */ var _WebGLExtension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WebGLExtension */ \"./src/webgl/WebGLExtension.ts\");\n/* harmony import */ var _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../foundation/core/MemoryManager */ \"./src/foundation/core/MemoryManager.ts\");\n/* harmony import */ var _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../foundation/math/MathUtil */ \"./src/foundation/math/MathUtil.ts\");\n/* harmony import */ var _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../foundation/definitions/PixelFormat */ \"./src/foundation/definitions/PixelFormat.ts\");\n/* harmony import */ var _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../foundation/definitions/ComponentType */ \"./src/foundation/definitions/ComponentType.ts\");\n/* harmony import */ var _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../foundation/definitions/TextureParameter */ \"./src/foundation/definitions/TextureParameter.ts\");\n/* harmony import */ var _foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../foundation/definitions/BufferUse */ \"./src/foundation/definitions/BufferUse.ts\");\n/* harmony import */ var _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../foundation/renderer/CGAPIResourceRepository */ \"./src/foundation/renderer/CGAPIResourceRepository.ts\");\n/* harmony import */ var _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../foundation/definitions/ShaderSemantics */ \"./src/foundation/definitions/ShaderSemantics.ts\");\n/* harmony import */ var _PBRShader__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PBRShader */ \"./src/webgl/PBRShader.ts\");\n\n\n\n\n\n\n\n\n\n\n\nclass WebGLStrategyDataTexture {\n    constructor() {\n        this.__webglResourceRepository = _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n        this.__dataTextureUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_8__[\"default\"].InvalidCGAPIResourceUid;\n        this.__shaderProgramUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_8__[\"default\"].InvalidCGAPIResourceUid;\n        this.__vertexHandles = [];\n        this.__isVAOSet = false;\n    }\n    get vertexShaderMethodDefinitions_dataTexture() {\n        const _texture = _PBRShader__WEBPACK_IMPORTED_MODULE_10__[\"default\"].getInstance().glsl_texture;\n        return `\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return ${_texture}( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return ${_texture}( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = instanceId;\n    float powWidthVal = ${_foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength}.0;\n    float powHeightVal = ${_foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength}.0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index * 4.0 + 0.0, arg);\n   vec4 col1 = fetchElement(u_dataTexture, index * 4.0 + 1.0, arg);\n   vec4 col2 = fetchElement(u_dataTexture, index * 4.0 + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `;\n    }\n    setupShaderProgram() {\n        if (this.__shaderProgramUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_8__[\"default\"].InvalidCGAPIResourceUid) {\n            return;\n        }\n        // Shader Setup\n        const glslShader = _PBRShader__WEBPACK_IMPORTED_MODULE_10__[\"default\"].getInstance();\n        let vertexShader = glslShader.vertexShaderVariableDefinitions +\n            this.vertexShaderMethodDefinitions_dataTexture +\n            glslShader.vertexShaderBody;\n        let fragmentShader = glslShader.fragmentShader;\n        this.__shaderProgramUid = this.__webglResourceRepository.createShaderProgram({\n            vertexShaderStr: vertexShader,\n            fragmentShaderStr: fragmentShader,\n            attributeNames: _PBRShader__WEBPACK_IMPORTED_MODULE_10__[\"default\"].attributeNames,\n            attributeSemantics: _PBRShader__WEBPACK_IMPORTED_MODULE_10__[\"default\"].attributeSemantics\n        });\n        this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid, [\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_9__[\"ShaderSemantics\"].ViewMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_9__[\"ShaderSemantics\"].ProjectionMatrix, isPlural: false }\n        ]);\n    }\n    __isLoaded(index) {\n        if (this.__vertexHandles[index] != null) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    $load(meshComponent) {\n        if (this.__isLoaded(0)) {\n            return;\n        }\n        const primitiveNum = meshComponent.getPrimitiveNumber();\n        for (let i = 0; i < primitiveNum; i++) {\n            const primitive = meshComponent.getPrimitiveAt(i);\n            const vertexHandles = this.__webglResourceRepository.createVertexDataResources(primitive);\n            this.__vertexHandles[i] = vertexHandles;\n            WebGLStrategyDataTexture.__vertexHandleOfPrimitiveObjectUids.set(primitive.objectUid, vertexHandles);\n        }\n    }\n    $prerender(meshComponent, instanceIDBufferUid) {\n        if (this.__isVAOSet) {\n            return;\n        }\n        const primitiveNum = meshComponent.getPrimitiveNumber();\n        for (let i = 0; i < primitiveNum; i++) {\n            const primitive = meshComponent.getPrimitiveAt(i);\n            // if (this.__isLoaded(i) && this.__isVAOSet) {\n            this.__vertexHandles[i] = WebGLStrategyDataTexture.__vertexHandleOfPrimitiveObjectUids.get(primitive.objectUid);\n            //this.__vertexShaderProgramHandles[i] = MeshRendererComponent.__shaderProgramHandleOfPrimitiveObjectUids.get(primitive.objectUid)!;\n            //  continue;\n            // }\n            this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i], primitive, instanceIDBufferUid);\n        }\n        this.__isVAOSet = true;\n    }\n    common_$prerender() {\n        let isHalfFloatMode = false;\n        if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2 ||\n            this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_1__[\"WebGLExtension\"].TextureHalfFloat)) {\n            isHalfFloatMode = true;\n        }\n        const memoryManager = _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance();\n        const buffer = memoryManager.getBuffer(_foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_7__[\"BufferUse\"].GPUInstanceData);\n        const floatDataTextureBuffer = new Float32Array(buffer.getArrayBuffer());\n        let halfFloatDataTextureBuffer;\n        if (isHalfFloatMode) {\n            halfFloatDataTextureBuffer = new Uint16Array(floatDataTextureBuffer.length);\n            let convertLength = buffer.byteSizeInUse / 4; //components\n            convertLength /= 2; // bytes\n            for (let i = 0; i < convertLength; i++) {\n                halfFloatDataTextureBuffer[i] = _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_3__[\"MathUtil\"].toHalfFloat(floatDataTextureBuffer[i]);\n            }\n        }\n        if (this.__dataTextureUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_8__[\"default\"].InvalidCGAPIResourceUid) {\n            if (isHalfFloatMode) {\n                if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                    this.__webglResourceRepository.updateTexture(this.__dataTextureUid, floatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float\n                    });\n                }\n                else {\n                    this.__webglResourceRepository.updateTexture(this.__dataTextureUid, halfFloatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].HalfFloat\n                    });\n                }\n            }\n            else {\n                if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                    this.__webglResourceRepository.updateTexture(this.__dataTextureUid, floatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float\n                    });\n                }\n                else {\n                    this.__webglResourceRepository.updateTexture(this.__dataTextureUid, floatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float\n                    });\n                }\n            }\n            return;\n        }\n        if (isHalfFloatMode) {\n            if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                this.__dataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].RGBA16F, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n            else {\n                this.__dataTextureUid = this.__webglResourceRepository.createTexture(halfFloatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].HalfFloat, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n        }\n        else {\n            if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                this.__dataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].RGBA32F, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n            else {\n                this.__dataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n        }\n    }\n    ;\n    attachGPUData() {\n        const gl = this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();\n        const dataTexture = this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);\n        gl.bindTexture(gl.TEXTURE_2D, dataTexture);\n        const shaderProgram = this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);\n        var uniform_dataTexture = gl.getUniformLocation(shaderProgram, 'u_dataTexture');\n        gl.uniform1i(uniform_dataTexture, 0);\n    }\n    ;\n    attatchShaderProgram() {\n        const shaderProgramUid = this.__shaderProgramUid;\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        const gl = glw.getRawContext();\n        const shaderProgram = this.__webglResourceRepository.getWebGLResource(shaderProgramUid);\n        gl.useProgram(shaderProgram);\n    }\n    attachVertexData(i, primitive, glw, instanceIDBufferUid) {\n        const vaoHandles = this.__vertexHandles[i];\n        const vao = this.__webglResourceRepository.getWebGLResource(vaoHandles.vaoHandle);\n        const gl = glw.getRawContext();\n        if (vao != null) {\n            glw.bindVertexArray(vao);\n        }\n        else {\n            this.__webglResourceRepository.setVertexDataToPipeline(vaoHandles, primitive, instanceIDBufferUid);\n            const ibo = this.__webglResourceRepository.getWebGLResource(vaoHandles.iboHandle);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n        }\n    }\n    static getInstance() {\n        if (!this.__instance) {\n            this.__instance = new (WebGLStrategyDataTexture)();\n        }\n        return this.__instance;\n    }\n    common_$render(viewMatrix, projectionMatrix) {\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        this.attatchShaderProgram();\n        const gl = glw.getRawContext();\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_9__[\"ShaderSemantics\"].ViewMatrix, true, 4, 'f', true, viewMatrix.v);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_9__[\"ShaderSemantics\"].ProjectionMatrix, true, 4, 'f', true, projectionMatrix.v);\n        return true;\n    }\n}\nWebGLStrategyDataTexture.__vertexHandleOfPrimitiveObjectUids = new Map();\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLStrategyDataTexture.ts?");

/***/ }),

/***/ "./src/webgl/WebGLStrategyTransformFeedback.ts":
/*!*****************************************************!*\
  !*** ./src/webgl/WebGLStrategyTransformFeedback.ts ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLStrategyTransformFeedback; });\n/* harmony import */ var _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebGLResourceRepository */ \"./src/webgl/WebGLResourceRepository.ts\");\n/* harmony import */ var _WebGLExtension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WebGLExtension */ \"./src/webgl/WebGLExtension.ts\");\n/* harmony import */ var _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../foundation/core/MemoryManager */ \"./src/foundation/core/MemoryManager.ts\");\n/* harmony import */ var _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../foundation/math/MathUtil */ \"./src/foundation/math/MathUtil.ts\");\n/* harmony import */ var _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../foundation/definitions/PixelFormat */ \"./src/foundation/definitions/PixelFormat.ts\");\n/* harmony import */ var _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../foundation/definitions/ComponentType */ \"./src/foundation/definitions/ComponentType.ts\");\n/* harmony import */ var _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../foundation/definitions/TextureParameter */ \"./src/foundation/definitions/TextureParameter.ts\");\n/* harmony import */ var _foundation_core_EntityRepository__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../foundation/core/EntityRepository */ \"./src/foundation/core/EntityRepository.ts\");\n/* harmony import */ var _foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../foundation/definitions/BufferUse */ \"./src/foundation/definitions/BufferUse.ts\");\n/* harmony import */ var _foundation_components_MeshComponent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../foundation/components/MeshComponent */ \"./src/foundation/components/MeshComponent.ts\");\n/* harmony import */ var _foundation_geometry_Primitive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../foundation/geometry/Primitive */ \"./src/foundation/geometry/Primitive.ts\");\n/* harmony import */ var _foundation_definitions_CompositionType__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../foundation/definitions/CompositionType */ \"./src/foundation/definitions/CompositionType.ts\");\n/* harmony import */ var _foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../foundation/definitions/VertexAttribute */ \"./src/foundation/definitions/VertexAttribute.ts\");\n/* harmony import */ var _foundation_definitions_PrimitiveMode__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../foundation/definitions/PrimitiveMode */ \"./src/foundation/definitions/PrimitiveMode.ts\");\n/* harmony import */ var _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../foundation/renderer/CGAPIResourceRepository */ \"./src/foundation/renderer/CGAPIResourceRepository.ts\");\n/* harmony import */ var _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../foundation/definitions/ShaderSemantics */ \"./src/foundation/definitions/ShaderSemantics.ts\");\n/* harmony import */ var _PBRShader__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./PBRShader */ \"./src/webgl/PBRShader.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass WebGLStrategyTransformFeedback {\n    constructor() {\n        this.__webglResourceRepository = _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n        this.__instanceDataTextureUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__vertexDataTextureUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__shaderProgramUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__primitiveHeaderUboUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__indexCountToSubtractUboUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__entitiesUidUboUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__primitiveUidUboUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid;\n        this.__isVertexReady = false;\n    }\n    get __transformFeedbackShaderText() {\n        const _in = _PBRShader__WEBPACK_IMPORTED_MODULE_16__[\"default\"].getInstance().glsl_vertex_in;\n        const _texture = _PBRShader__WEBPACK_IMPORTED_MODULE_16__[\"default\"].getInstance().glsl_texture;\n        return `#version 300 es\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    void main(){\n      int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n      int entityUidMinusOne = 0;\n      int primitiveUid = 0;\n      for (int i=0; i<=indexOfVertices; i++) {\n        for (int j=0; j<1024; j++) {\n          int value = u_indexCountsToSubtract.counts[j/4][j%4];\n          int result = int(step(float(value), float(i)));\n          if (result > 0) {\n            entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n            primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n          } else {\n            break;\n          }\n        }\n      }\n\n      ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n      int primIndicesByteOffset = indicesMeta.x;\n      int primIndicesComponentSizeInByte = indicesMeta.y;\n      int primIndicesLength = indicesMeta.z;\n\n      int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n      // get Indices\n      int texelLength = ${_foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength};\n      vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n      int index = int(indexVec4[idx%4]);\n\n      // get Positions\n      ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n      int primPositionsByteOffset = indicesData.x;\n      idx = primPositionsByteOffset/4 + index;\n      vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n      position = posVec4;\n    }\n`;\n    }\n    get __transformFeedbackFragmentShaderText() {\n        return `#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    `;\n    }\n    setupShaderProgram() {\n        if (this.__shaderProgramUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid) {\n            return;\n        }\n        // Shader Setup\n        let vertexShader = this.__transformFeedbackShaderText;\n        let fragmentShader = this.__transformFeedbackFragmentShaderText;\n        this.__shaderProgramUid = this.__webglResourceRepository.createShaderProgram({\n            vertexShaderStr: vertexShader,\n            fragmentShaderStr: fragmentShader,\n            attributeNames: _PBRShader__WEBPACK_IMPORTED_MODULE_16__[\"default\"].attributeNames,\n            attributeSemantics: _PBRShader__WEBPACK_IMPORTED_MODULE_16__[\"default\"].attributeSemantics\n        });\n        this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid, [\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_15__[\"ShaderSemantics\"].ViewMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_15__[\"ShaderSemantics\"].ProjectionMatrix, isPlural: false }\n        ]);\n    }\n    $load(meshComponent) {\n        if (this.__isVertexReady) {\n            return;\n        }\n        const buffer = _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance().getBuffer(_foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_8__[\"BufferUse\"].CPUGeneric);\n        const indicesBufferView = buffer.takeBufferView({ byteLengthToNeed: 4 * 3, byteStride: 4, isAoS: false });\n        const indicesAccessor = indicesBufferView.takeAccessor({ compositionType: _foundation_definitions_CompositionType__WEBPACK_IMPORTED_MODULE_11__[\"CompositionType\"].Scalar, componentType: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].UnsingedInt, count: 3 });\n        const attributeBufferView = buffer.takeBufferView({ byteLengthToNeed: 16 * 3, byteStride: 16, isAoS: false });\n        const attributeAccessor = attributeBufferView.takeAccessor({ compositionType: _foundation_definitions_CompositionType__WEBPACK_IMPORTED_MODULE_11__[\"CompositionType\"].Vec4, componentType: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, count: 3 });\n        const indicesUint16Array = indicesAccessor.getTypedArray();\n        indicesUint16Array[0] = 0;\n        indicesUint16Array[1] = 1;\n        indicesUint16Array[2] = 2;\n        const primitive = _foundation_geometry_Primitive__WEBPACK_IMPORTED_MODULE_10__[\"default\"].createPrimitive({\n            indices: indicesUint16Array,\n            attributeCompositionTypes: [attributeAccessor.compositionType],\n            attributeSemantics: [_foundation_definitions_VertexAttribute__WEBPACK_IMPORTED_MODULE_12__[\"VertexAttribute\"].Position],\n            attributes: [attributeAccessor.getTypedArray()],\n            primitiveMode: _foundation_definitions_PrimitiveMode__WEBPACK_IMPORTED_MODULE_13__[\"PrimitiveMode\"].Triangles,\n            material: void 0\n        });\n        this.__vertexHandle = this.__webglResourceRepository.createVertexDataResources(primitive);\n        this.__isVertexReady = true;\n    }\n    $prerender(meshComponent, instanceIDBufferUid) {\n    }\n    __setupUBOPrimitiveHeaderData() {\n        const memoryManager = _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance();\n        const buffer = memoryManager.getBuffer(_foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_8__[\"BufferUse\"].UBOGeneric);\n        const floatDataTextureBuffer = new Int32Array(buffer.getArrayBuffer());\n        if (this.__primitiveHeaderUboUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid) {\n            //      this.__webglResourceRepository.updateUniformBuffer(this.__primitiveHeaderUboUid, floatDataTextureBuffer);\n            return;\n        }\n        this.__primitiveHeaderUboUid = this.__webglResourceRepository.createUniformBuffer(floatDataTextureBuffer);\n        this.__webglResourceRepository.bindUniformBufferBase(3, this.__primitiveHeaderUboUid);\n    }\n    __setupGPUInstanceMetaData() {\n        if (this.__primitiveUidUboUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid) {\n            return;\n        }\n        const entities = _foundation_core_EntityRepository__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getInstance()._getEntities();\n        const entityIds = new Int32Array(entities.length);\n        const primitiveIds = new Int32Array(entities.length);\n        const indexCountToSubtract = new Int32Array(entities.length);\n        let tmpSumIndexCount = 0;\n        entities.forEach((entity, i) => {\n            const meshComponent = entity.getComponent(_foundation_components_MeshComponent__WEBPACK_IMPORTED_MODULE_9__[\"default\"]);\n            if (meshComponent) {\n                primitiveIds[i] = meshComponent.getPrimitiveAt(0).primitiveUid;\n                entityIds[i] = entity.entityUID;\n                const indexCountOfPrimitive = meshComponent.getPrimitiveAt(0).indicesAccessor.elementCount;\n                indexCountToSubtract[i] = tmpSumIndexCount + indexCountOfPrimitive;\n                tmpSumIndexCount += indexCountOfPrimitive;\n            }\n        });\n        this.__indexCountToSubtractUboUid = this.__webglResourceRepository.createUniformBuffer(indexCountToSubtract);\n        this.__webglResourceRepository.bindUniformBufferBase(0, this.__indexCountToSubtractUboUid);\n        this.__entitiesUidUboUid = this.__webglResourceRepository.createUniformBuffer(entityIds);\n        this.__webglResourceRepository.bindUniformBufferBase(1, this.__entitiesUidUboUid);\n        this.__primitiveUidUboUid = this.__webglResourceRepository.createUniformBuffer(primitiveIds);\n        this.__webglResourceRepository.bindUniformBufferBase(2, this.__primitiveUidUboUid);\n    }\n    __setupGPUInstanceData() {\n        let isHalfFloatMode = false;\n        if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2 ||\n            this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(_WebGLExtension__WEBPACK_IMPORTED_MODULE_1__[\"WebGLExtension\"].TextureHalfFloat)) {\n            isHalfFloatMode = true;\n        }\n        const memoryManager = _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance();\n        const buffer = memoryManager.getBuffer(_foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_8__[\"BufferUse\"].GPUInstanceData);\n        const floatDataTextureBuffer = new Float32Array(buffer.getArrayBuffer());\n        let halfFloatDataTextureBuffer;\n        if (isHalfFloatMode) {\n            halfFloatDataTextureBuffer = new Uint16Array(floatDataTextureBuffer.length);\n            let convertLength = buffer.byteSizeInUse / 4; //components\n            convertLength /= 2; // bytes\n            for (let i = 0; i < convertLength; i++) {\n                halfFloatDataTextureBuffer[i] = _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_3__[\"MathUtil\"].toHalfFloat(floatDataTextureBuffer[i]);\n            }\n        }\n        if (this.__instanceDataTextureUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid) {\n            if (isHalfFloatMode) {\n                if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                    this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid, floatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float\n                    });\n                }\n                else {\n                    this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid, halfFloatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].HalfFloat\n                    });\n                }\n            }\n            else {\n                if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                    this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid, floatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float\n                    });\n                }\n                else {\n                    this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid, floatDataTextureBuffer, {\n                        level: 0, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                        format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float\n                    });\n                }\n            }\n            return;\n        }\n        if (isHalfFloatMode) {\n            if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                this.__instanceDataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].RGBA16F, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n            else {\n                this.__instanceDataTextureUid = this.__webglResourceRepository.createTexture(halfFloatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].HalfFloat, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n        }\n        else {\n            if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                this.__instanceDataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].RGBA32F, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n            else {\n                this.__instanceDataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                    level: 0, internalFormat: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                    border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                    wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n                });\n            }\n        }\n    }\n    __setupGPUVertexData() {\n        if (this.__vertexDataTextureUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_14__[\"default\"].InvalidCGAPIResourceUid) {\n            return;\n        }\n        const memoryManager = _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance();\n        const buffer = memoryManager.getBuffer(_foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_8__[\"BufferUse\"].GPUVertexData);\n        const floatDataTextureBuffer = new Float32Array(buffer.getArrayBuffer());\n        if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n            this.__vertexDataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                level: 0, internalFormat: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].RGBA32F, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n            });\n        }\n        else {\n            this.__vertexDataTextureUid = this.__webglResourceRepository.createTexture(floatDataTextureBuffer, {\n                level: 0, internalFormat: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, width: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferWidthLength, height: _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_2__[\"default\"].bufferHeightLength,\n                border: 0, format: _foundation_definitions_PixelFormat__WEBPACK_IMPORTED_MODULE_4__[\"PixelFormat\"].RGBA, type: _foundation_definitions_ComponentType__WEBPACK_IMPORTED_MODULE_5__[\"ComponentType\"].Float, magFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest, minFilter: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Nearest,\n                wrapS: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, wrapT: _foundation_definitions_TextureParameter__WEBPACK_IMPORTED_MODULE_6__[\"TextureParameter\"].Repeat, generateMipmap: false, anisotropy: false\n            });\n        }\n    }\n    common_$prerender() {\n        this.__setupUBOPrimitiveHeaderData();\n        this.__setupGPUInstanceMetaData();\n        this.__setupGPUInstanceData();\n        this.__setupGPUVertexData();\n    }\n    ;\n    attachGPUData() {\n        {\n            const gl = this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();\n            const dataTexture = this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, dataTexture);\n            const shaderProgram = this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);\n            var uniform_instanceDataTexture = gl.getUniformLocation(shaderProgram, 'u_instanceDataTexture');\n            gl.uniform1i(uniform_instanceDataTexture, 0);\n        }\n        {\n            const gl = this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext();\n            const dataTexture = this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, dataTexture);\n            const shaderProgram = this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);\n            var uniform_vertexDataTexture = gl.getUniformLocation(shaderProgram, 'u_vertexDataTexture');\n            gl.uniform1i(uniform_vertexDataTexture, 1);\n        }\n        this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid, 'indexCountsToSubtract', 0);\n        this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid, 'entityUids', 1);\n        this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid, 'primitiveUids', 2);\n        this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid, 'primitiveHeader', 3);\n    }\n    ;\n    attatchShaderProgram() {\n        const shaderProgramUid = this.__shaderProgramUid;\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        const gl = glw.getRawContext();\n        const shaderProgram = this.__webglResourceRepository.getWebGLResource(shaderProgramUid);\n        gl.useProgram(shaderProgram);\n    }\n    attachVertexData(i, primitive, glw, instanceIDBufferUid) {\n    }\n    static getInstance() {\n        if (!this.__instance) {\n            this.__instance = new WebGLStrategyTransformFeedback();\n        }\n        return this.__instance;\n    }\n    common_$render(viewMatrix, projectionMatrix) {\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        this.attatchShaderProgram();\n        const gl = glw.getRawContext();\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_15__[\"ShaderSemantics\"].ViewMatrix, true, 4, 'f', true, viewMatrix.v);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_15__[\"ShaderSemantics\"].ProjectionMatrix, true, 4, 'f', true, projectionMatrix.v);\n        return true;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLStrategyTransformFeedback.ts?");

/***/ }),

/***/ "./src/webgl/WebGLStrategyUBO.ts":
/*!***************************************!*\
  !*** ./src/webgl/WebGLStrategyUBO.ts ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLStrategyUBO; });\n/* harmony import */ var _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebGLResourceRepository */ \"./src/webgl/WebGLResourceRepository.ts\");\n/* harmony import */ var _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../foundation/core/MemoryManager */ \"./src/foundation/core/MemoryManager.ts\");\n/* harmony import */ var _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../foundation/math/MathUtil */ \"./src/foundation/math/MathUtil.ts\");\n/* harmony import */ var _foundation_components_SceneGraphComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../foundation/components/SceneGraphComponent */ \"./src/foundation/components/SceneGraphComponent.ts\");\n/* harmony import */ var _foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../foundation/definitions/BufferUse */ \"./src/foundation/definitions/BufferUse.ts\");\n/* harmony import */ var _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../foundation/renderer/CGAPIResourceRepository */ \"./src/foundation/renderer/CGAPIResourceRepository.ts\");\n/* harmony import */ var _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../foundation/definitions/ShaderSemantics */ \"./src/foundation/definitions/ShaderSemantics.ts\");\n/* harmony import */ var _PBRShader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PBRShader */ \"./src/webgl/PBRShader.ts\");\n\n\n\n\n\n\n\n\nclass WebGLStrategyUBO {\n    constructor() {\n        this.__webglResourceRepository = _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n        this.__uboUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_5__[\"default\"].InvalidCGAPIResourceUid;\n        this.__shaderProgramUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_5__[\"default\"].InvalidCGAPIResourceUid;\n        this.__vertexHandles = [];\n        this.__isVAOSet = false;\n        this.vertexShaderMethodDefinitions_UBO = `layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `;\n    }\n    setupShaderProgram() {\n        if (this.__shaderProgramUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_5__[\"default\"].InvalidCGAPIResourceUid) {\n            return;\n        }\n        // Shader Setup\n        const glslShader = _PBRShader__WEBPACK_IMPORTED_MODULE_7__[\"default\"].getInstance();\n        let vertexShader = glslShader.vertexShaderVariableDefinitions +\n            this.vertexShaderMethodDefinitions_UBO +\n            glslShader.vertexShaderBody;\n        let fragmentShader = glslShader.fragmentShader;\n        this.__shaderProgramUid = this.__webglResourceRepository.createShaderProgram({\n            vertexShaderStr: vertexShader,\n            fragmentShaderStr: fragmentShader,\n            attributeNames: _PBRShader__WEBPACK_IMPORTED_MODULE_7__[\"default\"].attributeNames,\n            attributeSemantics: _PBRShader__WEBPACK_IMPORTED_MODULE_7__[\"default\"].attributeSemantics\n        });\n        this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid, [\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_6__[\"ShaderSemantics\"].ViewMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_6__[\"ShaderSemantics\"].ProjectionMatrix, isPlural: false }\n        ]);\n    }\n    __isLoaded(index) {\n        if (this.__vertexHandles[index] != null) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    $load(meshComponent) {\n        if (this.__isLoaded(0)) {\n            return;\n        }\n        const primitiveNum = meshComponent.getPrimitiveNumber();\n        for (let i = 0; i < primitiveNum; i++) {\n            const primitive = meshComponent.getPrimitiveAt(i);\n            const vertexHandles = this.__webglResourceRepository.createVertexDataResources(primitive);\n            this.__vertexHandles[i] = vertexHandles;\n            WebGLStrategyUBO.__vertexHandleOfPrimitiveObjectUids.set(primitive.objectUid, vertexHandles);\n        }\n    }\n    $prerender(meshComponent, instanceIDBufferUid) {\n        if (this.__isVAOSet) {\n            return;\n        }\n        const primitiveNum = meshComponent.getPrimitiveNumber();\n        for (let i = 0; i < primitiveNum; i++) {\n            const primitive = meshComponent.getPrimitiveAt(i);\n            // if (this.__isLoaded(i) && this.__isVAOSet) {\n            this.__vertexHandles[i] = WebGLStrategyUBO.__vertexHandleOfPrimitiveObjectUids.get(primitive.objectUid);\n            //this.__vertexShaderProgramHandles[i] = MeshRendererComponent.__shaderProgramHandleOfPrimitiveObjectUids.get(primitive.objectUid)!;\n            //  continue;\n            // }\n            this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[i], primitive, instanceIDBufferUid);\n        }\n        this.__isVAOSet = true;\n    }\n    common_$prerender() {\n        const isHalfFloatMode = false;\n        const memoryManager = _foundation_core_MemoryManager__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance();\n        const buffer = memoryManager.getBuffer(_foundation_definitions_BufferUse__WEBPACK_IMPORTED_MODULE_4__[\"BufferUse\"].GPUInstanceData);\n        const floatDataTextureBuffer = new Float32Array(buffer.getArrayBuffer());\n        let halfFloatDataTextureBuffer;\n        if (isHalfFloatMode) {\n            if (this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2) {\n                halfFloatDataTextureBuffer = new Uint16Array(floatDataTextureBuffer.length);\n                let convertLength = buffer.byteSizeInUse / 4; //components\n                convertLength /= 2; // bytes\n                for (let i = 0; i < convertLength; i++) {\n                    halfFloatDataTextureBuffer[i] = _foundation_math_MathUtil__WEBPACK_IMPORTED_MODULE_2__[\"MathUtil\"].toHalfFloat(floatDataTextureBuffer[i]);\n                }\n            }\n            if (this.__uboUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_5__[\"default\"].InvalidCGAPIResourceUid) {\n                this.__webglResourceRepository.updateUniformBuffer(this.__uboUid, halfFloatDataTextureBuffer);\n                return;\n            }\n            this.__uboUid = this.__webglResourceRepository.createUniformBuffer(halfFloatDataTextureBuffer);\n        }\n        else {\n            if (this.__uboUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_5__[\"default\"].InvalidCGAPIResourceUid) {\n                this.__webglResourceRepository.updateUniformBuffer(this.__uboUid, _foundation_components_SceneGraphComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getAccessor('worldMatrix', _foundation_components_SceneGraphComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"]).dataViewOfBufferView);\n                return;\n            }\n            this.__uboUid = this.__webglResourceRepository.createUniformBuffer(_foundation_components_SceneGraphComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getAccessor('worldMatrix', _foundation_components_SceneGraphComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"]).dataViewOfBufferView);\n        }\n        this.__webglResourceRepository.bindUniformBufferBase(0, this.__uboUid);\n    }\n    ;\n    attachGPUData() {\n        this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid, 'matrix', 0);\n    }\n    ;\n    attatchShaderProgram() {\n        const shaderProgramUid = this.__shaderProgramUid;\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        const gl = glw.getRawContext();\n        const shaderProgram = this.__webglResourceRepository.getWebGLResource(shaderProgramUid);\n        gl.useProgram(shaderProgram);\n    }\n    attachVertexData(i, primitive, glw, instanceIDBufferUid) {\n        const vaoHandles = this.__vertexHandles[i];\n        const vao = this.__webglResourceRepository.getWebGLResource(vaoHandles.vaoHandle);\n        const gl = glw.getRawContext();\n        if (vao != null) {\n            glw.bindVertexArray(vao);\n        }\n        else {\n            this.__webglResourceRepository.setVertexDataToPipeline(vaoHandles, primitive, instanceIDBufferUid);\n            const ibo = this.__webglResourceRepository.getWebGLResource(vaoHandles.iboHandle);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n        }\n    }\n    static getInstance() {\n        if (!this.__instance) {\n            this.__instance = new WebGLStrategyUBO();\n        }\n        return this.__instance;\n    }\n    common_$render(viewMatrix, projectionMatrix) {\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        this.attatchShaderProgram();\n        const gl = glw.getRawContext();\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_6__[\"ShaderSemantics\"].ViewMatrix, true, 4, 'f', true, viewMatrix.v);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_6__[\"ShaderSemantics\"].ProjectionMatrix, true, 4, 'f', true, projectionMatrix.v);\n        return true;\n    }\n}\nWebGLStrategyUBO.__vertexHandleOfPrimitiveObjectUids = new Map();\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLStrategyUBO.ts?");

/***/ }),

/***/ "./src/webgl/WebGLStrategyUniform.ts":
/*!*******************************************!*\
  !*** ./src/webgl/WebGLStrategyUniform.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLStrategyUniform; });\n/* harmony import */ var _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebGLResourceRepository */ \"./src/webgl/WebGLResourceRepository.ts\");\n/* harmony import */ var _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../foundation/renderer/CGAPIResourceRepository */ \"./src/foundation/renderer/CGAPIResourceRepository.ts\");\n/* harmony import */ var _foundation_math_RowMajarMatrix44__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../foundation/math/RowMajarMatrix44 */ \"./src/foundation/math/RowMajarMatrix44.ts\");\n/* harmony import */ var _foundation_components_SkeletalComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../foundation/components/SkeletalComponent */ \"./src/foundation/components/SkeletalComponent.ts\");\n/* harmony import */ var _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../foundation/definitions/ShaderSemantics */ \"./src/foundation/definitions/ShaderSemantics.ts\");\n/* harmony import */ var _PBRShader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./PBRShader */ \"./src/webgl/PBRShader.ts\");\n\n\n\n\n\n\nclass WebGLStrategyUniform {\n    constructor() {\n        this.__webglResourceRepository = _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getInstance();\n        this.__uboUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_1__[\"default\"].InvalidCGAPIResourceUid;\n        this.__shaderProgramUid = _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_1__[\"default\"].InvalidCGAPIResourceUid;\n        this.__isVAOSet = false;\n        this.vertexShaderMethodDefinitions_uniform = `\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  `;\n    }\n    setupShaderProgram() {\n        if (this.__shaderProgramUid !== _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_1__[\"default\"].InvalidCGAPIResourceUid) {\n            return;\n        }\n        // Shader Setup\n        const glslShader = _PBRShader__WEBPACK_IMPORTED_MODULE_5__[\"default\"].getInstance();\n        let vertexShader = glslShader.vertexShaderVariableDefinitions +\n            this.vertexShaderMethodDefinitions_uniform +\n            glslShader.vertexShaderBody;\n        let fragmentShader = glslShader.fragmentShader;\n        this.__shaderProgramUid = this.__webglResourceRepository.createShaderProgram({\n            vertexShaderStr: vertexShader,\n            fragmentShaderStr: fragmentShader,\n            attributeNames: _PBRShader__WEBPACK_IMPORTED_MODULE_5__[\"default\"].attributeNames,\n            attributeSemantics: _PBRShader__WEBPACK_IMPORTED_MODULE_5__[\"default\"].attributeSemantics\n        });\n        this.__shaderProgram = this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid, [\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].WorldMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].BaseColorFactor, isPlural: false, prefix: 'material.' },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].ViewMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].ProjectionMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].NormalMatrix, isPlural: false },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].BaseColorTexture, isPlural: false, prefix: 'material.' },\n            { semantic: _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].BoneMatrix, isPlural: true }\n        ]);\n    }\n    $load(meshComponent) {\n        // if (this.__isLoaded(0)) {\n        //   return;\n        // }\n        const primitiveNum = meshComponent.getPrimitiveNumber();\n        for (let i = 0; i < primitiveNum; i++) {\n            const primitive = meshComponent.getPrimitiveAt(i);\n            const vertexHandles = this.__webglResourceRepository.createVertexDataResources(primitive);\n            //this.__vertexHandles[i] = vertexHandles;\n            WebGLStrategyUniform.__vertexHandleOfPrimitiveObjectUids.set(primitive.primitiveUid, vertexHandles);\n            //      this.__webglResourceRepository.setVertexDataToPipeline(vertexHandles, primitive, void 0);\n        }\n        this.__dummyTextureUid = this.__webglResourceRepository.createDummyTexture();\n    }\n    $prerender(meshComponent, instanceIDBufferUid) {\n        const vertexHandles = [];\n        const primitiveNum = meshComponent.getPrimitiveNumber();\n        for (let i = 0; i < primitiveNum; i++) {\n            const primitive = meshComponent.getPrimitiveAt(i);\n            vertexHandles[i] = WebGLStrategyUniform.__vertexHandleOfPrimitiveObjectUids.get(primitive.primitiveUid);\n            if (!vertexHandles[i].setComplete) {\n                //continue;\n            }\n            this.__webglResourceRepository.setVertexDataToPipeline(vertexHandles[i], primitive, instanceIDBufferUid);\n            vertexHandles[i].setComplete = true;\n        }\n    }\n    common_$prerender() {\n    }\n    ;\n    attachGPUData() {\n    }\n    ;\n    attatchShaderProgram() {\n        const shaderProgramUid = this.__shaderProgramUid;\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        const gl = glw.getRawContext();\n        gl.useProgram(this.__shaderProgram);\n    }\n    attachVertexData(i, primitive, glw, instanceIDBufferUid) {\n        const vertexHandle = WebGLStrategyUniform.__vertexHandleOfPrimitiveObjectUids.get(primitive.primitiveUid);\n        const vaoHandles = vertexHandle;\n        const vao = this.__webglResourceRepository.getWebGLResource(vaoHandles.vaoHandle);\n        const gl = glw.getRawContext();\n        if (vao != null) {\n            glw.bindVertexArray(vao);\n        }\n        else {\n            this.__webglResourceRepository.setVertexDataToPipeline(vaoHandles, primitive, instanceIDBufferUid);\n            const ibo = this.__webglResourceRepository.getWebGLResource(vaoHandles.iboHandle);\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);\n        }\n    }\n    dettachVertexData(glw) {\n        const gl = glw.getRawContext();\n        if (glw.bindVertexArray) {\n            glw.bindVertexArray(null);\n        }\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    }\n    static getInstance() {\n        if (!this.__instance) {\n            this.__instance = new WebGLStrategyUniform();\n        }\n        return this.__instance;\n    }\n    common_$render(viewMatrix, projectionMatrix) {\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        this.attatchShaderProgram();\n        const gl = glw.getRawContext();\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].ViewMatrix, true, 4, 'f', true, viewMatrix.v);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].ProjectionMatrix, true, 4, 'f', true, projectionMatrix.v);\n        return false;\n    }\n    $render(primitive_i, primitive, worldMatrix, normalMatrix, entity) {\n        const glw = this.__webglResourceRepository.currentWebGLContextWrapper;\n        this.attatchShaderProgram();\n        const gl = glw.getRawContext();\n        this.attachVertexData(primitive_i, primitive, glw, _foundation_renderer_CGAPIResourceRepository__WEBPACK_IMPORTED_MODULE_1__[\"default\"].InvalidCGAPIResourceUid);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].WorldMatrix, true, 4, 'f', true, _foundation_math_RowMajarMatrix44__WEBPACK_IMPORTED_MODULE_2__[\"default\"].transpose(worldMatrix).v);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].NormalMatrix, true, 3, 'f', true, normalMatrix.v);\n        const material = primitive.material;\n        const baseColor = [];\n        if (material) {\n            baseColor[0] = material.baseColor.r;\n            baseColor[1] = material.baseColor.g;\n            baseColor[2] = material.baseColor.b;\n            baseColor[3] = material.alpha;\n        }\n        else {\n            baseColor[0] = 1;\n            baseColor[1] = 1;\n            baseColor[2] = 1;\n            baseColor[3] = 1;\n        }\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].BaseColorFactor, false, 4, 'f', true, baseColor);\n        this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].BaseColorTexture, false, 1, 'i', false, 0);\n        const skeletalComponent = entity.getComponent(_foundation_components_SkeletalComponent__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n        if (skeletalComponent) {\n            const jointMatrices = skeletalComponent.jointMatrices;\n            this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid, _foundation_definitions_ShaderSemantics__WEBPACK_IMPORTED_MODULE_4__[\"ShaderSemantics\"].BoneMatrix, true, 4, 'f', true, jointMatrices);\n        }\n        if (material && material.baseColorTexture) {\n            const texture = this.__webglResourceRepository.getWebGLResource(material.baseColorTexture.texture3DAPIResourseUid);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n        }\n        else {\n            const texture = this.__webglResourceRepository.getWebGLResource(this.__dummyTextureUid);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n        }\n        gl.drawElements(primitive.primitiveMode.index, primitive.indicesAccessor.elementCount, primitive.indicesAccessor.componentType.index, 0);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.useProgram(null);\n        this.dettachVertexData(glw);\n    }\n}\n//private __vertexHandles: Array<VertexHandles> = [];\nWebGLStrategyUniform.__vertexHandleOfPrimitiveObjectUids = new Map();\n\n\n//# sourceURL=webpack:///./src/webgl/WebGLStrategyUniform.ts?");

/***/ }),

/***/ "./src/webgl/getRenderingStrategy.ts":
/*!*******************************************!*\
  !*** ./src/webgl/getRenderingStrategy.ts ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _foundation_definitions_ProcessApproach__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../foundation/definitions/ProcessApproach */ \"./src/foundation/definitions/ProcessApproach.ts\");\n/* harmony import */ var _WebGLStrategyUBO__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WebGLStrategyUBO */ \"./src/webgl/WebGLStrategyUBO.ts\");\n/* harmony import */ var _WebGLStrategyTransformFeedback__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WebGLStrategyTransformFeedback */ \"./src/webgl/WebGLStrategyTransformFeedback.ts\");\n/* harmony import */ var _WebGLStrategyDataTexture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WebGLStrategyDataTexture */ \"./src/webgl/WebGLStrategyDataTexture.ts\");\n/* harmony import */ var _WebGLStrategyUniform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./WebGLStrategyUniform */ \"./src/webgl/WebGLStrategyUniform.ts\");\n\n\n\n\n\nconst getRenderingStrategy = function (processApproach) {\n    // Strategy\n    if (processApproach.index === _foundation_definitions_ProcessApproach__WEBPACK_IMPORTED_MODULE_0__[\"ProcessApproach\"].UBOWebGL2.index) {\n        return _WebGLStrategyUBO__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getInstance();\n    }\n    else if (processApproach.index === _foundation_definitions_ProcessApproach__WEBPACK_IMPORTED_MODULE_0__[\"ProcessApproach\"].TransformFeedbackWebGL2.index) {\n        return _WebGLStrategyTransformFeedback__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getInstance();\n    }\n    else if (processApproach.index === _foundation_definitions_ProcessApproach__WEBPACK_IMPORTED_MODULE_0__[\"ProcessApproach\"].UniformWebGL1.index) {\n        return _WebGLStrategyUniform__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getInstance();\n    }\n    else {\n        return _WebGLStrategyDataTexture__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getInstance();\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (getRenderingStrategy);\n\n\n//# sourceURL=webpack:///./src/webgl/getRenderingStrategy.ts?");

/***/ }),

/***/ "./src/webgl/main.ts":
/*!***************************!*\
  !*** ./src/webgl/main.ts ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _getRenderingStrategy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getRenderingStrategy */ \"./src/webgl/getRenderingStrategy.ts\");\n/* harmony import */ var _GLSLShader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GLSLShader */ \"./src/webgl/GLSLShader.ts\");\n/* harmony import */ var _WebGLContextWrapper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WebGLContextWrapper */ \"./src/webgl/WebGLContextWrapper.ts\");\n/* harmony import */ var _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./WebGLResourceRepository */ \"./src/webgl/WebGLResourceRepository.ts\");\n/* harmony import */ var _WebGLStrategyDataTexture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./WebGLStrategyDataTexture */ \"./src/webgl/WebGLStrategyDataTexture.ts\");\n/* harmony import */ var _WebGLStrategyTransformFeedback__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./WebGLStrategyTransformFeedback */ \"./src/webgl/WebGLStrategyTransformFeedback.ts\");\n/* harmony import */ var _WebGLStrategyUBO__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WebGLStrategyUBO */ \"./src/webgl/WebGLStrategyUBO.ts\");\n/* harmony import */ var _WebGLStrategyUniform__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./WebGLStrategyUniform */ \"./src/webgl/WebGLStrategyUniform.ts\");\n\n\n\n\n\n\n\n\nconst WebGL = Object.freeze({\n    getRenderingStrategy: _getRenderingStrategy__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    GLSLShader: _GLSLShader__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    WebGLContextWrapper: _WebGLContextWrapper__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    WebGLResourceRepository: _WebGLResourceRepository__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    WebGLStrategyDataTexture: _WebGLStrategyDataTexture__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    WebGLStrategyTransformFeedback: _WebGLStrategyTransformFeedback__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    WebGLStrategyUBO: _WebGLStrategyUBO__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    WebGLStrategyUniform: _WebGLStrategyUniform__WEBPACK_IMPORTED_MODULE_7__[\"default\"]\n});\n/* harmony default export */ __webpack_exports__[\"default\"] = (WebGL);\n\n\n//# sourceURL=webpack:///./src/webgl/main.ts?");

/***/ })

}]);
(0,eval)('this').Rn.WEBGL_VERSION='version: 0.1.1-90-g446f-mod branch: feature/shader';
