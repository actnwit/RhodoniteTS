/// <reference types="webgl-ext" />
import { WebGLExtensionEnum } from './WebGLExtension';
import { RenderBufferTargetEnum } from '../foundation/definitions/RenderBufferTarget';
import { Index, Size } from '../types/CommonTypes';
import { Vector4 } from '../foundation/math/Vector4';
interface WEBGL_compressed_texture_etc {
    readonly COMPRESSED_RGBA8_ETC2_EAC: number;
}
interface WEBGL_compressed_texture_bptc {
    readonly COMPRESSED_RGBA_BPTC_UNORM_EXT: number;
}
export declare class WebGLContextWrapper {
    #private;
    __gl: WebGLRenderingContext | WebGL2RenderingContext;
    __webglVersion: number;
    width: Size;
    height: Size;
    readonly canvas: HTMLCanvasElement;
    readonly webgl1ExtVAO?: OES_vertex_array_object;
    readonly webgl1ExtIA?: ANGLE_instanced_arrays;
    readonly webgl1ExtTF?: OES_texture_float;
    readonly webgl1ExtTHF?: OES_texture_half_float;
    readonly webgl1ExtTFL?: OES_texture_float_linear;
    readonly webgl1ExtTHFL?: OES_texture_half_float_linear;
    readonly webgl1ExtTFA?: EXT_texture_filter_anisotropic;
    readonly webgl1ExtEIUI?: OES_element_index_uint;
    readonly webgl1ExtSTL?: EXT_shader_texture_lod;
    readonly webgl1ExtDRV?: OES_standard_derivatives;
    readonly webgl1ExtDB?: WEBGL_draw_buffers;
    readonly webgl1ExtBM?: EXT_blend_minmax;
    readonly webgl1ExtCBF?: WEBGL_color_buffer_float;
    readonly webgl1ExtCTAstc?: WEBGL_compressed_texture_astc;
    readonly webgl1ExtCTS3tc?: WEBGL_compressed_texture_s3tc;
    readonly webgl1ExtCTPvrtc?: WEBKIT_WEBGL_compressed_texture_pvrtc;
    readonly webgl1ExtCTAtc?: WEBGL_compressed_texture_atc;
    readonly webgl1ExtCTEtc?: WEBGL_compressed_texture_etc;
    readonly webgl1ExtCTEtc1?: WEBGL_compressed_texture_etc1;
    readonly webgl1ExtCTBptc?: WEBGL_compressed_texture_bptc;
    readonly webgl2ExtTFL?: OES_texture_float_linear;
    readonly webgl2ExtTFA?: EXT_texture_filter_anisotropic;
    readonly webgl2ExtCTAstc?: WEBGL_compressed_texture_astc;
    readonly webgl2ExtCTS3tc?: WEBGL_compressed_texture_s3tc;
    readonly webgl2ExtCTPvrtc?: WEBKIT_WEBGL_compressed_texture_pvrtc;
    readonly webgl2ExtCTAtc?: WEBGL_compressed_texture_atc;
    readonly webgl2ExtCTEtc?: WEBGL_compressed_texture_etc;
    readonly webgl2ExtCTEtc1?: WEBGL_compressed_texture_etc1;
    readonly webgl2ExtCTBptc?: WEBGL_compressed_texture_bptc;
    private __activeTextureBackup;
    private __activeTextures2D;
    private __activeTexturesCube;
    private __isDebugMode;
    private __viewport_left;
    private __viewport_top;
    private __viewport_width;
    private __viewport_height;
    private __default_viewport_left;
    private __default_viewport_top;
    private __default_viewport_width;
    private __default_viewport_height;
    private __maxVertexUniformVectors;
    private __maxFragmentUniformVectors;
    __extensions: Map<WebGLExtensionEnum, WebGLObject>;
    constructor(gl: WebGLRenderingContext | WebGL2RenderingContext, canvas: HTMLCanvasElement, isDebug: boolean);
    getRawContext(): WebGLRenderingContext | WebGL2RenderingContext;
    getRawContextAsWebGL1(): WebGLRenderingContext;
    getRawContextAsWebGL2(): WebGL2RenderingContext;
    get viewport(): Vector4;
    get defaultViewport(): Vector4;
    isSupportWebGL1Extension(webGLExtension: WebGLExtensionEnum): boolean;
    isNotSupportWebGL1Extension(webGLExtension: WebGLExtensionEnum): boolean;
    get isDebugMode(): boolean;
    getIsWebGL2(gl: WebGLRenderingContext | WebGL2RenderingContext): gl is WebGL2RenderingContext;
    get isWebGL2(): boolean;
    createVertexArray(): WebGLVertexArrayObject | null | undefined;
    deleteVertexArray(vertexArray: WebGLVertexArrayObject | WebGLVertexArrayObjectOES): void;
    bindVertexArray(vao: WebGLVertexArrayObjectOES | null): void;
    vertexAttribDivisor(index: number, divisor: number): void;
    drawElementsInstanced(primitiveMode: number, indexCount: number, type: number, offset: number, instanceCount: number): void;
    drawArraysInstanced(primitiveMode: number, first: number, count: number, instanceCount: number): void;
    colorAttachment(index: Index): number;
    drawBuffers(buffers: RenderBufferTargetEnum[]): void;
    private __activeTexture;
    bindTexture2D(activeTextureIndex: Index, texture: WebGLTexture): void;
    bindTextureCube(activeTextureIndex: Index, texture: WebGLTexture): void;
    unbindTexture2D(activeTextureIndex: Index): void;
    unbindTextureCube(activeTextureIndex: Index): void;
    unbindTextures(): void;
    private __getExtension;
    private __getCompressedTextureExtension;
    setViewport(left: number, top: number, width: number, height: number): void;
    setViewportAsVector4(viewport: Vector4): void;
    private __getUniformBufferInfo;
    private __getMaxUniformVectors;
    getMaxConventionUniformBlocks(): number;
    getAlignedMaxUniformBlockSize(): number;
    getMaxVertexUniformVectors(): number;
    getMaxFragmentUniformVectors(): number;
}
export {};
