import { EnumClass, EnumIO } from '../misc/EnumIO';
import { Index } from '../../types/CommonTypes';
import { ShaderSemanticsInfo } from './ShaderSemanticsInfo';
export declare type ShaderSemanticsIndex = number;
export declare type ShaderSemanticsName = string;
export interface ShaderSemanticsEnum extends EnumIO {
    str: string;
}
export declare class ShaderSemanticsClass extends EnumClass implements ShaderSemanticsEnum {
    private static __indexCount;
    static readonly _scale = 10000;
    private static __classes;
    constructor({ str }: {
        index?: number;
        str: string;
    });
    static getShaderSemanticByIndex(index: ShaderSemanticsIndex): ShaderSemanticsClass;
    static isNonArrayShaderSemanticIndex(index: ShaderSemanticsIndex): boolean;
    static isArrayAndZeroIndexShaderSemanticIndex(index: ShaderSemanticsIndex): boolean;
    static isArrayAndNonZeroIndexShaderSemanticIndex(index: ShaderSemanticsIndex): boolean;
    static getIndexCount(): number;
}
declare function from(index: ShaderSemanticsIndex): ShaderSemanticsEnum;
declare function fromString(str: string): ShaderSemanticsEnum;
declare function fromStringCaseSensitively(str: string): ShaderSemanticsEnum;
declare function fullSemanticStr(info: ShaderSemanticsInfo): string;
export declare type getShaderPropertyFunc = (materialTypeName: string, info: ShaderSemanticsInfo, propertyIndex: Index, isGlobalData: boolean, isWebGL2: boolean) => string;
/**
 * @internal
 */
export declare function _getPropertyIndex2(shaderSemantic: ShaderSemanticsEnum): number;
export declare const ShaderSemantics: Readonly<{
    from: typeof from;
    fromString: typeof fromString;
    fromStringCaseSensitively: typeof fromStringCaseSensitively;
    WorldMatrix: ShaderSemanticsEnum;
    ViewMatrix: ShaderSemanticsEnum;
    IsBillboard: ShaderSemanticsEnum;
    EnableViewMatrix: ShaderSemanticsEnum;
    ProjectionMatrix: ShaderSemanticsEnum;
    NormalMatrix: ShaderSemanticsEnum;
    BoneMatrix: ShaderSemanticsEnum;
    BaseColorFactor: ShaderSemanticsEnum;
    BaseColorTexture: ShaderSemanticsEnum;
    NormalTexture: ShaderSemanticsEnum;
    MetallicRoughnessTexture: ShaderSemanticsEnum;
    OcclusionTexture: ShaderSemanticsEnum;
    EmissiveFactor: ShaderSemanticsEnum;
    EmissiveTexture: ShaderSemanticsEnum;
    LightNumber: ShaderSemanticsEnum;
    LightPosition: ShaderSemanticsEnum;
    LightDirection: ShaderSemanticsEnum;
    LightIntensity: ShaderSemanticsEnum;
    LightProperty: ShaderSemanticsEnum;
    MetallicRoughnessFactor: ShaderSemanticsEnum;
    BrdfLutTexture: ShaderSemanticsEnum;
    DiffuseEnvTexture: ShaderSemanticsEnum;
    SpecularEnvTexture: ShaderSemanticsEnum;
    InverseEnvironment: ShaderSemanticsEnum;
    IBLParameter: ShaderSemanticsEnum;
    ViewPosition: ShaderSemanticsEnum;
    Wireframe: ShaderSemanticsEnum;
    DiffuseColorFactor: ShaderSemanticsEnum;
    DiffuseColorTexture: ShaderSemanticsEnum;
    Shininess: ShaderSemanticsEnum;
    ShadingModel: ShaderSemanticsEnum;
    SkinningMode: ShaderSemanticsEnum;
    GeneralTexture: ShaderSemanticsEnum;
    VertexAttributesExistenceArray: ShaderSemanticsEnum;
    BoneQuaternion: ShaderSemanticsEnum;
    BoneTranslateScale: ShaderSemanticsEnum;
    BoneTranslatePackedQuat: ShaderSemanticsEnum;
    BoneScalePackedQuat: ShaderSemanticsEnum;
    BoneCompressedChunk: ShaderSemanticsEnum;
    BoneCompressedInfo: ShaderSemanticsEnum;
    PointSize: ShaderSemanticsEnum;
    ColorEnvTexture: ShaderSemanticsEnum;
    PointDistanceAttenuation: ShaderSemanticsEnum;
    HDRIFormat: ShaderSemanticsEnum;
    ScreenInfo: ShaderSemanticsEnum;
    DepthTexture: ShaderSemanticsEnum;
    LightViewProjectionMatrix: ShaderSemanticsEnum;
    Anisotropy: ShaderSemanticsEnum;
    ClearCoatParameter: ShaderSemanticsEnum;
    SheenColorFactor: ShaderSemanticsEnum;
    SheenColorTexture: ShaderSemanticsEnum;
    SheenRoughnessFactor: ShaderSemanticsEnum;
    SheenRoughnessTexture: ShaderSemanticsEnum;
    SheenLutTexture: ShaderSemanticsEnum;
    SpecularGlossinessFactor: ShaderSemanticsEnum;
    SpecularGlossinessTexture: ShaderSemanticsEnum;
    ClearCoatFactor: ShaderSemanticsEnum;
    ClearCoatTexture: ShaderSemanticsEnum;
    ClearCoatRoughnessFactor: ShaderSemanticsEnum;
    ClearCoatRoughnessTexture: ShaderSemanticsEnum;
    ClearCoatNormalTexture: ShaderSemanticsEnum;
    TransmissionFactor: ShaderSemanticsEnum;
    TransmissionTexture: ShaderSemanticsEnum;
    BackBufferTexture: ShaderSemanticsEnum;
    BackBufferTextureSize: ShaderSemanticsEnum;
    ThicknessFactor: ShaderSemanticsEnum;
    ThicknessTexture: ShaderSemanticsEnum;
    AttenuationDistance: ShaderSemanticsEnum;
    AttenuationColor: ShaderSemanticsEnum;
    fullSemanticStr: typeof fullSemanticStr;
    getShaderProperty: getShaderPropertyFunc;
    EntityUID: ShaderSemanticsEnum;
    MorphTargetNumber: ShaderSemanticsEnum;
    DataTextureMorphOffsetPosition: ShaderSemanticsEnum;
    MorphWeights: ShaderSemanticsEnum;
    CurrentComponentSIDs: ShaderSemanticsEnum;
    AlphaCutoff: ShaderSemanticsEnum;
    AlphaTexture: ShaderSemanticsEnum;
    MakeOutputSrgb: ShaderSemanticsEnum;
    FramebufferWidth: ShaderSemanticsEnum;
    IsOutputHDR: ShaderSemanticsClass;
    BaseColorTextureTransform: ShaderSemanticsClass;
    BaseColorTextureRotation: ShaderSemanticsClass;
    NormalTextureTransform: ShaderSemanticsClass;
    NormalTextureRotation: ShaderSemanticsClass;
    MetallicRoughnessTextureTransform: ShaderSemanticsClass;
    MetallicRoughnessTextureRotation: ShaderSemanticsClass;
    NormalTexcoordIndex: ShaderSemanticsClass;
    BaseColorTexcoordIndex: ShaderSemanticsClass;
    MetallicRoughnessTexcoordIndex: ShaderSemanticsClass;
    OcclusionTexcoordIndex: ShaderSemanticsClass;
    OcclusionTextureTransform: ShaderSemanticsClass;
    OcclusionTextureRotation: ShaderSemanticsClass;
    EmissiveTexcoordIndex: ShaderSemanticsClass;
    EmissiveTextureTransform: ShaderSemanticsClass;
    EmissiveTextureRotation: ShaderSemanticsClass;
    NormalScale: ShaderSemanticsClass;
    OcclusionStrength: ShaderSemanticsClass;
    envRotation: ShaderSemanticsClass;
    EnvHdriFormat: ShaderSemanticsClass;
    VrState: ShaderSemanticsClass;
    EnableLinearToSrgb: ShaderSemanticsClass;
    SpecularFactor: ShaderSemanticsClass;
    SpecularTexture: ShaderSemanticsClass;
    SpecularColorFactor: ShaderSemanticsClass;
    SpecularColorTexture: ShaderSemanticsClass;
    Ior: ShaderSemanticsClass;
    DepthBiasPV: ShaderSemanticsClass;
    ClearCoatTextureTransform: ShaderSemanticsClass;
    ClearCoatTextureRotation: ShaderSemanticsClass;
    ClearCoatRoughnessTextureTransform: ShaderSemanticsClass;
    ClearCoatRoughnessTextureRotation: ShaderSemanticsClass;
    ClearCoatNormalTextureTransform: ShaderSemanticsClass;
    ClearCoatNormalTextureRotation: ShaderSemanticsClass;
    ClearCoatTexcoordIndex: ShaderSemanticsClass;
    ClearCoatRoughnessTexcoordIndex: ShaderSemanticsClass;
    ClearCoatNormalTexcoordIndex: ShaderSemanticsClass;
    IridescenceFactor: ShaderSemanticsClass;
    IridescenceTexture: ShaderSemanticsClass;
    IridescenceIor: ShaderSemanticsClass;
    IridescenceThicknessMinimum: ShaderSemanticsClass;
    IridescenceThicknessMaximum: ShaderSemanticsClass;
    IridescenceThicknessTexture: ShaderSemanticsClass;
}>;
export {};
