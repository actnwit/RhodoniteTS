import { EnumIO } from '../misc/EnumIO';
export declare type CompressionTextureTypeEnum = EnumIO;
declare function from(index: number): CompressionTextureTypeEnum;
declare function fromString(str: string): CompressionTextureTypeEnum;
export declare const CompressionTextureType: Readonly<{
    ASTC_RGBA_4x4: EnumIO;
    ASTC_RGBA_5x4: EnumIO;
    ASTC_RGBA_5x5: EnumIO;
    ASTC_RGBA_6x5: EnumIO;
    ASTC_RGBA_6x6: EnumIO;
    ASTC_RGBA_8x5: EnumIO;
    ASTC_RGBA_8x6: EnumIO;
    ASTC_RGBA_8x8: EnumIO;
    ASTC_RGBA_10x5: EnumIO;
    ASTC_RGBA_10x6: EnumIO;
    ASTC_RGBA_10x8: EnumIO;
    ASTC_RGBA_10x10: EnumIO;
    ASTC_RGBA_12x10: EnumIO;
    ASTC_RGBA_12x12: EnumIO;
    ASTC_SRGB_4x4: EnumIO;
    ASTC_SRGB_5x4: EnumIO;
    ASTC_SRGB_5x5: EnumIO;
    ASTC_SRGB_6x5: EnumIO;
    ASTC_SRGB_6x6: EnumIO;
    ASTC_SRGB_8x5: EnumIO;
    ASTC_SRGB_8x6: EnumIO;
    ASTC_SRGB_8x8: EnumIO;
    ASTC_SRGB_10x5: EnumIO;
    ASTC_SRGB_10x6: EnumIO;
    ASTC_SRGB_10x8: EnumIO;
    ASTC_SRGB_10x10: EnumIO;
    ASTC_SRGB_12x10: EnumIO;
    ASTC_SRGB_12x12: EnumIO;
    S3TC_RGB_DXT1: EnumIO;
    S3TC_RGBA_DXT1: EnumIO;
    S3TC_RGBA_DXT3: EnumIO;
    S3TC_RGBA_DXT5: EnumIO;
    BPTC_RGBA: EnumIO;
    PVRTC_RGBA_4BPPV1: EnumIO;
    PVRTC_RGB_4BPPV1: EnumIO;
    ETC2_RGBA8_EAC: EnumIO;
    ETC2_RGB8: EnumIO;
    ETC1_RGB: EnumIO;
    RGBA8_EXT: EnumIO;
    from: typeof from;
    fromString: typeof fromString;
}>;
export {};
