import MeshComponent from "../foundation/components/MeshComponent";
import WebGLStrategy from "./WebGLStrategy";
import Primitive from "../foundation/geometry/Primitive";
import WebGLContextWrapper from "./WebGLContextWrapper";
export default class WebGLStrategyTransformFeedback implements WebGLStrategy {
    private static __instance;
    private __webglResourceRepository;
    private __instanceDataTextureUid;
    private __vertexDataTextureUid;
    private __shaderProgramUid;
    private __primitiveHeaderUboUid;
    private __indexCountToSubtractUboUid;
    private __entitiesUidUboUid;
    private __primitiveUidUboUid;
    private __isVertexReady;
    private __vertexHandle?;
    private constructor();
    private readonly __transformFeedbackShaderText;
    private readonly __transformFeedbackFragmentShaderText;
    setupShaderProgram(): void;
    $load(meshComponent: MeshComponent): void;
    $prerender(meshComponent: MeshComponent, instanceIDBufferUid: WebGLResourceHandle): void;
    private __setupUBOPrimitiveHeaderData;
    private __setupGPUInstanceMetaData;
    private __setupGPUInstanceData;
    private __setupGPUVertexData;
    common_$prerender(): void;
    attachGPUData(): void;
    attatchShaderProgram(): void;
    attachVertexData(i: number, primitive: Primitive, glw: WebGLContextWrapper, instanceIDBufferUid: WebGLResourceHandle): void;
    static getInstance(): WebGLStrategyTransformFeedback;
    common_$render(): boolean;
}
