(window.webpackJsonp=window.webpackJsonp||[]).push([["webgl"],{58:function(e,t,r){"use strict";r.r(t);var i,n=r(35),a=r(46),o=r(18),s=r(17),l=r(12),u=r(5),c=r(31),_=r(2),d=(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),h=function(e){function t(t){var r=t.index,i=t.singularStr,n=t.pluralStr,a=e.call(this,{index:r,str:i})||this;return a.pluralStr=n,a}return d(t,e),Object.defineProperty(t.prototype,"singularStr",{get:function(){return this.str},enumerable:!0,configurable:!0}),t}(_.a),g=new h({index:0,singularStr:"worldMatrix",pluralStr:"worldMatrices"}),p=new h({index:1,singularStr:"viewMatrix",pluralStr:"viewMatrices"}),f=new h({index:2,singularStr:"projectionMatrix",pluralStr:"projectionMatrices"}),m=new h({index:3,singularStr:"normalMatrix",pluralStr:"normalMatrices"}),b=new h({index:4,singularStr:"boneMatrix",pluralStr:"boneMatrices"}),x=new h({index:5,singularStr:"baseColorFactor",pluralStr:"baseColorFactors"}),v=new h({index:6,singularStr:"baseColorTexture",pluralStr:"baseColorTextures"}),R=new h({index:7,singularStr:"normalTexture",pluralStr:"normalTextures"}),y=new h({index:8,singularStr:"metallicRoughnessTexture",pluralStr:"metallicRoughnessTextures"}),w=new h({index:9,singularStr:"occlusionTexture",pluralStr:"occlusionTextures"}),T=new h({index:10,singularStr:"emissiveTexture",pluralStr:"emissiveTextures"}),U=new h({index:11,singularStr:"lightNumber",pluralStr:"lightNumbers"}),P=new h({index:12,singularStr:"lightPosition",pluralStr:"lightPositions"}),L=new h({index:13,singularStr:"lightDirection",pluralStr:"lightDirections"}),S=new h({index:14,singularStr:"lightIntensity",pluralStr:"intensityOfLights"}),W=new h({index:15,singularStr:"metallicRoughnessFactor",pluralStr:"metallicRoughnessFactors"}),C=new h({index:16,singularStr:"brdfLutTexture",pluralStr:"brdfLutTexture"}),M=new h({index:17,singularStr:"diffuseEnvTexture",pluralStr:"diffuseEnvTextures"}),D=new h({index:18,singularStr:"specularEnvTexture",pluralStr:"specularEnvTextures"}),I=new h({index:19,singularStr:"iblParameter",pluralStr:"iblParameter"}),G=new h({index:20,singularStr:"viewPosition",pluralStr:"viewPositions"});var E=Object.freeze({WorldMatrix:g,ViewMatrix:p,ProjectionMatrix:f,NormalMatrix:m,BoneMatrix:b,BaseColorFactor:x,BaseColorTexture:v,NormalTexture:R,MetallicRoughnessTexture:y,OcclusionTexture:w,EmissiveTexture:T,LightNumber:U,LightPosition:P,LightDirection:L,LightIntensity:S,MetallicRoughnessFactor:W,BrdfLutTexture:C,DiffuseEnvTexture:M,SpecularEnvTexture:D,IBLParameter:I,ViewPosition:G}),N=r(13),F=function(){function e(){this.__webglResourceRepository=a.a.getInstance()}return Object.defineProperty(e.prototype,"glsl_rt0",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"layout(location = 0) out vec4 rt0;\n":"vec4 rt0;\n"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl_fragColor",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"":"gl_FragColor = rt0;\n"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl_vertex_in",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"in":"attribute"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl_fragment_in",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"in":"varying"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl_vertex_out",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"out":"varying"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl_texture",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"texture":"texture2D"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl_versionText",{get:function(){return this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?"#version 300 es\n":""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl1ShaderTextureLodExt",{get:function(){return null!=a.a.getInstance().currentWebGLContextWrapper.webgl1ExtSTL?"#extension GL_EXT_shader_texture_lod : require":""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"glsl1ShaderDerivativeExt",{get:function(){return null!=a.a.getInstance().currentWebGLContextWrapper.webgl1ExtDRV?"#extension GL_OES_standard_derivatives : require":""},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"toNormalMatrix",{get:function(){return"\n    mat3 toNormalMatrix(mat4 m) {\n      float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3],\n      a10 = m[1][0], a11 = m[1][1], a12 = m[1][2], a13 = m[1][3],\n      a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3],\n      a30 = m[3][0], a31 = m[3][1], a32 = m[3][2], a33 = m[3][3];\n\n      float b00 = a00 * a11 - a01 * a10,\n      b01 = a00 * a12 - a02 * a10,\n      b02 = a00 * a13 - a03 * a10,\n      b03 = a01 * a12 - a02 * a11,\n      b04 = a01 * a13 - a03 * a11,\n      b05 = a02 * a13 - a03 * a12,\n      b06 = a20 * a31 - a21 * a30,\n      b07 = a20 * a32 - a22 * a30,\n      b08 = a20 * a33 - a23 * a30,\n      b09 = a21 * a32 - a22 * a31,\n      b10 = a21 * a33 - a23 * a31,\n      b11 = a22 * a33 - a23 * a32;\n\n      float determinantVal = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n      return mat3(\n        a11 * b11 - a12 * b10 + a13 * b09, a12 * b08 - a10 * b11 - a13 * b07, a10 * b10 - a11 * b08 + a13 * b06,\n        a02 * b10 - a01 * b11 - a03 * b09, a00 * b11 - a02 * b08 + a03 * b07, a01 * b08 - a00 * b10 - a03 * b06,\n        a31 * b05 - a32 * b04 + a33 * b03, a32 * b02 - a30 * b05 - a33 * b01, a30 * b04 - a31 * b02 + a33 * b00) / determinantVal;\n    }\n    "},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"getSkinMatrix",{get:function(){return"\n\n    mat4 getSkinMatrix() {\n      mat4 skinMat = a_weight.x * u_boneMatrices[int(a_joint.x)];\n      skinMat += a_weight.y * u_boneMatrices[int(a_joint.y)];\n      skinMat += a_weight.z * u_boneMatrices[int(a_joint.z)];\n      skinMat += a_weight.w * u_boneMatrices[int(a_joint.w)];\n\n      return skinMat;\n    }\n    "},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"processSkinningIfNeed",{get:function(){return"\n    bool isSkinning = false;\n    if (length(a_weight.xyz) > 0.01) {\n      mat4 skinMat = getSkinMatrix();\n      v_position_inWorld = skinMat * vec4(a_position, 1.0);\n      normalMatrix = toNormalMatrix(skinMat);\n      v_normal_inWorld = normalize(normalMatrix * a_normal);\n      gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n      isSkinning = true;\n    }\n    "},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pbrUniformDefinition",{get:function(){var e="";e+="uniform vec2 uMetallicRoughnessFactors;\n",e+="uniform vec3 uBaseColorFactor;\n",e+="uniform vec2 uOcclusionFactors;",e+="uniform vec3 uEmissiveFactor;",e+="uniform sampler2D uMetallicRoughnessTexture;\n";e+="uniform sampler2D uOcclusionTexture;\n";e+="uniform sampler2D uEmissiveTexture;\n";return e+="uniform sampler2D u_brdfLutTexture;\n",e+="uniform samplerCube uDiffuseEnvTexture;\n",e+="uniform samplerCube uSpecularEnvTexture;\n",e+="uniform vec3 uIBLParameters;\n",e+="uniform vec4 ambient;\n"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pbrMethodDefinition",{get:function(){return'\n    const float M_PI = 3.141592653589793;\n    const float c_MinRoughness = 0.04;\n\n    float angular_n_h(float NH) {\n      return acos(NH);\n    }\n\n    float sqr(float x) {\n      return x*x;\n    }\n\n    float d_phong(float NH, float c1) {\n      return pow(\n        cos(acos(NH))\n        , c1\n      );\n    }\n\n    // GGX NDF\n    float d_ggx(float NH, float alphaRoughness) {\n      float roughnessSqr = alphaRoughness * alphaRoughness;\n      float f = (roughnessSqr - 1.0) * NH * NH + 1.0;\n      return roughnessSqr / (M_PI * f * f);\n    }\n\n    float d_torrance_reiz(float NH, float c3) {\n      float CosSquared = NH*NH;\n      float TanSquared = (1.0 - CosSquared)/CosSquared;\n      //return (1.0/M_PI) * sqr(c3/(CosSquared * (c3*c3 + TanSquared)));  // gamma = 2, aka GGX\n      return (1.0/sqrt(M_PI)) * (sqr(c3)/(CosSquared * (c3*c3 + TanSquared))); // gamma = 1, D_Berry\n    }\n\n    float d_beckmann(float NH, float m) {\n      float co = 1.0 / (4.0 * m * m * NH * NH * NH * NH);\n      float expx = exp((NH * NH - 1.0) / (m * m * NH * NH));\n      return co * expx;\n    }\n\n    // the same as glTF WebGL sample\n    // https://github.com/KhronosGroup/glTF-WebGL-PBR/blob/88eda8c5358efe03128b72b6c5f5f6e5b6d023e1/shaders/pbr-frag.glsl#L188\n    // That is, Unreal Engine based approach, but modified to use alphaRoughness (squared artist\'s roughness parameter),\n    // and based on \'Separable Masking and Shadowing\' approximation (propesed by Christophe Schlick)\n    // https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\n    float g_shielding(float NL, float NV, float alphaRoughness) {\n      float r = alphaRoughness;\n\n      // Local Shadowing using "Schlick-Smith" Masking Function\n      float localShadowing = 2.0 * NL / (NL + sqrt(r * r + (1.0 - r * r) * (NL * NL)));\n\n      // Local Masking using "Schlick-Smith" Masking Function\n      float localMasking = 2.0 * NV / (NV + sqrt(r * r + (1.0 - r * r) * (NV * NV)));\n\n      return localShadowing * localMasking;\n    }\n\n    // The Schlick Approximation to Fresnel\n    vec3 fresnel(vec3 f0, float LH) {\n      return vec3(f0) + (vec3(1.0) - f0) * pow(1.0 - LH, 5.0);\n    }\n\n    vec3 cook_torrance_specular_brdf(float NH, float NL, float NV, vec3 F, float alphaRoughness) {\n      float D = d_ggx(NH, alphaRoughness);\n      float G = g_shielding(NL, NV, alphaRoughness);\n      return vec3(D)*vec3(G)*F/vec3(4.0*NL*NV);\n    }\n\n    vec3 diffuse_brdf(vec3 albedo)\n    {\n      return albedo / M_PI;\n    }\n\n    vec3 srgbToLinear(vec3 srgbColor) {\n      return pow(srgbColor, vec3(2.2));\n    }\n\n    float srgbToLinear(float value) {\n      return pow(value, 2.2);\n    }\n\n    vec3 linearToSrgb(vec3 linearColor) {\n      return pow(linearColor, vec3(1.0/2.2));\n    }\n\n    float linearToSrgb(float value) {\n      return pow(value, 1.0/2.2);\n    }\n\n    vec3 IBLContribution(vec3 n, float NV, vec3 reflection, vec3 albedo, vec3 F0, float userRoughness)\n    {\n      float mipCount = u_iblParameter.x;\n      float lod = (userRoughness * mipCount);\n\n      vec3 brdf = srgbToLinear(texture2D(u_brdfLutTexture, vec2(NV, 1.0 - userRoughness)).rgb);\n      vec3 diffuseLight = srgbToLinear(textureCube(u_diffuseEnvTexture, n).rgb);\n      '+(this.__webglResourceRepository.currentWebGLContextWrapper.webgl1ExtSTL?"vec3 specularLight = srgbToLinear(textureCubeLodEXT(u_specularEnvTexture, reflection, lod).rgb);":"vec3 specularLight = srgbToLinear(textureCube(u_specularEnvTexture, reflection).rgb);")+"\n\n      vec3 diffuse = diffuseLight * albedo;\n      vec3 specular = specularLight * (F0 * brdf.x + brdf.y);\n\n      float IBLDiffuseContribution = u_iblParameter.y;\n      float IBLSpecularContribution = u_iblParameter.z;\n      diffuse *= IBLDiffuseContribution;\n      specular *= IBLSpecularContribution;\n      return diffuse + specular;\n    }\n    "},enumerable:!0,configurable:!0}),e}(),B=r(39),A=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(t,r)};return function(t,r){function i(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(i.prototype=r.prototype,new i)}}(),V=function(e){function t(){var t=e.call(this)||this;return t.vertexShaderBody="\n\nvoid main ()\n{\n  mat4 worldMatrix = getMatrix(a_instanceID);\n  mat4 viewMatrix = getViewMatrix(a_instanceID);\n  mat4 projectionMatrix = getProjectionMatrix(a_instanceID);\n  mat3 normalMatrix = getNormalMatrix(a_instanceID);\n\n  v_position_inWorld = worldMatrix * vec4(a_position, 1.0);\n\n  gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n  v_color = a_color;\n  v_normal_inWorld = normalMatrix * a_normal;\n  v_texcoord = a_texcoord;\n\n  // Skeletal\n  "+t.processSkinningIfNeed+"\n\n//  v_color = vec3(u_boneMatrices[int(a_joint.x)][1].xyz);\n}\n  ",t}return A(t,e),t.getInstance=function(){return this.__instance||(this.__instance=new t),this.__instance},Object.defineProperty(t.prototype,"vertexShaderVariableDefinitions",{get:function(){var e=this.glsl_versionText,t=this.glsl_vertex_in,r=this.glsl_vertex_out;return e+"\nprecision highp float;\n"+t+" vec3 a_position;\n"+t+" vec3 a_color;\n"+t+" vec3 a_normal;\n"+t+" float a_instanceID;\n"+t+" vec2 a_texcoord;\n"+t+" vec4 a_joint;\n"+t+" vec4 a_weight;\n"+r+" vec3 v_color;\n"+r+" vec3 v_normal_inWorld;\n"+r+" vec4 v_position_inWorld;\n"+r+" vec2 v_texcoord;\nuniform mat4 u_boneMatrices[100];\n\n"+this.toNormalMatrix+"\n\n"+this.getSkinMatrix+"\n\n"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fragmentShaderSimple",{get:function(){var e=this.glsl_versionText,t=this.glsl_fragment_in,r=this.glsl_rt0,i=this.glsl_fragColor,n=this.glsl_texture;return e+"\nprecision highp float;\n\nstruct Material {\n  vec4 baseColorFactor;\n  sampler2D baseColorTexture;\n};\nuniform Material u_material;\n\nstruct Light {\n  vec4 lightPosition;\n  vec4 lightDirection;\n  vec4 lightIntensity;\n};\nuniform Light u_lights["+B.a.maxLightNumberInShader+"];\nuniform int u_lightNumber;\n\n"+t+" vec3 v_color;\n"+t+" vec3 v_normal_inWorld;\n"+t+" vec4 v_position_inWorld;\n"+t+" vec2 v_texcoord;\n"+r+"\nvoid main ()\n{\n\n  // Normal\n  vec3 normal_inWorld = normalize(v_normal_inWorld);\n\n  // baseColor\n  vec3 color = vec3(0.0, 0.0, 0.0);\n  if (v_color != color && u_material.baseColorFactor.rgb != color) {\n    color = v_color * u_material.baseColorFactor.rgb;\n  } else if (v_color == color) {\n    color = u_material.baseColorFactor.rgb;\n  } else if (u_material.baseColorFactor.rgb == color) {\n    color = v_color;\n  } else {\n    color = vec3(1.0, 1.0, 1.0);\n  }\n  //color = v_color;\n\n  // baseColorTexture\n  vec4 textureColor = "+n+"(u_material.baseColorTexture, v_texcoord);\n  if (textureColor.r > 0.05) {\n    color *= textureColor.rgb;\n  }\n\n  // Lighting\n  if (length(v_normal_inWorld) > 0.02) {\n    vec3 diffuse = vec3(0.0, 0.0, 0.0);\n    for (int i = 0; i < "+B.a.maxLightNumberInShader+"; i++) {\n      if (i >= u_lightNumber) {\n        break;\n      }\n\n      vec3 lightDirection = u_lights[i].lightDirection.xyz;\n      float lightType = u_lights[i].lightPosition.w;\n      float spotCosCutoff = u_lights[i].lightDirection.w;\n      float spotExponent = u_lights[i].lightIntensity.w;\n\n      if (0.75 < lightType) { // is pointlight or spotlight\n        lightDirection = normalize(u_lights[i].lightPosition.xyz - v_position_inWorld.xyz);\n      }\n      float spotEffect = 1.0;\n      if (lightType > 1.75) { // is spotlight\n        spotEffect = dot(u_lights[i].lightDirection.xyz, lightDirection);\n        if (spotEffect > spotCosCutoff) {\n          spotEffect = pow(spotEffect, spotExponent);\n        } else {\n          spotEffect = 0.0;\n        }\n      }\n\n      vec3 incidentLight = spotEffect * u_lights[i].lightIntensity.xyz;\n//      incidentLight *= M_PI;\n\n      diffuse += 1.0 * max(0.0, dot(normal_inWorld, lightDirection)) * incidentLight;\n    }\n\n    color *= diffuse;\n  }\n\n  rt0 = vec4(color, 1.0);\n  //rt0 = vec4(u_lightNumber, 0.0, 0.0, 1.0);\n\n\n  "+i+"\n}\n"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fragmentShader",{get:function(){return this.fragmentShaderSimple},enumerable:!0,configurable:!0}),t.attributeNames=["a_position","a_color","a_normal","a_texcoord","a_joint","a_weight","a_instanceID"],t.attributeSemantics=[N.a.Position,N.a.Color0,N.a.Normal,N.a.Texcoord0,N.a.Joints0,N.a.Weights0,N.a.Instance],t}(F),H=function(){function e(){this.__webglResourceRepository=a.a.getInstance(),this.__uboUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1,this.vertexShaderMethodDefinitions_UBO="layout (std140) uniform matrix {\n    mat4 world[1024];\n  } u_matrix;\n\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    float index = instanceId;\n    return transpose(u_matrix.world[int(index)]);\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}return e.prototype.setupShaderProgram=function(){if(this.__shaderProgramUid===c.a.InvalidCGAPIResourceUid){var e=V.getInstance(),t=e.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_UBO+e.vertexShaderBody,r=e.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:V.attributeNames,attributeSemantics:V.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:E.ViewMatrix,isPlural:!1},{semantic:E.ProjectionMatrix,isPlural:!1}])}},e.prototype.__isLoaded=function(e){return null!=this.__vertexHandles[e]},e.prototype.$load=function(t){if(!this.__isLoaded(0))for(var r=t.getPrimitiveNumber(),i=0;i<r;i++){var n=t.getPrimitiveAt(i),a=this.__webglResourceRepository.createVertexDataResources(n);this.__vertexHandles[i]=a,e.__vertexHandleOfPrimitiveObjectUids.set(n.objectUid,a)}},e.prototype.$prerender=function(t,r){if(!this.__isVAOSet){for(var i=t.getPrimitiveNumber(),n=0;n<i;n++){var a=t.getPrimitiveAt(n);this.__vertexHandles[n]=e.__vertexHandleOfPrimitiveObjectUids.get(a.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[n],a,r)}this.__isVAOSet=!0}},e.prototype.common_$prerender=function(){var e=o.a.getInstance().getBuffer(u.a.GPUInstanceData);new Float32Array(e.getArrayBuffer());this.__uboUid===c.a.InvalidCGAPIResourceUid?(this.__uboUid=this.__webglResourceRepository.createUniformBuffer(l.a.getAccessor("worldMatrix",l.a).dataViewOfBufferView),this.__webglResourceRepository.bindUniformBufferBase(0,this.__uboUid)):this.__webglResourceRepository.updateUniformBuffer(this.__uboUid,l.a.getAccessor("worldMatrix",l.a).dataViewOfBufferView)},e.prototype.attachGPUData=function(){this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"matrix",0)},e.prototype.attatchShaderProgram=function(){var e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)},e.prototype.attachVertexData=function(e,t,r,i){var n=this.__vertexHandles[e],a=this.__webglResourceRepository.getWebGLResource(n.vaoHandle),o=r.getRawContext();if(null!=a)r.bindVertexArray(a);else{this.__webglResourceRepository.setVertexDataToPipeline(n,t,i);var s=this.__webglResourceRepository.getWebGLResource(n.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,s)}},e.getInstance=function(){return this.__instance||(this.__instance=new e),this.__instance},e.prototype.common_$render=function(e,t){var r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!0},e.__vertexHandleOfPrimitiveObjectUids=new Map,e}(),j=r(27),O=r(33),k=r(1),z=r(20),X=r(34),q=r(22),$=r(42),Y=r(4),J=r(15),K=function(){function e(){this.__webglResourceRepository=a.a.getInstance(),this.__instanceDataTextureUid=c.a.InvalidCGAPIResourceUid,this.__vertexDataTextureUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.__primitiveHeaderUboUid=c.a.InvalidCGAPIResourceUid,this.__indexCountToSubtractUboUid=c.a.InvalidCGAPIResourceUid,this.__entitiesUidUboUid=c.a.InvalidCGAPIResourceUid,this.__primitiveUidUboUid=c.a.InvalidCGAPIResourceUid,this.__isVertexReady=!1}return Object.defineProperty(e.prototype,"__transformFeedbackShaderText",{get:function(){V.getInstance().glsl_vertex_in,V.getInstance().glsl_texture;return"#version 300 es\n\n    layout (std140) uniform indexCountsToSubtract {\n      ivec4 counts[256];\n    } u_indexCountsToSubtract;\n    layout (std140) uniform entityUids {\n      ivec4 ids[256];\n    } u_entityData;\n    layout (std140) uniform primitiveUids {\n      ivec4 ids[256];\n    } u_primitiveData;\n    layout (std140) uniform primitiveHeader {\n      ivec4 data[256];\n    } u_primitiveHeader;\n\n    out vec4 position;\n    //out vec3 colors;\n\n    uniform sampler2D u_instanceDataTexture;\n    uniform sampler2D u_vertexDataTexture;\n\n    void main(){\n      int indexOfVertices = gl_VertexID + 3*gl_InstanceID;\n\n      int entityUidMinusOne = 0;\n      int primitiveUid = 0;\n      for (int i=0; i<=indexOfVertices; i++) {\n        for (int j=0; j<1024; j++) {\n          int value = u_indexCountsToSubtract.counts[j/4][j%4];\n          int result = int(step(float(value), float(i)));\n          if (result > 0) {\n            entityUidMinusOne = result * int(u_entityData.ids[j/4][j%4]) - 1;\n            primitiveUid = result * u_primitiveData.ids[j/4][j%4];\n          } else {\n            break;\n          }\n        }\n      }\n\n      ivec4 indicesMeta = u_primitiveHeader.data[9*primitiveUid + 0];\n      int primIndicesByteOffset = indicesMeta.x;\n      int primIndicesComponentSizeInByte = indicesMeta.y;\n      int primIndicesLength = indicesMeta.z;\n\n      int idx = gl_VertexID - primIndicesByteOffset / 4 /*byte*/;\n\n      // get Indices\n      int texelLength = "+o.a.bufferWidthLength+";\n      vec4 indexVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n      int index = int(indexVec4[idx%4]);\n\n      // get Positions\n      ivec4 indicesData = u_primitiveHeader.data[9*primitiveUid + 1];\n      int primPositionsByteOffset = indicesData.x;\n      idx = primPositionsByteOffset/4 + index;\n      vec4 posVec4 = texelFetch(u_vertexDataTexture, ivec2(idx%texelLength, idx/texelLength), 0);\n\n      position = posVec4;\n    }\n"},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"__transformFeedbackFragmentShaderText",{get:function(){return"#version 300 es\nprecision highp float;\n\nout vec4 outColor;\n\nvoid main(){\n    outColor = vec4(1.0);\n}\n    "},enumerable:!0,configurable:!0}),e.prototype.setupShaderProgram=function(){if(this.__shaderProgramUid===c.a.InvalidCGAPIResourceUid){var e=this.__transformFeedbackShaderText,t=this.__transformFeedbackFragmentShaderText;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:e,fragmentShaderStr:t,attributeNames:V.attributeNames,attributeSemantics:V.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:E.ViewMatrix,isPlural:!1},{semantic:E.ProjectionMatrix,isPlural:!1}])}},e.prototype.$load=function(e){if(!this.__isVertexReady){var t=o.a.getInstance().getBuffer(u.a.CPUGeneric),r=t.takeBufferView({byteLengthToNeed:12,byteStride:4,isAoS:!1}).takeAccessor({compositionType:Y.a.Scalar,componentType:k.a.UnsingedInt,count:3}),i=t.takeBufferView({byteLengthToNeed:48,byteStride:16,isAoS:!1}).takeAccessor({compositionType:Y.a.Vec4,componentType:k.a.Float,count:3}),n=r.getTypedArray();n[0]=0,n[1]=1,n[2]=2;var a=$.a.createPrimitive({indices:n,attributeCompositionTypes:[i.compositionType],attributeSemantics:[N.a.Position],attributes:[i.getTypedArray()],primitiveMode:J.a.Triangles,material:void 0});this.__vertexHandle=this.__webglResourceRepository.createVertexDataResources(a),this.__isVertexReady=!0}},e.prototype.$prerender=function(e,t){},e.prototype.__setupUBOPrimitiveHeaderData=function(){var e=o.a.getInstance().getBuffer(u.a.UBOGeneric),t=new Int32Array(e.getArrayBuffer());this.__primitiveHeaderUboUid===c.a.InvalidCGAPIResourceUid&&(this.__primitiveHeaderUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(3,this.__primitiveHeaderUboUid))},e.prototype.__setupGPUInstanceMetaData=function(){if(this.__primitiveUidUboUid===c.a.InvalidCGAPIResourceUid){var e=X.a.getInstance()._getEntities(),t=new Int32Array(e.length),r=new Int32Array(e.length),i=new Int32Array(e.length),n=0;e.forEach(function(e,a){var o=e.getComponent(q.a);if(o){r[a]=o.getPrimitiveAt(0).primitiveUid,t[a]=e.entityUID;var s=o.getPrimitiveAt(0).indicesAccessor.elementCount;i[a]=n+s,n+=s}}),this.__indexCountToSubtractUboUid=this.__webglResourceRepository.createUniformBuffer(i),this.__webglResourceRepository.bindUniformBufferBase(0,this.__indexCountToSubtractUboUid),this.__entitiesUidUboUid=this.__webglResourceRepository.createUniformBuffer(t),this.__webglResourceRepository.bindUniformBufferBase(1,this.__entitiesUidUboUid),this.__primitiveUidUboUid=this.__webglResourceRepository.createUniformBuffer(r),this.__webglResourceRepository.bindUniformBufferBase(2,this.__primitiveUidUboUid)}},e.prototype.__setupGPUInstanceData=function(){var e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(j.a.TextureHalfFloat))&&(e=!0);var t,r=o.a.getInstance().getBuffer(u.a.GPUInstanceData),i=new Float32Array(r.getArrayBuffer());if(e){t=new Uint16Array(i.length);var n=r.byteSizeInUse/4;n/=2;for(var a=0;a<n;a++)t[a]=s.a.toHalfFloat(i[a])}this.__instanceDataTextureUid===c.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:z.a.RGBA16F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:O.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.HalfFloat,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:z.a.RGBA32F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__instanceDataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:O.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:O.a.RGBA,type:k.a.Float}):this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,t,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:O.a.RGBA,type:k.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__instanceDataTextureUid,i,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:O.a.RGBA,type:k.a.Float}))},e.prototype.__setupGPUVertexData=function(){if(this.__vertexDataTextureUid===c.a.InvalidCGAPIResourceUid){var e=o.a.getInstance().getBuffer(u.a.GPUVertexData),t=new Float32Array(e.getArrayBuffer());this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:z.a.RGBA32F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__vertexDataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:O.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1})}},e.prototype.common_$prerender=function(){this.__setupUBOPrimitiveHeaderData(),this.__setupGPUInstanceMetaData(),this.__setupGPUInstanceData(),this.__setupGPUVertexData()},e.prototype.attachGPUData=function(){var e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),t=this.__webglResourceRepository.getWebGLResource(this.__instanceDataTextureUid);e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,t);var r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid),i=e.getUniformLocation(r,"u_instanceDataTexture");e.uniform1i(i,0);e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),t=this.__webglResourceRepository.getWebGLResource(this.__vertexDataTextureUid);e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,t);r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);var n=e.getUniformLocation(r,"u_vertexDataTexture");e.uniform1i(n,1),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"indexCountsToSubtract",0),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"entityUids",1),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveUids",2),this.__webglResourceRepository.bindUniformBlock(this.__shaderProgramUid,"primitiveHeader",3)},e.prototype.attatchShaderProgram=function(){var e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)},e.prototype.attachVertexData=function(e,t,r,i){},e.getInstance=function(){return this.__instance||(this.__instance=new e),this.__instance},e.prototype.common_$render=function(e,t){var r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!0},e}(),Q=function(){function e(){this.__webglResourceRepository=a.a.getInstance(),this.__dataTextureUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.__vertexHandles=[],this.__isVAOSet=!1}return Object.defineProperty(e.prototype,"vertexShaderMethodDefinitions_dataTexture",{get:function(){var e=V.getInstance().glsl_texture;return"\n  uniform sampler2D u_dataTexture;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  /*\n   * This idea from https://qiita.com/YVT/items/c695ab4b3cf7faa93885\n   * arg = vec2(1. / size.x, 1. / size.x / size.y);\n   */\n  // vec4 fetchElement(sampler2D tex, float index, vec2 arg)\n  // {\n  //   return "+e+"( tex, arg * (index + 0.5) );\n  // }\n\n  vec4 fetchElement(sampler2D tex, float index, vec2 invSize)\n  {\n    float t = (index + 0.5) * invSize.x;\n    float x = fract(t);\n    float y = (floor(t) + 0.5) * invSize.y;\n    return "+e+"( tex, vec2(x, y) );\n  }\n\n  mat4 getMatrix(float instanceId)\n  {\n    float index = instanceId;\n    float powWidthVal = "+o.a.bufferWidthLength+".0;\n    float powHeightVal = "+o.a.bufferHeightLength+".0;\n    vec2 arg = vec2(1.0/powWidthVal, 1.0/powHeightVal);\n  //  vec2 arg = vec2(1.0/powWidthVal, 1.0/powWidthVal/powHeightVal);\n\n    vec4 col0 = fetchElement(u_dataTexture, index * 4.0 + 0.0, arg);\n   vec4 col1 = fetchElement(u_dataTexture, index * 4.0 + 1.0, arg);\n   vec4 col2 = fetchElement(u_dataTexture, index * 4.0 + 2.0, arg);\n\n    mat4 matrix = mat4(\n      col0.x, col1.x, col2.x, 0.0,\n      col0.y, col1.y, col2.y, 0.0,\n      col0.z, col1.z, col2.z, 0.0,\n      col0.w, col1.w, col2.w, 1.0\n      );\n\n    return matrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "},enumerable:!0,configurable:!0}),e.prototype.setupShaderProgram=function(){if(this.__shaderProgramUid===c.a.InvalidCGAPIResourceUid){var e=V.getInstance(),t=e.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_dataTexture+e.vertexShaderBody,r=e.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:V.attributeNames,attributeSemantics:V.attributeSemantics}),this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,[{semantic:E.ViewMatrix,isPlural:!1},{semantic:E.ProjectionMatrix,isPlural:!1}])}},e.prototype.__isLoaded=function(e){return null!=this.__vertexHandles[e]},e.prototype.$load=function(t){if(!this.__isLoaded(0))for(var r=t.getPrimitiveNumber(),i=0;i<r;i++){var n=t.getPrimitiveAt(i),a=this.__webglResourceRepository.createVertexDataResources(n);this.__vertexHandles[i]=a,e.__vertexHandleOfPrimitiveObjectUids.set(n.objectUid,a)}},e.prototype.$prerender=function(t,r){if(!this.__isVAOSet){for(var i=t.getPrimitiveNumber(),n=0;n<i;n++){var a=t.getPrimitiveAt(n);this.__vertexHandles[n]=e.__vertexHandleOfPrimitiveObjectUids.get(a.objectUid),this.__webglResourceRepository.setVertexDataToPipeline(this.__vertexHandles[n],a,r)}this.__isVAOSet=!0}},e.prototype.common_$prerender=function(){var e=!1;(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2||this.__webglResourceRepository.currentWebGLContextWrapper.isSupportWebGL1Extension(j.a.TextureHalfFloat))&&(e=!0);var t,r=o.a.getInstance().getBuffer(u.a.GPUInstanceData),i=new Float32Array(r.getArrayBuffer());if(e){t=new Uint16Array(i.length);var n=r.byteSizeInUse/4;n/=2;for(var a=0;a<n;a++)t[a]=s.a.toHalfFloat(i[a])}this.__dataTextureUid===c.a.InvalidCGAPIResourceUid?e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:z.a.RGBA16F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(t,{level:0,internalFormat:O.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.HalfFloat,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:z.a.RGBA32F,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):this.__dataTextureUid=this.__webglResourceRepository.createTexture(i,{level:0,internalFormat:O.a.RGBA,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.Repeat,wrapT:z.a.Repeat,generateMipmap:!1,anisotropy:!1}):e?this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2?this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:O.a.RGBA,type:k.a.Float}):this.__webglResourceRepository.updateTexture(this.__dataTextureUid,t,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:O.a.RGBA,type:k.a.HalfFloat}):(this.__webglResourceRepository.currentWebGLContextWrapper.isWebGL2,this.__webglResourceRepository.updateTexture(this.__dataTextureUid,i,{level:0,width:o.a.bufferWidthLength,height:o.a.bufferHeightLength,format:O.a.RGBA,type:k.a.Float}))},e.prototype.attachGPUData=function(){var e=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),t=this.__webglResourceRepository.getWebGLResource(this.__dataTextureUid);e.bindTexture(e.TEXTURE_2D,t);var r=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid),i=e.getUniformLocation(r,"u_dataTexture");e.uniform1i(i,0)},e.prototype.attatchShaderProgram=function(){var e=this.__shaderProgramUid,t=this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext(),r=this.__webglResourceRepository.getWebGLResource(e);t.useProgram(r)},e.prototype.attachVertexData=function(e,t,r,i){var n=this.__vertexHandles[e],a=this.__webglResourceRepository.getWebGLResource(n.vaoHandle),o=r.getRawContext();if(null!=a)r.bindVertexArray(a);else{this.__webglResourceRepository.setVertexDataToPipeline(n,t,i);var s=this.__webglResourceRepository.getWebGLResource(n.iboHandle);o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,s)}},e.getInstance=function(){return this.__instance||(this.__instance=new e),this.__instance},e.prototype.common_$render=function(e,t){var r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!0},e.__vertexHandleOfPrimitiveObjectUids=new Map,e}(),Z=r(26),ee=r(47),te=r(21),re=function(){var e=function(t,r){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(t,r)};return function(t,r){function i(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(i.prototype=r.prototype,new i)}}(),ie=function(e){function t(){var t=e.call(this)||this;return t.vertexShaderBody="\n\nvoid main ()\n{\n  mat4 worldMatrix = getMatrix(a_instanceID);\n  mat4 viewMatrix = getViewMatrix(a_instanceID);\n  mat4 projectionMatrix = getProjectionMatrix(a_instanceID);\n  mat3 normalMatrix = getNormalMatrix(a_instanceID);\n\n  v_position_inWorld = worldMatrix * vec4(a_position, 1.0);\n\n  gl_Position = projectionMatrix * viewMatrix * v_position_inWorld;\n  v_color = a_color;\n\n  v_normal_inWorld = normalMatrix * a_normal;\n  v_faceNormal_inWorld = normalMatrix * a_faceNormal;\n  v_texcoord = a_texcoord;\n\n  // Skeletal\n  "+t.processSkinningIfNeed+"\n\n  if (length(a_normal) > 0.01) {\n    // if normal exist\n    vec3 tangent_inWorld;\n    if (!isSkinning) {\n      tangent_inWorld = normalMatrix * a_tangent;\n    }\n\n    v_binormal_inWorld = cross(v_normal_inWorld, tangent_inWorld);\n    v_tangent_inWorld = cross(v_binormal_inWorld, v_normal_inWorld);\n  }\n\n  v_baryCentricCoord = a_baryCentricCoord;\n\n\n//  v_color = vec3(u_boneMatrices[int(a_joint.x)][1].xyz);\n}\n  ",t}return re(t,e),t.getInstance=function(){return this.__instance||(this.__instance=new t),this.__instance},Object.defineProperty(t.prototype,"vertexShaderVariableDefinitions",{get:function(){var e=this.glsl_versionText,t=this.glsl_vertex_in,r=this.glsl_vertex_out;return e+"\nprecision highp float;\n"+t+" vec3 a_position;\n"+t+" vec3 a_color;\n"+t+" vec3 a_normal;\n"+t+" vec3 a_faceNormal;\n"+t+" vec3 a_tangent;\n"+t+" float a_instanceID;\n"+t+" vec2 a_texcoord;\n"+t+" vec4 a_joint;\n"+t+" vec4 a_weight;\n"+t+" vec3 a_baryCentricCoord;\n"+r+" vec3 v_color;\n"+r+" vec3 v_normal_inWorld;\n"+r+" vec3 v_faceNormal_inWorld;\n"+r+" vec3 v_tangent_inWorld;\n"+r+" vec3 v_binormal_inWorld;\n"+r+" vec4 v_position_inWorld;\n"+r+" vec2 v_texcoord;\n"+r+" vec3 v_baryCentricCoord;\nuniform mat4 u_boneMatrices[100];\n\n"+this.toNormalMatrix+"\n\n"+this.getSkinMatrix+"\n\n"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fragmentShaderSimple",{get:function(){var e=this.glsl_versionText,t=this.glsl_fragment_in,r=this.glsl_rt0,i=this.glsl_fragColor,n=this.glsl_texture;return e+"\n"+this.glsl1ShaderTextureLodExt+"\n"+this.glsl1ShaderDerivativeExt+"\nprecision highp float;\n\nstruct Material {\n  vec4 baseColorFactor;\n  sampler2D baseColorTexture;\n  sampler2D normalTexture;\n  sampler2D occlusionTexture;\n  sampler2D emissiveTexture;\n  vec2 metallicRoughnessFactor;\n  sampler2D metallicRoughnessTexture;\n};\nuniform Material u_material;\n\nstruct Light {\n  vec4 lightPosition;\n  vec4 lightDirection;\n  vec4 lightIntensity;\n};\nuniform Light u_lights["+B.a.maxLightNumberInShader+"];\nuniform int u_lightNumber;\n\nuniform vec3 u_viewPosition;\n\nuniform samplerCube u_diffuseEnvTexture;\nuniform samplerCube u_specularEnvTexture;\nuniform vec3 u_iblParameter;\n\n"+t+" vec3 v_color;\n"+t+" vec3 v_normal_inWorld;\n"+t+" vec3 v_faceNormal_inWorld;\n"+t+" vec3 v_tangent_inWorld;\n"+t+" vec3 v_binormal_inWorld;\n"+t+" vec4 v_position_inWorld;\n"+t+" vec2 v_texcoord;\n"+t+" vec3 v_baryCentricCoord;\n"+r+"\n\n"+this.pbrUniformDefinition+"\n\n"+this.pbrMethodDefinition+"\n\nvoid main ()\n{\n\n  // Normal\n  vec3 normal_inWorld = normalize(v_normal_inWorld);\n\n  if (length(v_tangent_inWorld) > 0.01) {\n    vec3 normal = "+n+"(u_material.normalTexture, v_texcoord).xyz*2.0 - 1.0;\n    if (length(normal) > 0.01) {\n      vec3 tangent_inWorld = normalize(v_tangent_inWorld);\n      vec3 binormal_inWorld = normalize(v_binormal_inWorld);\n      normal_inWorld = normalize(v_normal_inWorld);\n\n      mat3 tbnMat_tangent_to_world = mat3(\n        tangent_inWorld.x, tangent_inWorld.y, tangent_inWorld.z,\n        binormal_inWorld.x, binormal_inWorld.y, binormal_inWorld.z,\n        normal_inWorld.x, normal_inWorld.y, normal_inWorld.z\n      );\n\n      normal = normalize(tbnMat_tangent_to_world * normal);\n      normal_inWorld = normal;\n    }\n  }\n\n\n\n  // BaseColorFactor\n  vec3 baseColor = vec3(0.0, 0.0, 0.0);\n  float alpha = 1.0;\n  if (v_color != baseColor && u_material.baseColorFactor.rgb != baseColor) {\n    baseColor = v_color * u_material.baseColorFactor.rgb;\n    alpha = u_material.baseColorFactor.a;\n  } else if (v_color == baseColor) {\n    baseColor = u_material.baseColorFactor.rgb;\n    alpha = u_material.baseColorFactor.a;\n  } else if (u_material.baseColorFactor.rgb == baseColor) {\n    baseColor = v_color;\n  } else {\n    baseColor = vec3(1.0, 1.0, 1.0);\n  }\n\n\n  // BaseColor (take account for BaseColorTexture)\n  vec4 textureColor = "+n+"(u_material.baseColorTexture, v_texcoord);\n  if (length(textureColor) > 0.01) {\n    baseColor *= srgbToLinear(textureColor.rgb);\n    alpha *= textureColor.a;\n  }\n\n  // Metallic & Roughness\n  float userRoughness = u_material.metallicRoughnessFactor.y;\n  float metallic = u_material.metallicRoughnessFactor.x;\n\n  vec4 ormTexel = texture2D(u_material.metallicRoughnessTexture, v_texcoord);\n  userRoughness = ormTexel.g * userRoughness;\n  metallic = ormTexel.b * metallic;\n\n  userRoughness = clamp(userRoughness, c_MinRoughness, 1.0);\n  metallic = clamp(metallic, 0.0, 1.0);\n  float alphaRoughness = userRoughness * userRoughness;\n\n  // F0\n  vec3 diffuseMatAverageF0 = vec3(0.04);\n  vec3 F0 = mix(diffuseMatAverageF0, baseColor.rgb, metallic);\n\n  // Albedo\n  vec3 albedo = baseColor.rgb * (vec3(1.0) - diffuseMatAverageF0);\n  albedo.rgb *= (1.0 - metallic);\n\n  // ViewDirection\n  vec3 viewDirection = normalize(u_viewPosition - v_position_inWorld.xyz);\n\n  // NV\n  float NV = clamp(dot(normal_inWorld, viewDirection), 0.001, 1.0);\n\n  rt0 = vec4(0.0, 0.0, 0.0, alpha);\n\n  // Lighting\n  if (length(v_normal_inWorld) > 0.02) {\n    vec3 diffuse = vec3(0.0, 0.0, 0.0);\n    for (int i = 0; i < "+B.a.maxLightNumberInShader+"; i++) {\n      if (i >= u_lightNumber) {\n        break;\n      }\n\n      // Light\n      vec3 lightDirection = u_lights[i].lightDirection.xyz;\n      float lightType = u_lights[i].lightPosition.w;\n      float spotCosCutoff = u_lights[i].lightDirection.w;\n      float spotExponent = u_lights[i].lightIntensity.w;\n\n      if (0.75 < lightType) { // is pointlight or spotlight\n        lightDirection = normalize(u_lights[i].lightPosition.xyz - v_position_inWorld.xyz);\n      }\n      float spotEffect = 1.0;\n      if (lightType > 1.75) { // is spotlight\n        spotEffect = dot(u_lights[i].lightDirection.xyz, lightDirection);\n        if (spotEffect > spotCosCutoff) {\n          spotEffect = pow(spotEffect, spotExponent);\n        } else {\n          spotEffect = 0.0;\n        }\n      }\n      //diffuse += 1.0 * max(0.0, dot(normal_inWorld, lightDirection)) * spotEffect * u_lights[i].lightIntensity.xyz;\n\n      // IncidentLight\n      vec3 incidentLight = spotEffect * u_lights[i].lightIntensity.xyz;\n      incidentLight *= M_PI;\n\n      // Fresnel\n      vec3 halfVector = normalize(lightDirection + viewDirection);\n      float LH = clamp(dot(lightDirection, halfVector), 0.0, 1.0);\n      vec3 F = fresnel(F0, LH);\n\n      // Diffuse\n      vec3 diffuseContrib = (vec3(1.0) - F) * diffuse_brdf(albedo);\n\n      // Specular\n      float NL = clamp(dot(normal_inWorld, lightDirection), 0.001, 1.0);\n      float NH = clamp(dot(normal_inWorld, halfVector), 0.0, 1.0);\n      float VH = clamp(dot(viewDirection, halfVector), 0.0, 1.0);\n      vec3 specularContrib = cook_torrance_specular_brdf(NH, NL, NV, F, alphaRoughness);\n      vec3 diffuseAndSpecular = (diffuseContrib + specularContrib) * vec3(NL) * incidentLight.rgb;\n\n      rt0.xyz += diffuseAndSpecular;\n//      rt0.xyz += specularContrib * vec3(NL) * incidentLight.rgb;\n  //    rt0.xyz += diffuseContrib * vec3(NL) * incidentLight.rgb;\n  //    rt0.xyz += (vec3(1.0) - F) * diffuse_brdf(albedo);//diffuseContrib;//vec3(NL) * incidentLight.rgb;\n    }\n\n    vec3 reflection = reflect(-viewDirection, normal_inWorld);\n    vec3 ibl = IBLContribution(normal_inWorld, NV, reflection, albedo, F0, userRoughness);\n\n    float occlusion = texture2D(u_material.occlusionTexture, v_texcoord).r;\n\n    // Occlution to Indirect Lights\n    rt0.xyz += ibl * occlusion;\n\n  }\n\n  // Emissive\n  vec3 emissive = srgbToLinear(texture2D(u_material.emissiveTexture, v_texcoord).xyz);\n\n  rt0.xyz += emissive;\n\n  rt0.xyz = linearToSrgb(rt0.xyz);\n\n  "+i+"\n}\n"},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fragmentShader",{get:function(){return this.fragmentShaderSimple},enumerable:!0,configurable:!0}),t.attributeNames=["a_position","a_color","a_normal","a_faceNormal","a_texcoord","a_tangent","a_joint","a_weight","a_baryCentricCoord","a_instanceID"],t.attributeSemantics=[N.a.Position,N.a.Color0,N.a.Normal,N.a.FaceNormal,N.a.Texcoord0,N.a.Tangent,N.a.Joints0,N.a.Weights0,N.a.BaryCentricCoord,N.a.Instance],t}(F),ne=r(7),ae=r(48),oe=r(29),se=r(41),le=function(e,t,r,i){return new(r||(r=Promise))(function(n,a){function o(e){try{l(i.next(e))}catch(e){a(e)}}function s(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){e.done?n(e.value):new r(function(t){t(e.value)}).then(o,s)}l((i=i.apply(e,t||[])).next())})},ue=function(e,t){var r,i,n,a,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(n=2&a[0]?i.return:a[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,a[1])).done)return n;switch(i=0,n&&(a=[2&a[0],n.value]),a[0]){case 0:case 1:n=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,i=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(n=(n=o.trys).length>0&&n[n.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!n||a[1]>n[0]&&a[1]<n[3])){o.label=a[1];break}if(6===a[0]&&o.label<n[1]){o.label=n[1],n=a;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(a);break}n[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],i=0}finally{r=n=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},ce=function(){function e(){this.__webglResourceRepository=a.a.getInstance(),this.__uboUid=c.a.InvalidCGAPIResourceUid,this.__shaderProgramUid=c.a.InvalidCGAPIResourceUid,this.vertexShaderMethodDefinitions_uniform="\n  uniform mat4 u_worldMatrix;\n  uniform mat4 u_viewMatrix;\n  uniform mat4 u_projectionMatrix;\n  uniform mat3 u_normalMatrix;\n\n  mat4 getMatrix(float instanceId) {\n    return u_worldMatrix;\n  }\n\n  mat4 getViewMatrix(float instanceId) {\n    return u_viewMatrix;\n  }\n\n  mat4 getProjectionMatrix(float instanceId) {\n    return u_projectionMatrix;\n  }\n\n  mat3 getNormalMatrix(float instanceId) {\n    return u_normalMatrix;\n  }\n\n  "}return e.prototype.setupShaderProgram=function(){if(this.__shaderProgramUid===c.a.InvalidCGAPIResourceUid){var e=ie.getInstance(),t=e.vertexShaderVariableDefinitions+this.vertexShaderMethodDefinitions_uniform+e.vertexShaderBody,r=e.fragmentShader;this.__shaderProgramUid=this.__webglResourceRepository.createShaderProgram({vertexShaderStr:t,fragmentShaderStr:r,attributeNames:ie.attributeNames,attributeSemantics:ie.attributeSemantics}),this.__shaderProgram=this.__webglResourceRepository.getWebGLResource(this.__shaderProgramUid);for(var i=[{semantic:E.WorldMatrix,isPlural:!1},{semantic:E.BaseColorFactor,isPlural:!1,prefix:"material."},{semantic:E.ViewMatrix,isPlural:!1},{semantic:E.ProjectionMatrix,isPlural:!1},{semantic:E.NormalMatrix,isPlural:!1},{semantic:E.OcclusionTexture,isPlural:!1,prefix:"material."},{semantic:E.EmissiveTexture,isPlural:!1,prefix:"material."},{semantic:E.BaseColorTexture,isPlural:!1,prefix:"material."},{semantic:E.NormalTexture,isPlural:!1,prefix:"material."},{semantic:E.BoneMatrix,isPlural:!0},{semantic:E.LightNumber,isPlural:!1},{semantic:E.MetallicRoughnessFactor,isPlural:!1,prefix:"material."},{semantic:E.MetallicRoughnessTexture,isPlural:!1,prefix:"material."},{semantic:E.BrdfLutTexture,isPlural:!1},{semantic:E.DiffuseEnvTexture,isPlural:!1},{semantic:E.SpecularEnvTexture,isPlural:!1},{semantic:E.IBLParameter,isPlural:!1},{semantic:E.ViewPosition,isPlural:!1}],n=[],a=0;a<B.a.maxLightNumberInShader;a++)n.push({semanticStr:E.LightPosition,isPlural:!1,prefix:"lights["+a+"].",index:a}),n.push({semanticStr:E.LightDirection,isPlural:!1,prefix:"lights["+a+"].",index:a}),n.push({semanticStr:E.LightIntensity,isPlural:!1,prefix:"lights["+a+"].",index:a});this.__webglResourceRepository.setupUniformLocations(this.__shaderProgramUid,i.concat(n))}},e.prototype.$load=function(t){return le(this,void 0,void 0,function(){var r,i,n,a,o,s;return ue(this,function(l){switch(l.label){case 0:for(r=t.getPrimitiveNumber(),i=0;i<r;i++)n=t.getPrimitiveAt(i),a=this.__webglResourceRepository.createVertexDataResources(n),e.__vertexHandleOfPrimitiveObjectUids.set(n.primitiveUid,a);return this.__dummyWhiteTextureUid=this.__webglResourceRepository.createDummyTexture(),this.__dummyBlackTextureUid=this.__webglResourceRepository.createDummyTexture("rgba(0, 0, 0, 1)"),this.__dummyBlackCubeTextureUid=this.__webglResourceRepository.createDummyCubeTexture(),o=oe.a.getInstance().getModule("pbr").pbrCookTorranceBrdfLutDataUrl,s=this,[4,this.__webglResourceRepository.createTextureFromDataUri(o,{level:0,internalFormat:O.a.RGBA,border:0,format:O.a.RGBA,type:k.a.Float,magFilter:z.a.Nearest,minFilter:z.a.Nearest,wrapS:z.a.ClampToEdge,wrapT:z.a.ClampToEdge,generateMipmap:!1,anisotropy:!1})];case 1:return s.__pbrCookTorranceBrdfLutDataUrlUid=l.sent(),[2]}})})},e.prototype.$prerender=function(t,r){for(var i=[],n=t.getPrimitiveNumber(),a=0;a<n;a++){var o=t.getPrimitiveAt(a);i[a]=e.__vertexHandleOfPrimitiveObjectUids.get(o.primitiveUid),i[a].setComplete,this.__webglResourceRepository.setVertexDataToPipeline(i[a],o,r),i[a].setComplete=!0}},e.prototype.common_$prerender=function(){var e=ne.a.getInstance();this.__lightComponents=e.getComponentsWithType(ae.a)},e.prototype.attachGPUData=function(){},e.prototype.attatchShaderProgram=function(){this.__shaderProgramUid;this.__webglResourceRepository.currentWebGLContextWrapper.getRawContext().useProgram(this.__shaderProgram)},e.prototype.attachVertexData=function(t,r,i,n){var a=e.__vertexHandleOfPrimitiveObjectUids.get(r.primitiveUid),o=this.__webglResourceRepository.getWebGLResource(a.vaoHandle),s=i.getRawContext();if(null!=o)i.bindVertexArray(o);else{this.__webglResourceRepository.setVertexDataToPipeline(a,r,n);var l=this.__webglResourceRepository.getWebGLResource(a.iboHandle);s.bindBuffer(s.ELEMENT_ARRAY_BUFFER,l)}},e.prototype.dettachVertexData=function(e){var t=e.getRawContext();e.bindVertexArray&&e.bindVertexArray(null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),t.bindBuffer(t.ARRAY_BUFFER,null)},e.getInstance=function(){return this.__instance||(this.__instance=new e),this.__instance},e.prototype.common_$render=function(e,t){var r=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();r.getRawContext();return this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ViewMatrix,!0,4,"f",!0,{x:e.v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ProjectionMatrix,!0,4,"f",!0,{x:t.v}),!1},e.prototype.$render=function(e,t,r,i,n,a){var o=this.__webglResourceRepository.currentWebGLContextWrapper;this.attatchShaderProgram();var s=o.getRawContext();e.componentSID===se.a.firstOpaqueSid&&s.disable(s.BLEND),e.componentSID==se.a.firstTranparentSid&&(s.enable(s.BLEND),s.blendFuncSeparate(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA,s.ONE,s.ONE));for(var l=e.getPrimitiveNumber(),u=0;u<l;u++){var _=e.getPrimitiveAt(u);this.attachVertexData(u,_,o,c.a.InvalidCGAPIResourceUid),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.WorldMatrix,!0,4,"f",!0,{x:Z.a.transpose(t).v}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.NormalMatrix,!0,3,"f",!0,{x:r.v});var d=_.material,h=[],g=[];d?(h[0]=d.baseColor.r,h[1]=d.baseColor.g,h[2]=d.baseColor.b,h[3]=d.alpha,g[0]=d.metallicFactor,g[1]=d.roughnessFactor):(h[0]=1,h[1]=1,h[2]=1,h[3]=1,g[0]=1,g[1]=1),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.BaseColorFactor,!1,4,"f",!0,{x:h}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.MetallicRoughnessFactor,!1,2,"f",!0,{x:g}),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.LightNumber,!1,1,"i",!1,{x:this.__lightComponents.length});for(var p=0;p<this.__lightComponents.length&&!(p>=B.a.maxLightNumberInShader);p++){var f=this.__lightComponents[p],m=f.entity.getSceneGraph().worldPosition,b=f.direction,x=f.intensity;this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.LightPosition,!1,4,"f",!1,{x:m.x,y:m.y,z:m.z,w:f.type.index},p),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.LightDirection,!1,4,"f",!1,{x:b.x,y:b.y,z:b.z,w:0},p),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.LightIntensity,!1,4,"f",!1,{x:x.x,y:x.y,z:x.z,w:0},p)}var v=i.getComponent(ee.a);if(v){var R=v.jointMatrices;this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.BoneMatrix,!0,4,"f",!0,{x:R})}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.BaseColorTexture,!1,1,"i",!1,{x:0}),s.activeTexture(s.TEXTURE0),d&&d.baseColorTexture){var y=this.__webglResourceRepository.getWebGLResource(d.baseColorTexture.texture3DAPIResourseUid);s.bindTexture(s.TEXTURE_2D,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.NormalTexture,!1,1,"i",!1,{x:1}),s.activeTexture(s.TEXTURE1),d&&d.normalTexture){y=this.__webglResourceRepository.getWebGLResource(d.normalTexture.texture3DAPIResourseUid);s.bindTexture(s.TEXTURE_2D,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.OcclusionTexture,!1,1,"i",!1,{x:2}),s.activeTexture(s.TEXTURE2),d&&d.occlusionTexture){y=this.__webglResourceRepository.getWebGLResource(d.occlusionTexture.texture3DAPIResourseUid);s.bindTexture(s.TEXTURE_2D,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.EmissiveTexture,!1,1,"i",!1,{x:3}),s.activeTexture(s.TEXTURE3),d&&d.emissiveTexture){y=this.__webglResourceRepository.getWebGLResource(d.emissiveTexture.texture3DAPIResourseUid);s.bindTexture(s.TEXTURE_2D,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackTextureUid);s.bindTexture(s.TEXTURE_2D,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.MetallicRoughnessTexture,!1,1,"i",!1,{x:4}),s.activeTexture(s.TEXTURE4),d&&d.metallicRoughnessTexture){y=this.__webglResourceRepository.getWebGLResource(d.metallicRoughnessTexture.texture3DAPIResourseUid);s.bindTexture(s.TEXTURE_2D,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.BrdfLutTexture,!1,1,"i",!1,{x:5}),s.activeTexture(s.TEXTURE5),null!=this.__pbrCookTorranceBrdfLutDataUrlUid){y=this.__webglResourceRepository.getWebGLResource(this.__pbrCookTorranceBrdfLutDataUrlUid);s.bindTexture(s.TEXTURE_2D,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyWhiteTextureUid);s.bindTexture(s.TEXTURE_2D,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.DiffuseEnvTexture,!1,1,"i",!1,{x:6}),s.activeTexture(s.TEXTURE6),n&&n.isTextureReady){y=this.__webglResourceRepository.getWebGLResource(n.cubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,y)}if(this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.SpecularEnvTexture,!1,1,"i",!1,{x:7}),s.activeTexture(s.TEXTURE7),a&&a.isTextureReady){y=this.__webglResourceRepository.getWebGLResource(a.cubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,y)}else{y=this.__webglResourceRepository.getWebGLResource(this.__dummyBlackCubeTextureUid);s.bindTexture(s.TEXTURE_CUBE_MAP,y)}var w=1;a&&(w=a.mipmapLevelNumber),this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.IBLParameter,!1,3,"f",!1,{x:w,y:1,z:1});var T=ne.a.getInstance().getComponent(te.a,te.a.main).worldPosition;this.__webglResourceRepository.setUniformValue(this.__shaderProgramUid,E.ViewPosition,!1,3,"f",!0,{x:T.v}),s.drawElements(_.primitiveMode.index,_.indicesAccessor.elementCount,_.indicesAccessor.componentType.index,0),s.bindTexture(s.TEXTURE_2D,null),this.dettachVertexData(o)}s.useProgram(null)},e.__vertexHandleOfPrimitiveObjectUids=new Map,e}(),_e=function(e){return e.index===n.a.UBOWebGL2.index?H.getInstance():e.index===n.a.TransformFeedbackWebGL2.index?K.getInstance():e.index===n.a.UniformWebGL1.index?ce.getInstance():Q.getInstance()},de=r(49),he=Object.freeze({getRenderingStrategy:_e,GLSLShader:F,WebGLContextWrapper:de.a,WebGLResourceRepository:a.a,WebGLStrategyDataTexture:Q,WebGLStrategyTransformFeedback:K,WebGLStrategyUBO:H,WebGLStrategyUniform:ce});t.default=he}}]);