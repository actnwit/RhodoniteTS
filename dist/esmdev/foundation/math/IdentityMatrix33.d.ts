import { AbstractMatrix } from './AbstractMatrix';
import { IMatrix, IMatrix33 } from './IMatrix';
import { IVector, IMutableVector } from './IVector';
export declare class IdentityMatrix33 extends AbstractMatrix implements IMatrix, IMatrix33 {
    static readonly __v: Float32Array;
    constructor();
    toString(): string;
    toStringApproximately(): string;
    flattenAsArray(): number[];
    isDummy(): boolean;
    isEqual(mat: IMatrix33, delta?: number): boolean;
    isStrictEqual(mat: IMatrix33): boolean;
    at(row_i: number, column_i: number): number;
    determinant(): number;
    multiplyVector(vec: IVector): IVector;
    multiplyVectorTo(vec: IVector, outVec: IMutableVector): IMutableVector;
    getScale(): IVector;
    getScaleTo(outVec: IMutableVector): IMutableVector;
    clone(): IMatrix33;
    getRotate(): IMatrix33;
    get m00(): number;
    get m10(): number;
    get m20(): number;
    get m30(): number;
    get m01(): number;
    get m11(): number;
    get m21(): number;
    get m31(): number;
    get m02(): number;
    get m12(): number;
    get m22(): number;
    get m32(): number;
    get m03(): number;
    get m13(): number;
    get m23(): number;
    get m33(): number;
    get className(): string;
    static get compositionType(): {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: import("../..").IndexOf16Bytes;
        readonly __dummyStr: "MAT3";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): import("../..").Count;
        getGlslStr(componentType: import("..").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("..").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("..").ComponentTypeEnum): string;
        toWGSLType(componentType: import("..").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): import("../..").IndexOf16Bytes;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    };
    get isIdentityMatrixClass(): boolean;
}
