import { RnObject } from '../../core/RnObject';
import { Matrix44 } from '../../math/Matrix44';
import { SkeletalComponent } from '../../components/Skeletal/SkeletalComponent';
import { Material } from './Material';
import { MutableVector2 } from '../../math/MutableVector2';
import { MutableVector4 } from '../../math/MutableVector4';
import { MeshComponent } from '../../components/Mesh/MeshComponent';
import { Primitive } from '../../geometry/Primitive';
import { BlendShapeComponent } from '../../components/BlendShape/BlendShapeComponent';
import { ShaderityObject } from 'shaderity';
import { ShaderTypeEnum } from '../../definitions/ShaderType';
import { LightComponent } from '../../components/Light/LightComponent';
import { IMatrix33 } from '../../math/IMatrix';
import { RenderingArgWebGL, RenderingArgWebGpu } from '../../../webgl/types/CommonTypes';
import { CameraComponent } from '../../components/Camera/CameraComponent';
import { ShaderSemanticsInfo } from '../../definitions/ShaderSemanticsInfo';
type MaterialNodeUID = number;
export declare abstract class AbstractMaterialContent extends RnObject {
    protected __semantics: ShaderSemanticsInfo[];
    static materialNodes: AbstractMaterialContent[];
    protected __materialName: string;
    protected static __gl?: WebGLRenderingContext;
    protected __definitions: string;
    protected static __tmp_vector4: MutableVector4;
    protected static __tmp_vector2: MutableVector2;
    private __isMorphing;
    private __isSkinning;
    private __isLighting;
    private static __lightPositions;
    private static __lightDirections;
    private static __lightIntensities;
    private static __lightProperties;
    protected __vertexShaderityObject?: ShaderityObject;
    protected __pixelShaderityObject?: ShaderityObject;
    shaderType: ShaderTypeEnum;
    constructor(materialName: string, { isMorphing, isSkinning, isLighting }?: {
        isMorphing?: boolean | undefined;
        isSkinning?: boolean | undefined;
        isLighting?: boolean | undefined;
    }, vertexShaderityObject?: ShaderityObject, pixelShaderityObject?: ShaderityObject);
    getMaterialSemanticsVariantName(): string;
    get vertexShaderityObject(): import("shaderity/dist/esm/types/type").ShaderityObject | undefined;
    get pixelShaderityObject(): import("shaderity/dist/esm/types/type").ShaderityObject | undefined;
    getDefinitions(): string;
    static getMaterialNode(materialNodeUid: MaterialNodeUID): AbstractMaterialContent;
    get _semanticsInfoArray(): ShaderSemanticsInfo[];
    get isSkinning(): boolean;
    get isMorphing(): boolean;
    get isLighting(): boolean;
    setShaderSemanticsInfoArray(shaderSemanticsInfoArray: ShaderSemanticsInfo[]): void;
    protected setupBasicInfo(args: RenderingArgWebGL, shaderProgram: WebGLProgram, firstTime: boolean, material: Material, CameraComponentClass: typeof CameraComponent): void;
    protected setWorldMatrix(shaderProgram: WebGLProgram, worldMatrix: Matrix44): void;
    protected setNormalMatrix(shaderProgram: WebGLProgram, normalMatrix: IMatrix33): void;
    protected setIsBillboard(shaderProgram: WebGLProgram, isBillboard: boolean): void;
    protected setViewInfo(shaderProgram: WebGLProgram, cameraComponent: CameraComponent, isVr: boolean, displayIdx: number): void;
    protected setProjection(shaderProgram: WebGLProgram, cameraComponent: CameraComponent, isVr: boolean, displayIdx: number): void;
    protected setSkinning(shaderProgram: WebGLProgram, setUniform: boolean, skeletalComponent?: SkeletalComponent): void;
    protected setLightsInfo(shaderProgram: WebGLProgram, lightComponents: LightComponent[], material: Material, setUniform: boolean): void;
    setMorphInfo(shaderProgram: WebGLProgram, meshComponent: MeshComponent, primitive: Primitive, blendShapeComponent?: BlendShapeComponent): void;
    _setInternalSettingParametersToGpuWebGL({ material, shaderProgram, firstTime, args, }: {
        material: Material;
        shaderProgram: WebGLProgram;
        firstTime: boolean;
        args: RenderingArgWebGL;
    }): void;
    _setInternalSettingParametersToGpuWebGLPerPrimitive({ material, shaderProgram, firstTime, args, }: {
        material: Material;
        shaderProgram: WebGLProgram;
        firstTime: boolean;
        args: RenderingArgWebGL;
    }): void;
    _setInternalSettingParametersToGpuWebGpu({ material, args, }: {
        material: Material;
        args: RenderingArgWebGpu;
    }): void;
    getDefinition(): string;
    protected doShaderReflection(vertexShader: ShaderityObject, pixelShader: ShaderityObject, vertexShaderWebGpu: ShaderityObject, pixelShaderWebGpu: ShaderityObject): ShaderSemanticsInfo[];
}
export {};
