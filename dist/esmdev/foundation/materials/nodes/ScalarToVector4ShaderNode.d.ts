import { AbstractShaderNode } from '../core/AbstractShaderNode';
import { Socket } from '../core/Socket';
export declare class ScalarToVector4ShaderNode extends AbstractShaderNode {
    constructor();
    getSocketX(): Socket<"x", {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: number;
        readonly __dummyStr: "SCALAR";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): number;
        getGlslStr(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): number;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }, {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }>;
    getSocketY(): Socket<"y", {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: number;
        readonly __dummyStr: "SCALAR";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): number;
        getGlslStr(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): number;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }, {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }>;
    getSocketZ(): Socket<"z", {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: number;
        readonly __dummyStr: "SCALAR";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): number;
        getGlslStr(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): number;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }, {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }>;
    getSocketW(): Socket<"w", {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: number;
        readonly __dummyStr: "SCALAR";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): number;
        getGlslStr(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): number;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }, {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }>;
    getSocketOutput(): Socket<"outValue", {
        readonly __numberOfComponents: number;
        readonly __glslStr: string;
        readonly __hlslStr: string;
        readonly __webgpuStr: string;
        readonly __wgslStr: string;
        readonly __isArray: boolean;
        readonly __vec4SizeOfProperty: number;
        readonly __dummyStr: "VEC4";
        readonly webgpu: string;
        readonly wgsl: string;
        getNumberOfComponents(): number;
        getGlslStr(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getGlslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getWgslInitialValue(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        toWGSLType(componentType: import("../../definitions/ComponentType").ComponentTypeEnum): string;
        getVec4SizeOfProperty(): number;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }, {
        readonly __webgpu: string;
        readonly __wgsl: string;
        readonly __sizeInBytes: number;
        readonly __dummyStr: "FLOAT";
        readonly wgsl: string;
        readonly webgpu: string;
        getSizeInBytes(): number;
        isFloatingPoint(): boolean;
        isInteger(): boolean;
        isUnsignedInteger(): boolean;
        readonly index: number;
        readonly symbol: symbol;
        readonly str: string;
        toString(): string;
        toJSON(): number;
    }>;
}
