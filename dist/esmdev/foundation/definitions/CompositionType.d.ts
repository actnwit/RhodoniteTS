import { EnumIO } from '../misc/EnumIO';
import { Count, IndexOf16Bytes, SquareMatrixComponentN, VectorAndSquareMatrixComponentN, VectorComponentN } from '../../types/CommonTypes';
import type { ComponentTypeEnum } from './ComponentType';
import { Gltf2AccessorCompositionTypeString } from '../../types/glTF2';
export interface CompositionTypeEnum extends EnumIO {
    getNumberOfComponents(): Count;
    getGlslStr(componentType: ComponentTypeEnum): string;
    getGlslInitialValue(componentType: ComponentTypeEnum): string;
    getVec4SizeOfProperty(): IndexOf16Bytes;
}
declare const Scalar: CompositionTypeEnum;
declare const Vec2: CompositionTypeEnum;
declare const Vec3: CompositionTypeEnum;
declare const Vec4: CompositionTypeEnum;
declare const Mat2: CompositionTypeEnum;
declare const Mat3: CompositionTypeEnum;
declare const Mat4: CompositionTypeEnum;
export declare type VectorCompositionTypes = typeof Scalar | typeof Vec2 | typeof Vec3 | typeof Vec4;
declare function from(index: number): CompositionTypeEnum;
declare function fromString(str: string): CompositionTypeEnum;
declare function vectorFrom(componentN: number): CompositionTypeEnum;
declare function fromGlslString(str_: string): CompositionTypeEnum;
declare function toGltf2AccessorCompositionTypeString(componentN: VectorAndSquareMatrixComponentN): Gltf2AccessorCompositionTypeString;
declare function toGltf2AnimationAccessorCompositionTypeString(componentN: VectorComponentN): Gltf2AccessorCompositionTypeString;
declare function toGltf2SquareMatrixAccessorCompositionTypeString(componentN: SquareMatrixComponentN): Gltf2AccessorCompositionTypeString;
export declare type Gltf2AnimationAccessorCompositionType = typeof Scalar | typeof Vec2 | typeof Vec3 | typeof Vec4;
export declare type Gltf2AccessorCompositionType = typeof Scalar | typeof Vec2 | typeof Vec3 | typeof Vec4 | typeof Mat2 | typeof Mat3 | typeof Mat4;
declare function toGltf2AnimationAccessorCompositionType(componentN: VectorComponentN): Gltf2AnimationAccessorCompositionType;
declare function isArray(compositionType: CompositionTypeEnum): boolean;
declare function isTexture(compositionType: CompositionTypeEnum): boolean;
export declare const CompositionType: Readonly<{
    Unknown: CompositionTypeEnum;
    Scalar: CompositionTypeEnum;
    Vec2: CompositionTypeEnum;
    Vec3: CompositionTypeEnum;
    Vec4: CompositionTypeEnum;
    Mat2: CompositionTypeEnum;
    Mat3: CompositionTypeEnum;
    Mat4: CompositionTypeEnum;
    ScalarArray: CompositionTypeEnum;
    Vec2Array: CompositionTypeEnum;
    Vec3Array: CompositionTypeEnum;
    Vec4Array: CompositionTypeEnum;
    Mat2Array: CompositionTypeEnum;
    Mat3Array: CompositionTypeEnum;
    Mat4Array: CompositionTypeEnum;
    Texture2D: CompositionTypeEnum;
    Texture2DShadow: CompositionTypeEnum;
    TextureCube: CompositionTypeEnum;
    Texture2DRect: CompositionTypeEnum;
    from: typeof from;
    fromString: typeof fromString;
    vectorFrom: typeof vectorFrom;
    fromGlslString: typeof fromGlslString;
    isArray: typeof isArray;
    isTexture: typeof isTexture;
    toGltf2AnimationAccessorCompositionType: typeof toGltf2AnimationAccessorCompositionType;
    toGltf2AccessorCompositionTypeString: typeof toGltf2AccessorCompositionTypeString;
    toGltf2AnimationAccessorCompositionTypeString: typeof toGltf2AnimationAccessorCompositionTypeString;
    toGltf2SquareMatrixAccessorCompositionTypeString: typeof toGltf2SquareMatrixAccessorCompositionTypeString;
}>;
export {};
