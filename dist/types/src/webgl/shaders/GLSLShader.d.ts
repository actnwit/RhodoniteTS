import { VertexAttributeEnum } from "../../foundation/definitions/VertexAttribute";
import WebGLResourceRepository from "../WebGLResourceRepository";
import { ShaderAttributeOrSemanticsOrString } from "../../foundation/materials/AbstractMaterialNode";
import { CompositionTypeEnum } from "../../foundation/main";
export declare type AttributeNames = Array<string>;
export default abstract class GLSLShader {
    static __instance: GLSLShader;
    __webglResourceRepository?: WebGLResourceRepository;
    constructor();
    readonly glsl_rt0: "layout(location = 0) out vec4 rt0;\n" | "vec4 rt0;\n";
    readonly glsl_fragColor: "" | "gl_FragColor = rt0;\n";
    readonly glsl_vertex_in: "in" | "attribute";
    readonly glsl_fragment_in: "in" | "varying";
    readonly glsl_vertex_out: "varying" | "out";
    readonly glsl_vertex_centroid_out: "varying" | "centroid out";
    readonly glsl_texture: "texture" | "texture2D";
    readonly glsl_textureCube: "texture" | "textureCube";
    readonly glsl_textureProj: "textureProj" | "texture2DProj";
    readonly glsl_versionText: "" | "#version 300 es\n";
    readonly glslBegin: string;
    readonly glslMainBegin: string;
    readonly glslMainEnd: string;
    getGlslVertexShaderProperies(str?: string): string;
    readonly glsl1ShaderTextureLodExt: "" | "#extension GL_EXT_shader_texture_lod : require";
    readonly glsl1ShaderDerivativeExt: "" | "#extension GL_OES_standard_derivatives : require";
    readonly toNormalMatrix: string;
    readonly getSkinMatrix: string;
    readonly processGeometryWithSkinningOptionally: string;
    readonly pointSize: string;
    readonly pointDistanceAttenuation: string;
    readonly pbrUniformDefinition: string;
    readonly mipmapLevel: string;
    readonly pbrMethodDefinition: string;
    static getStringFromShaderAnyDataType(data: ShaderAttributeOrSemanticsOrString): string;
    abstract readonly vertexShaderDefinitions: string;
    abstract readonly pixelShaderDefinitions: string;
    abstract readonly vertexShaderBody: string;
    abstract readonly attributeNames: AttributeNames;
    abstract readonly attributeSemantics: Array<VertexAttributeEnum>;
    abstract readonly attributeCompositions: Array<CompositionTypeEnum>;
}
