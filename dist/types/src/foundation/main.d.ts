import EntityRepository from './core/EntityRepository';
import ComponentRepository from './core/ComponentRepository';
import TransformComponent from './components/TransformComponent';
import SceneGraphComponent from './components/SceneGraphComponent';
import MeshComponent from './components/MeshComponent';
import MeshRendererComponent from './components/MeshRendererComponent';
import Primitive from './geometry/Primitive';
import { PrimitiveModeEnum } from './definitions/PrimitiveMode';
import { VertexAttributeEnum } from './definitions/VertexAttribute';
import { CompositionTypeEnum } from './definitions/CompositionType';
import { ComponentTypeEnum } from './definitions/ComponentType';
import System from './system/System';
import Vector2 from './math/Vector2';
import Vector3 from './math/Vector3';
import Vector4 from './math/Vector4';
import MutableVector3 from './math/MutableVector3';
import MutableVector4 from './math/MutableVector4';
import Matrix33 from './math/Matrix33';
import Matrix44 from './math/Matrix44';
import MutableMatrix44 from './math/MutableMatrix44';
import Gltf1Importer from './importer/Gltf1Importer';
import Gltf2Importer from './importer/Gltf2Importer';
import DrcPointCloudImporter from './importer/DrcPointCloudImporter';
import Gltf2Exporter from './exporter/Gltf2Exporter';
import ModelConverter from './importer/ModelConverter';
import ModuleManager from './system/ModuleManager';
import MemoryManager from './core/MemoryManager';
import CameraComponent from './components/CameraComponent';
import RowMajarMatrix44 from './math/RowMajarMatrix44';
import AnimationComponent from './components/AnimationComponent';
import LightComponent from './components/LightComponent';
import CubeTexture from './textures/CubeTexture';
import CameraControllerComponent from './components/CameraControllerComponent';
import detectFormat from './importer/FormatDetector';
import Plane from './geometry/Plane';
import Sphere from './geometry/Sphere';
import Material from './materials/Material';
import RenderPass from './renderer/RenderPass';
import FrameBuffer from './renderer/FrameBuffer';
import Expression from './renderer/Expression';
import RenderTargetTexture from './textures/RenderTargetTexture';
import RenderBuffer from './textures/RenderBuffer';
import Texture from './textures/Texture';
import MathClassUtil from './math/MathClassUtil';
import Mesh from './geometry/Mesh';
import Component from './core/Component';
declare const Rn: {
    EntityRepository: typeof EntityRepository;
    ComponentRepository: typeof ComponentRepository;
    TransformComponent: typeof TransformComponent;
    SceneGraphComponent: typeof SceneGraphComponent;
    MeshComponent: typeof MeshComponent;
    MeshRendererComponent: typeof MeshRendererComponent;
    Primitive: typeof Primitive;
    CompositionType: Readonly<{
        Unknown: CompositionTypeEnum;
        Scalar: CompositionTypeEnum;
        Vec2: CompositionTypeEnum;
        Vec3: CompositionTypeEnum;
        Vec4: CompositionTypeEnum;
        Mat2: CompositionTypeEnum;
        Mat3: CompositionTypeEnum;
        Mat4: CompositionTypeEnum;
        Texture2D: CompositionTypeEnum;
        TextureCube: CompositionTypeEnum;
        ScalarArray: CompositionTypeEnum;
        Vec2Array: CompositionTypeEnum;
        Vec3Array: CompositionTypeEnum;
        Vec4Array: CompositionTypeEnum;
        from: (index: number) => CompositionTypeEnum;
        fromString: (str: string) => CompositionTypeEnum;
    }>;
    ComponentType: Readonly<{
        Unknown: ComponentTypeEnum;
        Byte: ComponentTypeEnum;
        UnsignedByte: ComponentTypeEnum;
        Short: ComponentTypeEnum;
        UnsignedShort: ComponentTypeEnum;
        Int: ComponentTypeEnum;
        UnsingedInt: ComponentTypeEnum;
        Float: ComponentTypeEnum;
        Double: ComponentTypeEnum;
        HalfFloat: ComponentTypeEnum;
        from: (index: number) => ComponentTypeEnum;
        fromTypedArray: (typedArray: TypedArray) => ComponentTypeEnum;
    }>;
    VertexAttribute: Readonly<{
        Unknown: VertexAttributeEnum;
        Position: VertexAttributeEnum;
        Normal: VertexAttributeEnum;
        Tangent: VertexAttributeEnum;
        Texcoord0: VertexAttributeEnum;
        Texcoord1: VertexAttributeEnum;
        Color0: VertexAttributeEnum;
        Joints0: VertexAttributeEnum;
        Weights0: VertexAttributeEnum;
        Instance: VertexAttributeEnum;
        FaceNormal: VertexAttributeEnum;
        BaryCentricCoord: VertexAttributeEnum;
        AttributeTypeNumber: number;
        from: (index: number) => VertexAttributeEnum;
        fromString: (str: string) => VertexAttributeEnum;
    }>;
    PrimitiveMode: Readonly<{
        Unknown: PrimitiveModeEnum;
        Points: PrimitiveModeEnum;
        Lines: PrimitiveModeEnum;
        LineLoop: PrimitiveModeEnum;
        LineStrip: PrimitiveModeEnum;
        Triangles: PrimitiveModeEnum;
        TriangleStrip: PrimitiveModeEnum;
        TriangleFan: PrimitiveModeEnum;
        from: (index: number) => PrimitiveModeEnum;
    }>;
    System: typeof System;
    Vector2: typeof Vector2;
    Vector3: typeof Vector3;
    Vector4: typeof Vector4;
    MutableVector3: typeof MutableVector3;
    MutableVector4: typeof MutableVector4;
    Matrix33: typeof Matrix33;
    Matrix44: typeof Matrix44;
    MutableMatrix44: typeof MutableMatrix44;
    ProcessApproach: Readonly<{
        None: import("./definitions/ProcessApproach").ProcessApproachEnum;
        UniformWebGL1: import("./definitions/ProcessApproach").ProcessApproachEnum;
        UniformWebGL2: import("./definitions/ProcessApproach").ProcessApproachEnum;
        DataTextureWebGL1: import("./definitions/ProcessApproach").ProcessApproachEnum;
        DataTextureWebGL2: import("./definitions/ProcessApproach").ProcessApproachEnum;
        UBOWebGL2: import("./definitions/ProcessApproach").ProcessApproachEnum;
        TransformFeedbackWebGL2: import("./definitions/ProcessApproach").ProcessApproachEnum;
        FastestWebGL1: import("./definitions/ProcessApproach").ProcessApproachEnum;
    }>;
    Gltf1Importer: typeof Gltf1Importer;
    Gltf2Importer: typeof Gltf2Importer;
    DrcPointCloudImporter: typeof DrcPointCloudImporter;
    ModelConverter: typeof ModelConverter;
    ModuleManager: typeof ModuleManager;
    MemoryManager: typeof MemoryManager;
    CameraComponent: typeof CameraComponent;
    CameraType: Readonly<{
        Perspective: import("./definitions/CameraType").CameraTypeEnum;
        Orthographic: import("./definitions/CameraType").CameraTypeEnum;
        Frustom: import("./definitions/CameraType").CameraTypeEnum;
        from: (index: number) => import("./definitions/CameraType").CameraTypeEnum;
        fromString: (str: string) => import("./definitions/CameraType").CameraTypeEnum;
    }>;
    RowMajarMatrix44: typeof RowMajarMatrix44;
    AnimationComponent: typeof AnimationComponent;
    LightComponent: typeof LightComponent;
    LightType: Readonly<{
        Point: import("./definitions/LightType").LightTypeEnum;
        Directional: import("./definitions/LightType").LightTypeEnum;
        Spot: import("./definitions/LightType").LightTypeEnum;
        Ambient: import("./definitions/LightType").LightTypeEnum;
        from: (index: number) => import("./definitions/LightType").LightTypeEnum;
        fromString: (str: string) => import("./definitions/LightType").LightTypeEnum;
    }>;
    CubeTexture: typeof CubeTexture;
    CameraControllerComponent: typeof CameraControllerComponent;
    AlphaMode: Readonly<{
        Opaque: import("./definitions/AlphaMode").AlphaModeEnum;
        Mask: import("./definitions/AlphaMode").AlphaModeEnum;
        Blend: import("./definitions/AlphaMode").AlphaModeEnum;
        from: (index: number) => import("./definitions/AlphaMode").AlphaModeEnum;
        fromString: (str: string) => import("./definitions/AlphaMode").AlphaModeEnum;
    }>;
    Gltf2Exporter: typeof Gltf2Exporter;
    detectFormat: typeof detectFormat;
    Config: {
        maxEntityNumber: number;
        maxLightNumberInShader: number;
        maxMaterialInstanceForEachType: number;
    };
    Plane: typeof Plane;
    Sphere: typeof Sphere;
    Material: typeof Material;
    MaterialHelper: Readonly<{
        createPbrUberMaterial: (maxInstancesNumber?: number | undefined) => Material;
        createClassicUberMaterial: (maxInstancesNumber?: number | undefined) => Material;
        createEnvConstantMaterial: (maxInstancesNumber?: number | undefined) => Material;
        createFXAA3QualityMaterial: (maxInstancesNumber?: number | undefined) => Material;
        createDepthEncodingMaterial: (maxInstancesNumber?: number | undefined) => Material;
        createShadowMapping32bitMaterial: (renderPass: RenderPass, maxInstancesNumber?: number | undefined) => Material;
        createGammaCorrectionMaterial: (maxInstancesNumber?: number | undefined) => Material;
    }>;
    ShaderSemantics: Readonly<{
        WorldMatrix: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ViewMatrix: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ProjectionMatrix: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        NormalMatrix: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        BoneMatrix: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        BaseColorFactor: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        BaseColorTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        NormalTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        MetallicRoughnessTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        OcclusionTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        EmissiveTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        LightNumber: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        LightPosition: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        LightDirection: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        LightIntensity: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        MetallicRoughnessFactor: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        BrdfLutTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        DiffuseEnvTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SpecularEnvTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        IBLParameter: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ViewPosition: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        Wireframe: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        DiffuseColorFactor: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        DiffuseColorTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SpecularColorFactor: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SpecularColorTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        Shininess: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ShadingModel: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SkinningMode: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        GeneralTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        VertexAttributesExistenceArray: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        BoneCompressedChank: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        BoneCompressedInfo: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        PointSize: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ColorEnvTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        PointDistanceAttenuation: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        HDRIFormat: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ScreenInfo: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        DepthTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        LightViewProjectionMatrix: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        Anisotropy: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        ClearCoatParameter: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SheenParameter: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SpecularGlossinessFactor: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        SpecularGlossinessTexture: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        from: (index: number) => import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        fromString: (str: string) => import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
        infoToString: (semanticInfo: import("./definitions/ShaderSemantics").ShaderSemanticsInfo) => string | undefined;
        fullSemanticStr: (info: import("./definitions/ShaderSemantics").ShaderSemanticsInfo) => string;
        fullSemanticPluralStr: (info: import("./definitions/ShaderSemantics").ShaderSemanticsInfo) => string;
        getShaderProperty: (materialTypeName: string, info: import("./definitions/ShaderSemantics").ShaderSemanticsInfo, memberName: string) => string;
        EntityUID: import("./definitions/ShaderSemantics").ShaderSemanticsEnum;
    }>;
    RenderPass: typeof RenderPass;
    FrameBuffer: typeof FrameBuffer;
    Expression: typeof Expression;
    HdriFormat: Readonly<{
        LDR_SRGB: import("./definitions/HdriFormat").HdriFormatEnum;
        LDR_LINEAR: import("./definitions/HdriFormat").HdriFormatEnum;
        HDR: import("./definitions/HdriFormat").HdriFormatEnum;
        RGBE_PNG: import("./definitions/HdriFormat").HdriFormatEnum;
        RGB9_E5_PNG: import("./definitions/HdriFormat").HdriFormatEnum;
        OpenEXR: import("./definitions/HdriFormat").HdriFormatEnum;
    }>;
    RenderTargetTexture: typeof RenderTargetTexture;
    RenderBuffer: typeof RenderBuffer;
    TextureParameter: Readonly<{
        Nearest: import("./definitions/TextureParameter").TextureParameterEnum;
        Linear: import("./definitions/TextureParameter").TextureParameterEnum;
        LinearMipmapLinear: import("./definitions/TextureParameter").TextureParameterEnum;
        TextureMagFilter: import("./definitions/TextureParameter").TextureParameterEnum;
        TextureMinFilter: import("./definitions/TextureParameter").TextureParameterEnum;
        TextureWrapS: import("./definitions/TextureParameter").TextureParameterEnum;
        TextureWrapT: import("./definitions/TextureParameter").TextureParameterEnum;
        Texture2D: import("./definitions/TextureParameter").TextureParameterEnum;
        Texture: import("./definitions/TextureParameter").TextureParameterEnum;
        Texture0: import("./definitions/TextureParameter").TextureParameterEnum;
        Texture1: import("./definitions/TextureParameter").TextureParameterEnum;
        ActiveTexture: import("./definitions/TextureParameter").TextureParameterEnum;
        Repeat: import("./definitions/TextureParameter").TextureParameterEnum;
        ClampToEdge: import("./definitions/TextureParameter").TextureParameterEnum;
        RGB8: import("./definitions/TextureParameter").TextureParameterEnum;
        RGBA8: import("./definitions/TextureParameter").TextureParameterEnum;
        RGB10_A2: import("./definitions/TextureParameter").TextureParameterEnum;
        RGB16F: import("./definitions/TextureParameter").TextureParameterEnum;
        RGB32F: import("./definitions/TextureParameter").TextureParameterEnum;
        RGBA16F: import("./definitions/TextureParameter").TextureParameterEnum;
        RGBA32F: import("./definitions/TextureParameter").TextureParameterEnum;
        Depth16: import("./definitions/TextureParameter").TextureParameterEnum;
        Depth24: import("./definitions/TextureParameter").TextureParameterEnum;
        Depth32F: import("./definitions/TextureParameter").TextureParameterEnum;
        Depth24Stencil8: import("./definitions/TextureParameter").TextureParameterEnum;
        Depth32FStencil8: import("./definitions/TextureParameter").TextureParameterEnum;
    }>;
    RenderableHelper: Readonly<{
        createTexturesForRenderTarget: (width: number, height: number, textureNum: number, { level, internalFormat, format, type, magFilter, minFilter, wrapS, wrapT }: {
            level?: number | undefined;
            internalFormat?: import("./definitions/PixelFormat").PixelFormatEnum | undefined;
            format?: import("./definitions/PixelFormat").PixelFormatEnum | undefined;
            type?: ComponentTypeEnum | undefined;
            magFilter?: import("./definitions/TextureParameter").TextureParameterEnum | undefined;
            minFilter?: import("./definitions/TextureParameter").TextureParameterEnum | undefined;
            wrapS?: import("./definitions/TextureParameter").TextureParameterEnum | undefined;
            wrapT?: import("./definitions/TextureParameter").TextureParameterEnum | undefined;
        }) => FrameBuffer;
    }>;
    Texture: typeof Texture;
    EntityHelper: Readonly<{
        createGroupEntity: () => import("./core/Entity").default;
        createMeshEntity: () => import("./core/Entity").default;
        createCameraEntity: () => import("./core/Entity").default;
        createCameraWithControllerEntity: () => import("./core/Entity").default;
    }>;
    MathClassUtil: typeof MathClassUtil;
    Mesh: typeof Mesh;
    MathUtil: Readonly<{
        radianToDegree: (rad: number) => number;
        degreeToRadian: (deg: number) => number;
        toHalfFloat: (val: number) => number;
        isPowerOfTwo: (x: number) => boolean;
        isPowerOfTwoTexture: (width: number, height: number) => boolean;
        packNormalizedVec4ToVec2: (x: number, y: number, z: number, w: number, criteria: number) => number[];
    }>;
    Component: typeof Component;
};
export default Rn;
export declare type RnType = typeof Rn;
export declare type CompositionTypeEnum = CompositionTypeEnum;
export declare type ComponentTypeEnum = ComponentTypeEnum;
export declare type VertexAttributeEnum = VertexAttributeEnum;
export declare type PrimitiveModeEnum = PrimitiveModeEnum;
