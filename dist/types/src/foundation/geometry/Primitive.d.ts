import { PrimitiveModeEnum } from '../definitions/PrimitiveMode';
import { VertexAttributeEnum } from '../definitions/VertexAttribute';
import Accessor from '../memory/Accessor';
import RnObject from '../core/RnObject';
import { ComponentTypeEnum } from '../definitions/ComponentType';
import { CompositionTypeEnum } from '../definitions/CompositionType';
import AABB from '../math/AABB';
import Material from '../materials/Material';
import { VertexHandles } from '../../webgl/WebGLResourceRepository';
declare type Attributes = Map<VertexAttributeEnum, Accessor>;
export default class Primitive extends RnObject {
    private __mode;
    material?: Material;
    private __attributes;
    private __indices?;
    private static __primitiveCount;
    private __primitiveUid;
    private static __headerAccessor?;
    private __aabb;
    private __targets;
    private __vertexHandles?;
    constructor();
    setData(attributes: Attributes, mode: PrimitiveModeEnum, material?: Material, indicesAccessor?: Accessor): void;
    static readonly maxPrimitiveCount: number;
    static readonly headerAccessor: Accessor | undefined;
    static createPrimitive({ indices, attributeCompositionTypes, attributeSemantics, attributes, material, primitiveMode }: {
        indices?: TypedArray;
        attributeCompositionTypes: Array<CompositionTypeEnum>;
        attributeSemantics: Array<VertexAttributeEnum>;
        attributes: Array<TypedArray>;
        primitiveMode: PrimitiveModeEnum;
        material?: Material;
    }): Primitive;
    readonly indicesAccessor: Accessor | undefined;
    getVertexCountAsIndicesBased(): number;
    getVertexCountAsVerticesBased(): number;
    getTriangleCountAsIndicesBased(): number;
    getTriangleCountAsVerticesBased(): number;
    hasIndices(): boolean;
    readonly attributeAccessors: Array<Accessor>;
    getAttribute(semantic: VertexAttributeEnum): Accessor | undefined;
    readonly attributeSemantics: Array<VertexAttributeEnum>;
    readonly attributeEntries: IterableIterator<[VertexAttributeEnum, Accessor]>;
    readonly attributeCompositionTypes: Array<CompositionTypeEnum>;
    readonly attributeComponentTypes: Array<ComponentTypeEnum>;
    readonly primitiveMode: PrimitiveModeEnum;
    readonly primitiveUid: PrimitiveUID;
    readonly AABB: AABB;
    setVertexAttribute(accessor: Accessor, vertexSemantics: VertexAttributeEnum): void;
    removeIndices(): void;
    setIndices(accessor: Accessor): void;
    setTargets(targets: Array<Attributes>): void;
    readonly targets: Array<Attributes>;
    isBlend(): boolean;
    isOpaque(): boolean;
    create3DAPIVertexData(): boolean;
    delete3DAPIVertexData(): boolean;
    readonly vertexHandles: VertexHandles | undefined;
}
export {};
