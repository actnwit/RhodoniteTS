import Component from '../core/Component';
import Primitive from '../geometry/Primitive';
import EntityRepository from '../core/EntityRepository';
import Vector3 from '../math/Vector3';
import Vector2 from '../math/Vector2';
import Accessor from '../memory/Accessor';
import AABB from '../math/AABB';
import CameraComponent from './CameraComponent';
export default class MeshComponent extends Component {
    private __primitives;
    private __opaquePrimitives;
    private __transparentPrimitives;
    private __localAABB;
    private __viewDepth;
    weights: never[];
    private __morphPrimitives;
    constructor(entityUid: EntityUID, componentSid: ComponentSID, entityRepository: EntityRepository);
    static readonly componentTID: ComponentTID;
    isAllBlend(): boolean;
    isBlendPartially(): boolean;
    isOpaque(): boolean;
    isFirstOpaquePrimitiveAt(index: Index): boolean;
    isFirstTransparentPrimitiveAt(index: Index): boolean;
    addPrimitive(primitive: Primitive): void;
    getPrimitiveAt(i: number): Primitive;
    getPrimitiveNumber(): number;
    $load(): void;
    __calcFaceNormals(): void;
    __calcFaceNormalFor3Vertices(i: Index, pos0: Vector3, pos1: Vector3, pos2: Vector3, normalAccessor: Accessor, indicesAccessor?: Accessor): void;
    __calcTangents(): void;
    __calcTangentFor3Vertices(i: Index, pos0: Vector3, pos1: Vector3, pos2: Vector3, uv0: Vector2, uv1: Vector2, uv2: Vector2, norm0: Vector3, norm1: Vector3, norm2: Vector3, tangentAccessor: Accessor, indicesAccessor?: Accessor): void;
    __calcTangentPerVertex(pos0Vec3: Vector3, pos1Vec3: Vector3, pos2Vec3: Vector3, uv0Vec2: Vector2, uv1Vec2: Vector2, uv2Vec2: Vector2, norm0Vec3: Vector3, norm1Vec3: Vector3, norm2Vec3: Vector3): any;
    readonly AABB: AABB;
    calcViewDepth(cameraComponent: CameraComponent): number;
    readonly viewDepth: number;
    makeVerticesSepareted(): void;
    __calcBaryCentricCoord(): void;
    __initMorphPrimitives(): void;
    __calcMorphPrimitives(): void;
}
