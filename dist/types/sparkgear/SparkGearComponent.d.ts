import Component from "../foundation/core/Component";
import EntityRepository from "../foundation/core/EntityRepository";
import Matrix44 from "../foundation/math/Matrix44";
import WebGLResourceRepository from "../webgl/WebGLResourceRepository";
import { ComponentTID, EntityUID, ComponentSID } from "../types/CommonTypes";
export default class SparkGearComponent extends Component {
    url?: string;
    private __hSPFXInst;
    private static __isInitialized;
    private __sceneGraphComponent?;
    private static SPFX_WebGLResourceRepository;
    private static SPFX_TempVAO;
    private static SPFX_CurrentVAO;
    private static SPFX_UsingVAO;
    private static SPFX_ArrayBuffer;
    private static SPFX_ElementArrayBuffer;
    private static SPFX_CurrentProgram;
    private static SPFX_FrontFace;
    private static SPFX_DepthFunc;
    private static SPFX_DepthWriteMask;
    private static SPFX_StencilTestEnabled;
    private static SPFX_DepthTestEnabled;
    private static SPFX_CullFaceEnabled;
    private static SPFX_BlendEnabled;
    private static SPFX_BlendSrcRgb;
    private static SPFX_BlendDstRgb;
    private static SPFX_BlendSrcAlpha;
    private static SPFX_BlendDstAlpha;
    private static SPFX_ActiveTexture;
    private static SPFX_Texture;
    private static __tmp_indentityMatrix;
    constructor(entityUid: EntityUID, componentSid: ComponentSID, entityRepository: EntityRepository);
    static readonly componentTID: ComponentTID;
    static common_$load(): void;
    $logic(): void;
    $render(): void;
    $load(): void;
    $create(): void;
    onBeforeRender(): void;
    onAfterRender(): void;
    play(): void;
    stop(): void;
    pause(): void;
    isPlaying(): any;
    kickTrigger(trigger: any): void;
    static SPARK_BackupStatus(): void;
    static SPARK_RestoreStatus: () => void;
    static SPFX_Initialize: (repository: WebGLResourceRepository) => void;
    static SPFX_Uninitialize(): void;
    static SPARK_SetCameraMatrix(viewMatrix: Matrix44, projectionMatrix: Matrix44): void;
    static SPFX_Update: (DeltaTime: number) => void;
    static SPARK_Draw(): void;
    static SPARK_DrawDebugInfo(InfoType: any): void;
}
